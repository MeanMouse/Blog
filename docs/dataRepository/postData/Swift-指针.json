{"title": "Swift \u6307\u9488", "date": "2021-09-13 19:59:34", "categories": "iOS", "tags": "Swift", "keywords": "\u6307\u9488", "description": "", "images": "", "file_name": "Swift-\u6307\u9488", "short": " \u5728 OC \u4e2d\u6307\u9488\u7684\u4f7f\u7528\u91c7\u7528 C \u8bed\u6cd5\u65b9\u5f0f\uff0c\u901a\u8fc7 *\u3001& \u64cd\u4f5c\u6307\u9488\uff0c\u5728 Swift \u9700\u8981\u521d\u59cb\u5316\u76f8\u5e94\u7684\u7684\u6307\u9488\u7c7b\uff0c\u5176\u4e2d\u5206\u4e3a\u4e24\u7c7b\uff1a \n \n typed pointer \u6307\u5411\u7684\u5185\u5b58\u5206\u914d\u4e86\u6570\u636e\u7c7b\u578b \n raw pointer \u6307\u5411\u7684\u5185\u5b58\u672a\u5206\u914d\u6570\u636e\u7c7b\u578b \n \n ", "content": "<p>\u5728 OC \u4e2d\u6307\u9488\u7684\u4f7f\u7528\u91c7\u7528 C \u8bed\u6cd5\u65b9\u5f0f\uff0c\u901a\u8fc7 *\u3001&amp; \u64cd\u4f5c\u6307\u9488\uff0c\u5728 Swift \u9700\u8981\u521d\u59cb\u5316\u76f8\u5e94\u7684\u7684\u6307\u9488\u7c7b\uff0c\u5176\u4e2d\u5206\u4e3a\u4e24\u7c7b\uff1a</p>\n<ul>\n<li>typed pointer \u6307\u5411\u7684\u5185\u5b58\u5206\u914d\u4e86\u6570\u636e\u7c7b\u578b</li>\n<li>raw pointer \u6307\u5411\u7684\u5185\u5b58\u672a\u5206\u914d\u6570\u636e\u7c7b\u578b</li>\n</ul>\n<!-- more -->\n\n<table>\n<thead>\n<tr>\n<th>swift</th>\n<th>OC</th>\n<th>\u8bf4\u660e</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unsafePointer<T></td>\n<td>const T *</td>\n<td>\u6307\u9488\u53ca\u6240\u6307\u5411\u7684\u5185\u5bb9\u90fd\u4e0d\u53ef\u53d8</td>\n</tr>\n<tr>\n<td>unsafeMutablePointer</td>\n<td>T *</td>\n<td>\u6307\u9488\u53ca\u5176\u6240\u6307\u5411\u7684\u5185\u5b58\u5185\u5bb9\u5747\u53ef\u53d8</td>\n</tr>\n<tr>\n<td>unsafeRawPointer</td>\n<td>const void *</td>\n<td>\u6307\u9488\u6307\u5411\u672a\u77e5\u7c7b\u578b</td>\n</tr>\n<tr>\n<td>unsafeMutableRawPointer</td>\n<td>void *</td>\n<td>\u6307\u9488\u6307\u5411\u672a\u77e5\u7c7b\u578b</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"typed-pointer\">typed pointer</h3>\n<h4 id=\"unsafepointer-unsafemutablepointer\">unsafePointer<T> / UnsafeMutablePointer <T></h4>\n<p>unsafePointer<T> \u5bf9\u4e8e T \u53ef\u4ee5\u6307\u5b9a\u6307\u9488\u6307\u5411\u7684\u7c7b\u578b\uff0c\u6ca1\u6709\u76f4\u63a5\u7684\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u53ea\u80fd\u901a\u8fc7 withUnsafePointer \u8f6c\u6362\u83b7\u5f97\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">var</span> <span class=\"nv\">a</span> <span class=\"p\">=</span> <span class=\"mi\">7</span>\n<span class=\"kd\">let</span> <span class=\"nv\">pointer</span><span class=\"p\">:</span> <span class=\"nb\">UnsafePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"bp\">withUnsafePointer</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"p\">}</span>\n</code></pre></div>\n\n<p>\u5bf9\u4e8e UnsafeMutablePointer<T> \u9700\u8981\u6211\u4eec\u624b\u52a8\u8fdb\u884c\u5185\u5b58\u7684\u7533\u8bf7\u548c\u91ca\u653e\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u4e86\u521d\u59cb\u5316\u65b9\u6cd5\u548c\u91ca\u653e\u65b9\u6cd5\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// \u7533\u8bf7 1 \u4e2a Int \u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4</span>\n<span class=\"kd\">let</span> <span class=\"nv\">pointer</span> <span class=\"p\">=</span> <span class=\"nb\">UnsafeMutablePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// \u521d\u59cb\u5316\u5185\u5b58\uff0c\u521d\u59cb\u503c\u4e3a\uff1a7</span>\n<span class=\"n\">pointer</span><span class=\"p\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// \u521d\u59cb\u5316\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 pointee \u6765\u64cd\u4f5c\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9</span>\n<span class=\"n\">pointer</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"p\">=</span> <span class=\"mi\">8</span>\n\n<span class=\"c1\">// \u5f53\u8be5\u6307\u9488\u4e0d\u9700\u8981\u4f7f\u7528\u4e86\uff0c\u53ef\u4ee5\u7528 deinitialize \u9500\u6bc1\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61</span>\n<span class=\"n\">pointer</span><span class=\"p\">.</span><span class=\"n\">deinitialize</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// \u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u88ab\u6e05\u7a7a\u540e\uff0c\u9700\u8981 deallocate \u56de\u6536\u5185\u5b58\u7a7a\u95f4\uff0c\u56de\u6536 1 \u4e2a Int \u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4</span>\n<span class=\"n\">pointer</span><span class=\"p\">.</span><span class=\"n\">deallocate</span><span class=\"p\">(</span><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u5bf9\u4e8e Int \u8fd9\u6837\u5206\u914d\u5728\u5e38\u91cf\u6bb5\u4e0a\u7684\u5bf9\u8c61\uff0cdeinitialize \u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u50cf\u7c7b\u7684\u5bf9\u8c61\u6216\u8005\u7ed3\u6784\u4f53\u5b9e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u4e0d\u4fdd\u8bc1\u521d\u59cb\u5316\u548c\u6467\u6bc1\u914d\u5bf9\u7684\u8bdd\uff0c\u662f\u4f1a\u51fa\u73b0\u5185\u5b58\u6cc4\u9732\u7684\u3002\u6240\u4ee5\u6ca1\u6709\u7279\u6b8a\u8003\u8651\u7684\u8bdd\uff0c\u4e0d\u8bba\u5185\u5b58\u4e2d\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u4fdd\u8bc1 initialize: \u548c deinitialize \u914d\u5bf9\u4f1a\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002</p>\n<p>\u5bf9\u4e8e\u4e00\u4e2a UnsafePointer<T> \u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 pointee \u5c5e\u6027\u5bf9\u5176\u8fdb\u884c\u53d6\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u6307\u9488\u662f\u53ef\u53d8\u7684 UnsafeMutablePointer<T> \u7c7b\u578b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 pointee \u5bf9\u5b83\u8fdb\u884c\u8d4b\u503c\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">func</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">UnsafeMutablePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"p\">=</span> <span class=\"mi\">12</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nv\">a</span> <span class=\"p\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">update</span><span class=\"p\">(&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u8fd9\u91cc\u548c C \u7684\u6307\u9488\u4f7f\u7528\u7c7b\u4f3c\uff0c\u6211\u4eec\u901a\u8fc7\u5728\u53d8\u91cf\u540d\u524d\u9762\u52a0\u4e0a &amp; \u7b26\u53f7\u5c31\u53ef\u4ee5\u5c06\u6307\u5411\u8fd9\u4e2a\u53d8\u91cf\u7684\u6307\u9488\u4f20\u9012\u5230\u63a5\u53d7\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u7684\u65b9\u6cd5\u4e2d\u53bb\u3002\u4e0e\u8fd9\u79cd\u505a\u6cd5\u7c7b\u4f3c\u7684\u662f\u4f7f\u7528 Swift \u7684 inout \u5173\u952e\u5b57\u3002\u6211\u4eec\u5728\u5c06\u53d8\u91cf\u4f20\u5165 inout \u53c2\u6570\u7684\u51fd\u6570\u65f6\uff0c\u540c\u6837\u4e5f\u4f7f\u7528 &amp; \u7b26\u53f7\u8868\u793a\u5730\u5740\u3002\u4e0d\u8fc7\u533a\u522b\u662f\u5728\u51fd\u6570\u4f53\u5185\u90e8\u6211\u4eec\u4e0d\u9700\u8981\u5904\u7406\u6307\u9488\u7c7b\u578b\uff0c\u800c\u662f\u53ef\u4ee5\u5bf9\u53c2\u6570\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\u3002</p>\n<p>\u867d\u7136 &amp; \u5728\u53c2\u6570\u4f20\u9012\u65f6\u8868\u793a\u7684\u610f\u4e49\u548c C \u4e2d\u4e00\u6837\uff0c\u662f\u67d0\u4e2a\u201c\u53d8\u91cf\u7684\u5730\u5740\u201d\uff0c\u4f46\u662f\u5728 Swift \u4e2d\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u901a\u8fc7\u8fd9\u4e2a\u7b26\u53f7\u83b7\u53d6\u4e00\u4e2a UnsafePointer \u7684\u5b9e\u4f8b\u3002</p>\n<h4 id=\"unsafebufferpointer-unsafemutablebufferpointer\">UnsafeBufferPointer / UnsafeMutableBufferPointer</h4>\n<p>UnsafeBufferPointer \u548c UnsafeMutableBufferPointer \u7528\u6765\u8868\u8fbe\u50cf\u662f\u6570\u7ec4\u6216\u8005\u5b57\u5178\u8fd9\u6837\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5176\u5143\u7d20\u6307\u9488\u4e3a\u58f0\u660e\u7c7b\u578b\u6307\u9488\uff0c\u5e26 Mutable \u548c\u4e0d\u5e26 Mutable \u5b57\u6837\u7684\u533a\u522b\u9075\u5faa Cocoa \u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u539f\u5219\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">var</span> <span class=\"nv\">array</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"kd\">var</span> <span class=\"nv\">arrayPtr</span><span class=\"p\">:</span> <span class=\"nb\">UnsafeMutableBufferPointer</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"nb\">UnsafeMutableBufferPointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;(</span><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"bp\">count</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">.</span><span class=\"bp\">count</span><span class=\"p\">)</span>\n<span class=\"c1\">// baseAddress \u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\uff0c\u7c7b\u578b\u4e3a UnsafeMutablePointer&lt;Int&gt;</span>\n<span class=\"k\">if</span> <span class=\"kd\">let</span> <span class=\"nv\">basePtr</span> <span class=\"p\">=</span> <span class=\"n\">arrayPtr</span><span class=\"p\">?.</span><span class=\"n\">baseAddress</span> <span class=\"p\">{</span>\n    <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span>  <span class=\"c1\">// 1</span>\n    <span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"p\">=</span> <span class=\"mi\">10</span>\n    <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span> <span class=\"c1\">// 10</span>\n\n    <span class=\"c1\">//\u4e0b\u4e00\u4e2a\u5143\u7d20</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">nextPtr</span> <span class=\"p\">=</span> <span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">successor</span><span class=\"p\">()</span>\n    <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">nextPtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span> <span class=\"c1\">// 2</span>\n<span class=\"p\">}</span>\n<span class=\"n\">arrayPtr</span> <span class=\"p\">=</span> <span class=\"kc\">nil</span>\n</code></pre></div>\n\n<p>\u4e0d\u8fc7\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u6709\u8b66\u544a\uff0c\u63d0\u793a\u7ed3\u679c\u53ef\u80fd\u662f\u201c\u60ac\u7a7a\u6307\u9488\u201d\uff0c\u6307\u9488\u6240\u6307\u5185\u5b58\u88ab\u91ca\u653e\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u5c31\u88ab\u60ac\u7a7a\u4e86\u3002\u7531\u4e8e\u7f16\u8bd1\u5668\u65e0\u6cd5\u786e\u5b9a\u8be5\u6307\u9488\u60ac\u7a7a\u540e\u662f\u5426\u91ca\u653e\u4e86\uff0c\u6545\u6b64\u6709\u8be5\u63d0\u793a\u3002\u4e3a\u4e86\u6d88\u9664\u8be5\u63d0\u793a\uff0c\u53ef\u4ee5\u91c7\u7528 withUnsafeMutableBufferPointer \u8f6c\u6362\u65b9\u6cd5\uff1a</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">var</span> <span class=\"nv\">array</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">array</span><span class=\"p\">.</span><span class=\"n\">withUnsafeMutableBufferPointer</span> <span class=\"p\">{</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"kd\">let</span> <span class=\"nv\">basePtr</span> <span class=\"p\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">baseAddress</span> <span class=\"p\">{</span>\n        <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span>  <span class=\"c1\">// 1</span>\n        <span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"p\">=</span> <span class=\"mi\">10</span>\n        <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span> <span class=\"c1\">// 10</span>\n\n        <span class=\"c1\">//\u4e0b\u4e00\u4e2a\u5143\u7d20</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">nextPtr</span> <span class=\"p\">=</span> <span class=\"n\">basePtr</span><span class=\"p\">.</span><span class=\"n\">successor</span><span class=\"p\">()</span>\n        <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">nextPtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span> <span class=\"c1\">// 2</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<h3 id=\"raw-pointer\">raw pointer</h3>\n<h4 id=\"unsaferawpointer-unsafemutablerawpointer\">UnsafeRawPointer / UnsafeMutableRawPointer</h4>\n<p>raw pointer \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\uff0c\u4e0d\u6ce8\u660e\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u5bf9\u5185\u5b58\u7a7a\u95f4\u8fdb\u884c\u7ba1\u7406\uff0c\u901a\u8fc7 storeBytes \u5b58\u503c\uff0cload \u53d6\u503c\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">//\u5b9a\u4e49\u4e00\u4e2a\u672a\u77e5\u7c7b\u578b\u7684\u6307\u9488\uff1a\u672c\u8d28\u662f\u5206\u914d32\u5b57\u8282\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u6307\u5b9a\u5bf9\u9f50\u65b9\u5f0f\u662f8\u5b57\u8282\u5bf9\u9f50</span>\n<span class=\"kd\">let</span> <span class=\"nv\">p</span> <span class=\"p\">=</span> <span class=\"n\">UnsafeMutableRawPointer</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">byteCount</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\">//\u5b58\u503c</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mf\">0.</span><span class=\"p\">.&lt;</span><span class=\"mi\">4</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//\u6307\u5b9a\u5f53\u524d\u79fb\u52a8\u7684\u6b65\u6570 </span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">advanced</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">).</span><span class=\"n\">storeBytes</span><span class=\"p\">(</span><span class=\"n\">of</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">as</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//\u53d6\u503c</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"mf\">0.</span><span class=\"p\">.&lt;</span><span class=\"mi\">4</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//p\u662f\u5f53\u524d\u5185\u5b58\u7684\u9996\u5730\u5740\uff0c\u901a\u8fc7\u5185\u5b58\u5e73\u79fb\u6765\u83b7\u53d6\u503c</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">value</span> <span class=\"p\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fromByteOffset</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"k\">as</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n    <span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;index: </span><span class=\"si\">\\(</span><span class=\"n\">i</span><span class=\"si\">)</span><span class=\"s\">, value: </span><span class=\"si\">\\(</span><span class=\"n\">value</span><span class=\"si\">)</span><span class=\"s\">&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//\u4f7f\u7528\u5b8c\u9700\u8981\u624b\u52a8\u91ca\u653e</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">deallocate</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h4 id=\"unsaferawpointer-unsafemutablerawpointer_1\">UnsafeRawPointer / UnsafeMutableRawPointer</h4>\n<p>UnsafeRawPointer \u548c UnsafeMutableRawPointer \u7528\u6765\u8868\u8fbe\u50cf\u662f\u6570\u7ec4\u6216\u8005\u5b57\u5178\u8fd9\u6837\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5176\u5143\u7d20\u6307\u9488\u4e3a\u672a\u58f0\u660e\u7c7b\u578b\u6307\u9488\uff0c\u5e26 Mutable \u548c\u4e0d\u5e26 Mutable \u5b57\u6837\u7684\u533a\u522b\u9075\u5faa Cocoa \u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u539f\u5219\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">var</span> <span class=\"nv\">array</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"kd\">let</span> <span class=\"nv\">p</span> <span class=\"p\">=</span> <span class=\"n\">UnsafeMutableRawBufferPointer</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">byteCount</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">initializeMemory</span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">,</span> <span class=\"n\">from</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nv\">v</span> <span class=\"p\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">baseAddress</span><span class=\"p\">?.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">deallocate</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h3 id=\"_1\">\u6307\u9488\u8f6c\u6362</h3>\n<h4 id=\"withunsafepointer-withunsafemutablepointer\">withUnsafePointer / withUnsafeMutablePointer</h4>\n<p>\u5728 Swift \u4e2d\u4e0d\u80fd\u50cf C \u91cc\u90a3\u6837\u4f7f\u7528 &amp; \u7b26\u53f7\u76f4\u63a5\u83b7\u53d6\u5730\u5740\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u60f3\u5bf9\u67d0\u4e2a\u53d8\u91cf\u8fdb\u884c\u6307\u9488\u64cd\u4f5c\uff0c\u53ef\u4ee5\u501f\u52a9 withUnsafePointer / withUnsafeMutablePointer \u8f85\u52a9\u65b9\u6cd5\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f inout \u7684\u4efb\u610f\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u4e2a\u95ed\u5305\u3002Swift \u4f1a\u5c06\u7b2c\u4e00\u4e2a\u8f93\u5165\u8f6c\u6362\u4e3a\u6307\u9488\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u8f6c\u6362\u540e\u7684 Unsafe \u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\uff0c\u53bb\u8c03\u7528\u95ed\u5305\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// UnsafePointer</span>\n<span class=\"kd\">let</span> <span class=\"nv\">ptr</span> <span class=\"p\">=</span> <span class=\"bp\">withUnsafePointer</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// UnsafeMutablePointer</span>\n<span class=\"kd\">let</span> <span class=\"nv\">ptr</span> <span class=\"p\">=</span> <span class=\"bp\">withUnsafeMutablePointer</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<h4 id=\"unsafebitcast\">unsafeBitCast</h4>\n<p>unsafeBitCast \u662f\u975e\u5e38\u5371\u9669\u7684\u64cd\u4f5c\uff0c\u5b83\u4f1a\u5c06\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u5f3a\u5236\u6309\u4f4d\u8f6c\u6362\u4e3a\u76ee\u6807\u7684\u7c7b\u578b\u3002\u56e0\u4e3a\u8fd9\u79cd\u8f6c\u6362\u662f\u5728 Swift \u7684\u7c7b\u578b\u7ba1\u7406\u4e4b\u5916\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u65e0\u6cd5\u786e\u4fdd\u5f97\u5230\u7684\u7c7b\u578b\u662f\u5426\u786e\u5b9e\u6b63\u786e\uff0c\u4f60\u5fc5\u987b\u660e\u786e\u5730\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\uff0c\u5982\uff1a</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nv\">arr</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;moonlight&quot;</span><span class=\"p\">]</span>\n<span class=\"kd\">let</span> <span class=\"nv\">str</span> <span class=\"p\">=</span> <span class=\"bp\">unsafeBitCast</span><span class=\"p\">(</span><span class=\"n\">CFArrayGetValueAtIndex</span><span class=\"p\">(</span><span class=\"n\">arr</span> <span class=\"k\">as</span> <span class=\"n\">CFArray</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"n\">CFString</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>CFArrayGetValueAtIndex \u51fd\u6570\u7528\u4e8e\u5bf9 arr \u6307\u5b9a\u4e0b\u6807\u53d6\u503c\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u662f UnsafePointer<Void>\uff0c\u7531\u4e8e\u6211\u4eec\u5f88\u660e\u767d\u5176\u4e2d\u5b58\u653e\u7684\u662f String \u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5f3a\u5236\u8f6c\u6362\u4e3a CFString\uff0c\u4f46\u82e5\u7c7b\u578b\u4e0d\u4e00\u81f4\u5219\u4f1a\u5bfc\u81f4\u8f6c\u6362\u5931\u8d25\uff0c\u4f1a\u5d29\u6e83\u3002</p>\n<p>unsafeBitCast \u5e38\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u4f7f\u7528\u5982\u4e0b\uff1a</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">var</span> <span class=\"nv\">count</span> <span class=\"p\">=</span> <span class=\"mi\">100</span>\n<span class=\"kd\">let</span> <span class=\"nv\">voidPtr</span> <span class=\"p\">=</span> <span class=\"bp\">withUnsafePointer</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"p\">&amp;</span><span class=\"bp\">count</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">UnsafePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">UnsafePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Void</span><span class=\"p\">&gt;</span> <span class=\"k\">in</span>\n    <span class=\"k\">return</span> <span class=\"bp\">unsafeBitCast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">UnsafePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Void</span><span class=\"p\">&gt;.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n<span class=\"c1\">// voidPtr \u662f UnsafePointer&lt;Void&gt;\u3002\u76f8\u5f53\u4e8e C \u4e2d\u7684 void *</span>\n\n<span class=\"c1\">// \u8f6c\u6362\u56de UnsafePointer&lt;Int&gt;</span>\n<span class=\"kd\">let</span> <span class=\"nv\">intPtr</span> <span class=\"p\">=</span> <span class=\"bp\">unsafeBitCast</span><span class=\"p\">(</span><span class=\"n\">voidPtr</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">UnsafePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"n\">intPtr</span><span class=\"p\">.</span><span class=\"n\">pointee</span> <span class=\"c1\">//100</span>\n</code></pre></div>\n\n<h4 id=\"bindmemory\">bindMemory</h4>\n<p>bindMemory(to: T, capacity: Int) \u5c06\u5185\u5b58\u5730\u5740\u7ed1\u5b9a\u6210\u6307\u5b9a\u7c7b\u578b\u5206\u5e03\uff0c\u65b0\u7ed1\u5b9a\u7c7b\u578b\u5fc5\u987b\u4e0e\u65e7\u7ed1\u5b9a\u7c7b\u578b\u5e03\u5c40\u517c\u5bb9\uff0c\u6b64\u51fd\u6570\u53ea\u7ed1\u5b9a\u5185\u5b58\u4e3a\u6307\u5b9a\u7c7b\u578b\u5206\u5e03\uff0c\u5e76\u4e0d\u6267\u884c\u5206\u914d\u6216\u521d\u59cb\u5316\u5185\u5b58\u7a7a\u95f4\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nv\">p</span> <span class=\"p\">=</span> <span class=\"n\">UnsafeMutableRawPointer</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">byteCount</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nv\">p2</span><span class=\"p\">:</span> <span class=\"nb\">UnsafeMutablePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">bindMemory</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h4 id=\"assumingmemorybound\">assumingMemoryBound</h4>\n<p>assumingMemoryBound \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7684\u5185\u5b58\u533a\u57df\u5df2\u7ed1\u5b9a\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\uff0c</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nv\">p</span> <span class=\"p\">=</span> <span class=\"n\">UnsafeMutableRawPointer</span><span class=\"p\">.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">byteCount</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nv\">p2</span><span class=\"p\">:</span> <span class=\"nb\">UnsafeMutablePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">assumingMemoryBound</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">Int</span><span class=\"p\">.</span><span class=\"kc\">self</span><span class=\"p\">)</span>\n<span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<h3 id=\"_2\">\u6307\u9488\u8bbf\u95ee</h3>\n<h4 id=\"memorylayout\">MemoryLayout</h4>\n<p>MemoryLayout \u53ef\u4ee5\u8ba1\u7b97\u7c7b\u578b\u7684\u5927\u5c0f(size)\u3001\u5185\u5b58\u5bf9\u9f50\u5927\u5c0f(alignment)\u4ee5\u53ca\u5b9e\u9645\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f(stride)\uff0c\u5176\u7ec6\u8282\u5982\u4e0b\uff1a</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"nc\">MemoryLayout</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">var</span> <span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"nb\">Int</span> <span class=\"p\">{</span> <span class=\"kr\">get</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">var</span> <span class=\"nv\">stride</span><span class=\"p\">:</span> <span class=\"nb\">Int</span> <span class=\"p\">{</span> <span class=\"kr\">get</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">var</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"nb\">Int</span> <span class=\"p\">{</span> <span class=\"kr\">get</span> <span class=\"p\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"n\">ofValue</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Int</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"n\">ofValue</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Int</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">alignment</span><span class=\"p\">(</span><span class=\"n\">ofValue</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nb\">Int</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">MemoryLayout</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"n\">size</span> <span class=\"c1\">// return 8 (on 64-bit)</span>\n<span class=\"n\">MemoryLayout</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"n\">alignment</span> <span class=\"c1\">// return 8 (on 64-bit)</span>\n<span class=\"n\">MemoryLayout</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"bp\">stride</span> <span class=\"c1\">// return 8 (on 64-bit)</span>\n</code></pre></div>\n\n<p>\u4e00\u822c\u5728\u79fb\u52a8\u6307\u9488\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u7279\u5b9a\u7c7b\u578b\uff0c\u6307\u9488\u4e00\u6b21\u79fb\u52a8\u4e00\u4e2astride\uff08\u6b65\u957f\uff09,\u4e00\u822c\u60c5\u51b5\u4e0bstride\u662falignment\u7684\u6574\u6570\u500d\uff0c\u5373\u7b26\u5408\u5185\u5b58\u5bf9\u9f50\u539f\u5219\uff1b\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\u4e5f\u662falignment\u7684\u6574\u6570\u500d\uff0c\u4f46\u662f\u5b9e\u9645\u5b9e\u4f8b\u5927\u5c0f\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\u3002</p>\n<h4 id=\"_3\">\u8bbf\u95ee\u5185\u5b58\u7a7a\u95f4</h4>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span> <span class=\"nv\">ptr</span> <span class=\"p\">=</span> <span class=\"nb\">UnsafeMutablePointer</span><span class=\"p\">&lt;</span><span class=\"nb\">Int</span><span class=\"p\">&gt;.</span><span class=\"n\">allocate</span><span class=\"p\">(</span><span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\">// \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u7a7a\u95f4</span>\n<span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u4e0a\u9762\u5b9a\u4e49\u4e86 \u4e24\u4e2a Int \u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u5982\u4f55\u8bbf\u95ee\u7b2c\u4e8c\u4e2a\u7a7a\u95f4\u5e76\u521d\u59cb\u5316\u5462\uff1f\u5bf9\u4e8e \u53ef\u6307\u5b9a\u7c7b\u578b\u7684 UnsafeMutablePointer \u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u6216\u8005\u5185\u5b58\u5e73\u79fb\u3002</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"mi\">8</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">pointee</span> <span class=\"p\">=</span> <span class=\"mi\">8</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">((</span><span class=\"n\">ptr</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u4e5f\u53ef\u4f7f\u7528 successor() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u8fde\u7eed\u5b9e\u4f8b\u7684\u6307\u9488\uff0c\u7c7b\u4f3c\u4e8e ptr + 1</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// \u521d\u59cb\u5316\u7b2c2\u4e2a\u7a7a\u95f4</span>\n<span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">successor</span><span class=\"p\">().</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">successor</span><span class=\"p\">().</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u8fd8\u53ef\u4ee5\u901a\u8fc7 advanced(by: MemoryLayout) \u6307\u5b9a\u6b65\u957f\u79fb\u52a8</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">advanced</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n<span class=\"bp\">print</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">advanced</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">pointee</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>\u4e3a\u4f55\u8fd9\u91cc\u662f advanced(by: 1) \u800c\u4e0d\u662f advanced(by: MemoryLayout<Int>.stride) \uff0c\u662f\u56e0\u4e3a ptr \u662f\u6307\u5b9a\u7c7b\u578b\u7684 UnsafeMutablePointer\uff0c\u4f20 1 \u4ee3\u8868 1 \u4e2a Int \u7c7b\u578b\u6b65\u957f\u3002</p>"}