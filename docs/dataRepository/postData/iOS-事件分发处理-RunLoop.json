{"title": "iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop", "date": "2022-03-08 17:31:02", "categories": "iOS", "tags": "RunLoop", "keywords": "RunLoop,\u4e8b\u4ef6\u5206\u53d1", "description": "", "images": "", "file_name": "iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop", "short": " \u4e00\u3001\u521d\u8bc6 RunLoop \n 1.1  \u7ebf\u7a0b \n iOS\u5f00\u53d1\u662f\u5355\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90\u3002\u8fdb\u7a0b\u82e5\u9700\u5904\u7406\u4e8b\u4ef6\uff0c\u5219\u9700\u8981\u57fa\u672c\u6267\u884c\u5355\u5143\uff1a\u7ebf\u7a0b\u3002\u8fdb\u7a0b\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u5fc5\u987b\u5728\u7ebf\u7a0b\u4e2d\u5904\u7406\uff0c\u56e0\u6b64\u8fdb\u7a0b\u5728\u5f00\u8f9f\u65f6\uff0c\u4f1a\u9ed8\u8ba4\u521b\u5efa\u5e76\u5f00\u542f\u4e00\u6761\u7ebf\u7a0b\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u7684\u4e8b\u4ef6\u5904\u7406\u548c UI \u7ed8\u5236\u90fd\u5728\u8fd9\u6761\u7ebf\u7a0b\u5904\u7406\uff0c\u56e0\u6b64\u8fd9\u6761\u7ebf\u7a0b\u88ab\u79f0\u4e3a\u4e3b\u7ebf\u7a0b\u6216\u8005UI\u7ebf\u7a0b\u3002 \n ", "content": "<h3 id=\"runloop\">\u4e00\u3001\u521d\u8bc6 RunLoop</h3>\n<h4 id=\"11\">1.1  \u7ebf\u7a0b</h4>\n<p>iOS\u5f00\u53d1\u662f\u5355\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90\u3002\u8fdb\u7a0b\u82e5\u9700\u5904\u7406\u4e8b\u4ef6\uff0c\u5219\u9700\u8981\u57fa\u672c\u6267\u884c\u5355\u5143\uff1a\u7ebf\u7a0b\u3002\u8fdb\u7a0b\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u5fc5\u987b\u5728\u7ebf\u7a0b\u4e2d\u5904\u7406\uff0c\u56e0\u6b64\u8fdb\u7a0b\u5728\u5f00\u8f9f\u65f6\uff0c\u4f1a\u9ed8\u8ba4\u521b\u5efa\u5e76\u5f00\u542f\u4e00\u6761\u7ebf\u7a0b\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u7684\u4e8b\u4ef6\u5904\u7406\u548c UI \u7ed8\u5236\u90fd\u5728\u8fd9\u6761\u7ebf\u7a0b\u5904\u7406\uff0c\u56e0\u6b64\u8fd9\u6761\u7ebf\u7a0b\u88ab\u79f0\u4e3a\u4e3b\u7ebf\u7a0b\u6216\u8005UI\u7ebf\u7a0b\u3002</p>\n<!-- more -->\n<p><img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-01.png\" /></p>\n<h4 id=\"12\">1.2  \u7ebf\u7a0b\u5982\u4f55\u5e38\u9a7b\u5904\u7406\u4e8b\u4ef6</h4>\n<p>\u4e00\u822c\u6765\u8bb2\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6267\u884c\u5b8c\u6210\u540e\u7ebf\u7a0b\u5c31\u4f1a\u9000\u51fa\u3002\u4e3b\u7ebf\u7a0b\u662f\u7a0b\u5e8f\u662f\u91cd\u8981\u7684\u4e8b\u4ef6\u5904\u7406\u5355\u5143\uff0c\u81ea\u7136\u4e0d\u80fd\u6267\u884c\u5b8c\u4efb\u52a1\u540e\u5c31\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u673a\u5236\uff0c\u8ba9\u7ebf\u7a0b\u80fd\u968f\u65f6\u5904\u7406\u4e8b\u4ef6\u4f46\u5e76\u4e0d\u9000\u51fa\uff0c\u901a\u5e38\u7684\u4ee3\u7801\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">func loop() {\n    do {\n        var message = get_next_message();\n        process_message(message);\n    } while (message != quit);\n}\n</code></pre>\n\n<p>\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u901a\u5e38\u88ab\u79f0\u4e3a Event Loop\uff0c\u4f7f\u7528 while \u8bed\u53e5\u521b\u5efa\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u8ba9 CPU \u8fdb\u5165\u5fd9\u7b49\u5f85\uff0c\u5f53\u7a0b\u5e8f\u4e00\u63a5\u6536\u4e8b\u4ef6\u4fbf\u80fd\u7acb\u5373\u5904\u7406\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u6781\u5176\u6d88\u8017 CPU \u8d44\u6e90\u3002</p>\n<p>Event Loop \u5728\u5f88\u591a\u7cfb\u7edf\u548c\u6846\u67b6\u91cc\u90fd\u6709\u5b9e\u73b0\uff0c\u6bd4\u5982 Node.js \u7684\u4e8b\u4ef6\u5904\u7406\uff0c\u6bd4\u5982 Windows \u7a0b\u5e8f\u7684\u6d88\u606f\u5faa\u73af\uff0c\u518d\u6bd4\u5982 OSX/iOS \u91cc\u7684 RunLoop\u3002\u5b83\u4eec\u4e0d\u662f\u901a\u8fc7\u201c\u6b7b\u5faa\u73af\u201d\u8fd9\u79cd\u201c\u5fd9\u7b49\u5f85\u201d\u65b9\u5f0f\u8ba9\u7ebf\u7a0b\u5e38\u9a7b\u5904\u7406\u4e8b\u4ef6\uff0c\u800c\u662f\u91c7\u7528\u201c\u95f2\u7b49\u5f85\u201d\u65b9\u5f0f\u3002\u5f53\u6ca1\u6709\u6709\u4e8b\u4ef6\u9700\u8981\u5904\u7406\u65f6\uff0c\u7ebf\u7a0b\u4f1a\u4f11\u7720\u4ee5\u907f\u514d\u8d44\u6e90\u5360\u7528\uff0c\u5728\u6709\u6d88\u606f\u5230\u6765\u65f6\u7acb\u523b\u88ab\u5524\u9192\u3002</p>\n<h4 id=\"13-runloop\">1.3  RunLoop</h4>\n<p>RunLoop \u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u662f\u4e8b\u4ef6\u63a5\u6536\u548c\u5206\u53d1\u673a\u5236\u7684\u4e00\u4e2a\u5b9e\u73b0\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u7684\u7ed3\u6784\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">struct __CFRunLoop {\n    __CFPort _wakeUpPort;   /// used for CFRunLoopWakeUp \u5185\u6838\u5411\u8be5\u7aef\u53e3\u53d1\u9001\u6d88\u606f\u53ef\u4ee5\u5524\u9192runloop\n    pthread_t _pthread;             /// RunLoop\u5bf9\u5e94\u7684\u7ebf\u7a0b\n    CFMutableSetRef _commonModes;    /// \u5b58\u50a8\u7684\u662f\u5b57\u7b26\u4e32\uff0c\u8bb0\u5f55\u6240\u6709\u6807\u8bb0\u4e3acommon\u7684mode\n    CFMutableSetRef _commonModeItems; /// \u5b58\u50a8\u6240\u6709commonMode\u7684item(source\u3001timer\u3001observer)\n    CFRunLoopModeRef _currentMode;   /// \u5f53\u524d\u8fd0\u884c\u7684mode\n    CFMutableSetRef _modes;          /// \u5b58\u50a8\u7684\u662fCFRunLoopModeRef\n    ......\n</code></pre>\n\n<p>\u53ef\u89c1\uff0c\u4e00\u4e2a RunLoop \u5bf9\u8c61\uff0c\u4e3b\u8981\u5305\u542b\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u82e5\u5e72\u4e2aMode\uff0c\u82e5\u5e72\u4e2acommonMode\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f53\u524d\u8fd0\u884c\u7684Mode\u3002\u8fd9\u4e2a\u5bf9\u8c61\u7ba1\u7406\u4e86\u5176\u9700\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u548c\u6d88\u606f\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\u6765\u6267\u884c Event Loop \u7684\u903b\u8f91\u3002\u7ebf\u7a0b\u6267\u884c\u4e86\u8fd9\u4e2a\u51fd\u6570\u540e\uff0c\u5c31\u4f1a\u4e00\u76f4\u5904\u4e8e\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8 \u201c\u63a5\u53d7\u6d88\u606f-&gt;\u7b49\u5f85-&gt;\u5206\u53d1\u5904\u7406\u201d \u7684\u5faa\u73af\u4e2d\uff0c\u76f4\u5230\u8fd9\u4e2a\u5faa\u73af\u7ed3\u675f\uff08\u6bd4\u5982\u4f20\u5165 quit \u7684\u6d88\u606f\uff09\uff0c\u51fd\u6570\u8fd4\u56de\u3002</p>\n<p>OSX/iOS \u7cfb\u7edf\u4e2d\uff0c\u63d0\u4f9b\u4e86\u4e24\u4e2a\u8fd9\u6837\u7684\u5bf9\u8c61\uff1aNSRunLoop \u548c CFRunLoopRef\u3002</p>\n<p>CFRunLoopRef \u662f\u5728 CoreFoundation \u6846\u67b6\u5185\u7684\uff0c\u5b83\u63d0\u4f9b\u4e86\u7eaf C \u51fd\u6570\u7684 API\uff0c\u6240\u6709\u8fd9\u4e9b API \u90fd\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</p>\n<p>NSRunLoop \u662f\u57fa\u4e8e CFRunLoopRef \u7684\u5c01\u88c5\uff0c\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u7684 API\uff0c\u4f46\u662f\u8fd9\u4e9b API \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</p>\n<p>CFRunLoopRef \u7684\u4ee3\u7801\u662f\u5f00\u6e90\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc http://opensource.apple.com/tarballs/CF/ \u4e0b\u8f7d\u5230\u6574\u4e2a CoreFoundation \u7684\u6e90\u7801\u6765\u67e5\u770b\uff0cSwift \u5f00\u6e90\u540e\uff0c\u82f9\u679c\u53c8\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684 CoreFoundation \u7248\u672c\uff1ahttps://github.com/apple/swift-corelibs-foundation/\uff0c\u8fd9\u4e2a\u7248\u672c\u7684\u6e90\u7801\u53ef\u80fd\u548c\u73b0\u6709 iOS \u7cfb\u7edf\u4e2d\u7684\u5b9e\u73b0\u7565\u4e0d\u4e00\u6837\uff0c\u4f46\u66f4\u5bb9\u6613\u7f16\u8bd1\uff0c\u800c\u4e14\u5df2\u7ecf\u9002\u914d\u4e86 Linux/Windows\u3002</p>\n<h4 id=\"14-runloop\">1.4 RunLoop \u4e0e \u7ebf\u7a0b\u7684\u5173\u7cfb</h4>\n<p>\u5728Runloop\u7684 \u5b98\u65b9\u6587\u6863 \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Runloop \u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\u6a21\u578b\uff0c\u7ebf\u7a0b\u5728\u6267\u884c\u5b8c\u4efb\u52a1\u540e\u4f1a\u8fdb\u884c\u4f11\u7720\uff0c\u6709\u65b0\u7684\u4efb\u52a1\u9700\u8981\u6267\u884c\u65f6\u5c31\u4f1a\u88ab\u5524\u9192\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p>\n<p><img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-02.png\" /></p>\n<p>\u7ebf\u7a0b\u63d0\u4f9b\u4e8b\u4ef6\u5904\u7406\u7684\u80fd\u529b\uff0cRunLoop \u63d0\u4f9b\u7ebf\u7a0b\u6301\u7eed\u5904\u7406\u4e8b\u4ef6\u7684\u80fd\u529b\u3002RunLoop \u5728\u63a5\u6536\u5230 Input sources\u3001Timer sources \u540e\uff0c\u6839\u636e sources \u7c7b\u578b\u8f6c\u5316\u76f8\u5bf9\u5e94\u7684\u4e8b\u4ef6\u4ea4\u4e8e\u7ebf\u7a0b\u5904\u7406\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0cRunLoop \u4f53\u73b0\u4e86\u5b83\u63a5\u6536\u4e8b\u4ef6\u548c\u5206\u53d1\u4e8b\u4ef6\u7684\u80fd\u529b\u3002</p>\n<p>\u5728 RunLoop \u7ed3\u6784\u4e2d\u6709\u5b9a\u4e49\u5b83\u76f8\u5bf9\u5e94\u7ebf\u7a0b\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf pthread \uff0c\u53ef\u4ee5\u770b\u51fa RunLoop \u662f\u57fa\u4e8e pthread \u6765\u7ba1\u7406\u7684\u3002iOS \u5f00\u53d1\u4e2d\u80fd\u9047\u5230\u4e24\u4e2a\u7ebf\u7a0b\u5bf9\u8c61: pthread_t \u548c NSThread\u3002\u8fc7\u53bb\u82f9\u679c\u6709\u4efd\u6587\u6863\u6807\u660e\u4e86 NSThread \u53ea\u662f pthread_t \u7684\u5c01\u88c5\uff0c\u4f46\u90a3\u4efd\u6587\u6863\u5df2\u7ecf\u5931\u6548\u4e86\uff0c\u73b0\u5728\u5b83\u4eec\u4e5f\u6709\u53ef\u80fd\u90fd\u662f\u76f4\u63a5\u5305\u88c5\u81ea\u6700\u5e95\u5c42\u7684 mach thread\u3002</p>\n<p>\u82f9\u679c\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u76f8\u4e92\u8f6c\u6362\u7684\u63a5\u53e3\uff0c\u4f46\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u53ef\u4ee5\u80af\u5b9a\u7684\u662f pthread_t \u548c NSThread \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 pthread_main_thread_np() \u6216 [NSThread mainThread] \u6765\u83b7\u53d6\u4e3b\u7ebf\u7a0b\uff1b\u4e5f\u53ef\u4ee5\u901a\u8fc7 pthread_self() \u6216 [NSThread currentThread] \u6765\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u3002</p>\n<p>\u82f9\u679c\u4e0d\u5141\u8bb8\u76f4\u63a5\u521b\u5efa RunLoop\uff0c\u5b83\u53ea\u63d0\u4f9b\u4e86\u4e24\u4e2a\u81ea\u52a8\u83b7\u53d6\u7684\u51fd\u6570\uff1aCFRunLoopGetMain() \u548c CFRunLoopGetCurrent()\u3002 \u8fd9\u4e24\u4e2a\u51fd\u6570\u5185\u90e8\u7684\u903b\u8f91\u5927\u6982\u662f\u4e0b\u9762\u8fd9\u6837:</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">CFRunLoopRef CFRunLoopGetMain() {\n    return _CFRunLoopGet(pthread_main_thread_np());\n}\n\nCFRunLoopRef CFRunLoopGetCurrent() {\n    return _CFRunLoopGet(pthread_self());\n}\n\n/// \u83b7\u53d6\u4e00\u4e2a pthread \u5bf9\u5e94\u7684 RunLoop\u3002\nCFRunLoopRef _CFRunLoopGet(pthread_t thread) {\n     /// \u8bbf\u95ee loopsDic \u65f6\u7684\u9501\n    OSSpinLockLock(&amp;loopsLock);\n    if (!loopsDic) {\n        // \u7b2c\u4e00\u6b21\u8fdb\u5165\u65f6\uff0c\u521d\u59cb\u5316\u5168\u5c40\u5b57\u5178\uff0ckey \u662f pthread_t\uff0c value \u662f CFRunLoopRef\uff0c\u5e76\u5148\u4e3a\u4e3b\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a RunLoop\u3002\n        loopsDic = CFDictionaryCreateMutable();\n        CFRunLoopRef mainLoop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);\n    }\n\n    /// \u76f4\u63a5\u4ece Dictionary \u91cc\u83b7\u53d6\u3002\n    CFRunLoopRef loop = CFDictionaryGetValue(loopsDic, thread));\n    if (!loop) {\n        /// \u53d6\u4e0d\u5230\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\n        loop = _CFRunLoopCreate();\n        CFDictionarySetValue(loopsDic, thread, loop);\n        /// \u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\uff0c\u5f53\u7ebf\u7a0b\u9500\u6bc1\u65f6\uff0c\u987a\u4fbf\u4e5f\u9500\u6bc1\u5176\u5bf9\u5e94\u7684 RunLoop\u3002\n        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);\n    }\n\n    OSSpinLockUnLock(&amp;loopsLock);\n    return loop;\n}\n</code></pre>\n\n<p>\u83b7\u53d6 CFRunLoopRef \u7684\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355</p>\n<p>1\u3001\u9996\u5148\u5224\u65ad\u5168\u5c40RunLoop\u548c\u7ebf\u7a0b\u7684\u6620\u5c04\u5b57\u5178\u6709\u6ca1\u6709\u521b\u5efa\uff0c\u6ca1\u6709\u7684\u8bdd\u4fbf\u4e3a\u4e3b\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a RunLoop \u5e76\u521d\u59cb\u5316\u5168\u5c40\u5b57\u5178\u3002</p>\n<p>2\u3001\u5168\u5c40\u5b57\u5178\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u76f4\u63a5\u8bbf\u95ee\u5b57\u5178\u53d6\u51fa\u5df2\u521b\u5efa\u7684 RunLoop \u5bf9\u8c61\u3002\u82e5\u5728\u5b57\u5178\u4e2d\u6ca1\u6709\u8bfb\u53d6\u5230RunLoop \u5bf9\u8c61\uff0c\u4fbf\u521b\u5efa\u4e00\u4e2a RunLoop \u5bf9\u8c61\uff0c\u5c06\u6620\u5c04\u5173\u7cfb\u6dfb\u52a0\u5230\u5168\u5c40\u5b57\u5178\u4e2d\u3002</p>\n<p>3\u3001\u8c03\u7528 _CFSetTSD \u51fd\u6570\u6ce8\u518c\u9500\u6bc1\u76d1\u542c\u56de\u8c03\uff0c\u7528\u4e8e\u7ebf\u7a0b\u9500\u6bc1\u65f6\uff0c\u540c\u65f6\u9500\u6bc1\u5173\u8054\u7684 RunLoop\u5bf9\u8c61\u3002</p>\n<p>\u603b\u7ed3\uff1a</p>\n<ul>\n<li>RunLoop\u548c\u7ebf\u7a0b\u7684\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u5bf9\u5e94\u7684\u65b9\u5f0f\u662f\u4ee5key-value\u7684\u65b9\u5f0f\u4fdd\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u5b57\u5178\u4e2d</li>\n<li>\u4e3b\u7ebf\u7a0b\u7684RunLoop\u4f1a\u5728\u521d\u59cb\u5316\u5168\u5c40\u5b57\u5178\u65f6\u521b\u5efa</li>\n<li>\u5b50\u7ebf\u7a0b\u7684RunLoop\u4f1a\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u7684\u65f6\u5019\u521b\u5efa\uff0c\u5982\u679c\u4e0d\u83b7\u53d6\u7684\u8bdd\u5c31\u4e00\u76f4\u4e0d\u4f1a\u88ab\u521b\u5efa</li>\n<li>RunLoop\u4f1a\u5728\u7ebf\u7a0b\u9500\u6bc1\u65f6\u9500\u6bc1</li>\n</ul>\n<h3 id=\"runloop_1\">\u4e8c\u3001RunLoop\u7684\u8fd0\u884c</h3>\n<h4 id=\"21-runloop\">2.1 RunLoop \u76f8\u5173\u4f5c\u7528\u7c7b</h4>\n<p>\u5728 CoreFoundation \u91cc\u9762\u5173\u4e8e RunLoop \u67095\u4e2a\u7c7b:</p>\n<ul>\n<li>CFRunLoopRef</li>\n<li>CFRunLoopModeRef</li>\n<li>CFRunLoopSourceRef</li>\n<li>CFRunLoopTimerRef</li>\n<li>CFRunLoopObserverRef</li>\n</ul>\n<p>CFRunLoopModeRef \u7c7b\u6ca1\u6709\u5bf9\u5916\u66b4\u9732\uff0c\u53ea\u662f\u901a\u8fc7 CFRunLoopRef \u7684\u63a5\u53e3\u8fdb\u884c\u4e86\u5c01\u88c5\u3002\u4ed6\u4eec\u7684\u5173\u7cfb\u5982\u4e0b:<br />\n<img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-03.png\" /></p>\n<p>\u4e00\u4e2a RunLoop \u5305\u542b\u82e5\u5e72\u4e2a Mode\uff0c\u6bcf\u4e2a Mode \u53c8\u5305\u542b\u82e5\u5e72\u4e2a Source/Timer/Observer\u3002\u6bcf\u6b21\u8c03\u7528 RunLoop \u7684\u4e3b\u51fd\u6570\u65f6\uff0c\u53ea\u80fd\u6307\u5b9a\u5176\u4e2d\u4e00\u4e2a Mode\uff0c\u8fd9\u4e2aMode\u88ab\u79f0\u4f5c CurrentMode\u3002\u5982\u679c\u9700\u8981\u5207\u6362 Mode\uff0c\u53ea\u80fd\u9000\u51fa Loop\uff0c\u518d\u91cd\u65b0\u6307\u5b9a\u4e00\u4e2a Mode \u8fdb\u5165\u3002\u8fd9\u6837\u505a\u4e3b\u8981\u662f\u4e3a\u4e86\u5206\u9694\u5f00\u4e0d\u540c\u7ec4\u7684 Source/Timer/Observer\uff0c\u8ba9\u5176\u4e92\u4e0d\u5f71\u54cd\u3002</p>\n<p>Source/Timer/Observer \u7edf\u79f0\u4e3a Mode item\uff0c\u4e00\u4e2a item \u53ef\u4ee5\u88ab\u540c\u65f6\u52a0\u5165\u591a\u4e2a Mode\u3002\u4f46\u4e00\u4e2a item \u88ab\u91cd\u590d\u52a0\u5165\u540c\u4e00\u4e2a mode \u65f6\u662f\u4e0d\u4f1a\u6709\u6548\u679c\u7684\u3002\u5982\u679c\u4e00\u4e2a mode \u4e2d\u4e00\u4e2a item \u90fd\u6ca1\u6709\uff0c\u5219 RunLoop \u4f1a\u76f4\u63a5\u9000\u51fa\uff0c\u4e0d\u8fdb\u5165\u5faa\u73af\u3002</p>\n<h4 id=\"22-cfrunloopsourceref\">2.2 CFRunLoopSourceRef</h4>\n<p>CFRunLoopSourceRef \u662f\u4e8b\u4ef6\u4ea7\u751f\u7684\u5730\u65b9\uff0cSource\u6709\u4e24\u4e2a\u7248\u672c\uff1aSource0 \u548c Source1\u3002</p>\n<ul>\n<li>Source0 \u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u56de\u8c03\uff08\u51fd\u6570\u6307\u9488\uff09\uff0c\u5b83\u5e76\u4e0d\u80fd\u4e3b\u52a8\u89e6\u53d1\u4e8b\u4ef6\u3002\u4f7f\u7528\u65f6\uff0c\u4f60\u9700\u8981\u5148\u8c03\u7528 CFRunLoopSourceSignal(source)\uff0c\u5c06\u8fd9\u4e2a Source \u6807\u8bb0\u4e3a\u5f85\u5904\u7406\uff0c\u7136\u540e\u624b\u52a8\u8c03\u7528 CFRunLoopWakeUp(runloop) \u6765\u5524\u9192 RunLoop\uff0c\u8ba9\u5176\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6\u3002</li>\n<li>Source1 \u5305\u542b\u4e86\u4e00\u4e2a mach_port \u548c\u4e00\u4e2a\u56de\u8c03\uff08\u51fd\u6570\u6307\u9488\uff09\uff0c\u88ab\u7528\u4e8e\u901a\u8fc7\u5185\u6838\u548c\u5176\u4ed6\u7ebf\u7a0b\u76f8\u4e92\u53d1\u9001\u6d88\u606f\uff0c\u8fd9\u79cd Source \u80fd\u4e3b\u52a8\u5524\u9192 RunLoop \u7684\u7ebf\u7a0b\u3002</li>\n</ul>\n<h4 id=\"23-cfrunlooptimerref\">2.3 CFRunLoopTimerRef</h4>\n<p>CFRunLoopTimerRef \u662f\u57fa\u4e8e\u65f6\u95f4\u7684\u89e6\u53d1\u5668\uff0c\u5b83\u548c NSTimer \u662f toll-free bridged \u7684\uff0c\u53ef\u4ee5\u6df7\u7528\u3002\u5176\u5305\u542b\u4e00\u4e2a\u65f6\u95f4\u957f\u5ea6\u548c\u4e00\u4e2a\u56de\u8c03\uff08\u51fd\u6570\u6307\u9488\uff09\u3002\u5f53\u5176\u52a0\u5165\u5230 RunLoop \u65f6\uff0cRunLoop\u4f1a\u6ce8\u518c\u5bf9\u5e94\u7684\u65f6\u95f4\u70b9\uff0c\u5f53\u65f6\u95f4\u70b9\u5230\u65f6\uff0cRunLoop\u4f1a\u88ab\u5524\u9192\u4ee5\u6267\u884c\u90a3\u4e2a\u56de\u8c03\u3002</p>\n<h4 id=\"24-cfrunloopobserverref\">2.4 CFRunLoopObserverRef</h4>\n<p>CFRunLoopObserverRef \u662f\u89c2\u5bdf\u8005\uff0c\u6bcf\u4e2a Observer \u90fd\u5305\u542b\u4e86\u4e00\u4e2a\u56de\u8c03\uff08\u51fd\u6570\u6307\u9488\uff09\uff0c\u5f53 RunLoop \u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u89c2\u5bdf\u8005\u5c31\u80fd\u901a\u8fc7\u56de\u8c03\u63a5\u53d7\u5230\u8fd9\u4e2a\u53d8\u5316\u3002\u53ef\u4ee5\u89c2\u6d4b\u7684\u65f6\u95f4\u70b9\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {\n    kCFRunLoopEntry         = (1UL &lt;&lt; 0), // \u5373\u5c06\u8fdb\u5165Loop\n    kCFRunLoopBeforeTimers  = (1UL &lt;&lt; 1), // \u5373\u5c06\u5904\u7406 Timer\n    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2), // \u5373\u5c06\u5904\u7406 Source\n    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5), // \u5373\u5c06\u8fdb\u5165\u4f11\u7720\n    kCFRunLoopAfterWaiting  = (1UL &lt;&lt; 6), // \u521a\u4ece\u4f11\u7720\u4e2d\u5524\u9192\n    kCFRunLoopExit          = (1UL &lt;&lt; 7), // \u5373\u5c06\u9000\u51faLoop\n};\n</code></pre>\n\n<h4 id=\"25-runloop-mode\">2.5 RunLoop Mode</h4>\n<p>\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5904\u7406\u57fa\u4e8e\u65f6\u95f4\u7684\u3001\u7cfb\u7edf\u7684\u3001\u7528\u6237\u7684\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u6709\u7740\u4e0d\u540c\u7684\u4f18\u5148\u7ea7\uff0c\u4e3a\u4e86\u6ee1\u8db3\u5e94\u7528\u5c42\u4f9d\u636e\u4f18\u5148\u7ea7\u5bf9\u8fd9\u4e9b\u4e8b\u4ef6\u7684\u7ba1\u7406\uff0c\u7cfb\u7edf\u91c7\u7528 RunLoopMode \u5bf9\u8fd9\u4e9b\u4e8b\u4ef6\u5206\u7ec4\uff0c\u7136\u540e\u4ea4\u7531RunLoop\u53bb\u7ba1\u7406\uff0c\u82f9\u679c\u6587\u6863\u4e2d\u63d0\u5230\u7684 Mode \u6709\u4e94\u4e2a\uff0c\u5206\u522b\u662f\uff1a</p>\n<ul>\n<li>NSDefaultRunLoopMode /// \u9ed8\u8ba4\u6a21\u5f0f</li>\n<li>NSConnectionReplyMode /// NSConnection \u5bf9\u8c61\u76d1\u6d4b\u56de\u5e94</li>\n<li>NSModalPanelRunLoopMode /// \u6807\u8bc6\u7528\u4e8e\u6a21\u6001\u9762\u677f\u7684\u4e8b\u4ef6</li>\n<li>NSEventTrackingRunLoopMode /// \u7528\u4e8eUI\u4ea4\u4e92\u4e8b\u4ef6\u8ffd\u8e2a</li>\n<li>NSRunLoopCommonModes /// \u5e76\u975e\u5e38\u89c4\u6a21\u5f0f\uff0c\u800c\u662f\u4e00\u7ec4\u53ef\u914d\u7f6e\u7684\u5e38\u7528\u6a21\u5f0f<br />\niOS \u4e2d\u516c\u5f00\u66b4\u9732\u51fa\u6765\u7684\u53ea\u6709 NSDefaultRunLoopMode \u548c NSRunLoopCommonModes\u3002 NSRunLoopCommonModes \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a Mode \u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u5305\u62ec NSDefaultRunLoopMode \u548c NSEventTrackingRunLoopMode\u3002\u5e76\u4e0d\u662f\u8bf4 Runloop \u4f1a\u8fd0\u884c\u5728 kCFRunLoopCommonModes \u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u800c\u662f\u76f8\u5f53\u4e8e\u5206\u522b\u6ce8\u518c\u4e86 NSDefaultRunLoopMode \u548c UITrackingRunLoopMode\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528CFRunLoopAddCommonMode() \u65b9\u6cd5\u5c06\u81ea\u5b9a\u4e49 Mode \u653e\u5230 kCFRunLoopCommonModes \u7ec4\u5408\u3002</li>\n</ul>\n<h4 id=\"26-runloop\">2.6 RunLoop \u7684\u8fd0\u884c\u6d41\u7a0b</h4>\n<p><img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-04.png\" /></p>\n<h3 id=\"runloop_2\">\u4e09\u3001RunLoop\u7684\u5b9e\u73b0</h3>\n<h4 id=\"31-runloop\">3.1 RunLoop \u8fd0\u884c\u51fd\u6570\u5b9e\u73b0</h4>\n<p>\u5728Core Foundation\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b2\u4e2aAPI\u6765\u8ba9RunLoop\u8fd0\u884c\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// \u9ed8\u8ba4 kCFRunLoopDefaultMode \u8fd0\u884c\u5f53\u524d\u7ebf\u7a0b\u7684RunLoop\nvoid CFRunLoopRun(void) {  \n    int32_t result;\n    do {\n        //\u9ed8\u8ba4\u5728kCFRunLoopDefaultMode\u4e0b\u8fd0\u884crunloop\n        result = CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);\n        CHECK_FOR_FORK();\n    } while (kCFRunLoopRunStopped != result &amp;&amp; kCFRunLoopRunFinished != result);\n}\n\n/// \u5728\u6307\u5b9amode\u4e0b\u8fd0\u884c\u5f53\u524d\u7ebf\u7a0b\u7684RunLoop\nSInt32 CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) {  \n    CHECK_FOR_FORK();\n    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);\n}\n</code></pre>\n\n<p>\u4e24\u79cd\u542f\u52a8\u8fd0\u884c\u65b9\u5f0f\u90fd\u5171\u540c\u7684\u8c03\u7528\u4e86 CFRunLoopRunSpecific \u51fd\u6570\uff0c\u90a3\u4e48 CFRunLoopRunSpecific \u51fd\u6570\u91cc\u5e72\u4e86\u4ec0\u4e48\u5462\uff1f</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// RunLoop\u7684\u5b9e\u73b0\nint CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {\n\n    /// \u9996\u5148\u6839\u636emodeName\u627e\u5230\u5bf9\u5e94mode\n    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);\n    /// \u5982\u679cmode\u91cc\u6ca1\u6709source/timer/observer, \u76f4\u63a5\u8fd4\u56de\u3002\n    if (__CFRunLoopModeIsEmpty(currentMode)) return;\n\n    /// 1. \u901a\u77e5 Observers: RunLoop \u5373\u5c06\u8fdb\u5165 loop\u3002\n    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);\n\n    /// \u5185\u90e8\u51fd\u6570\uff0c\u8fdb\u5165loop\n    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {\n\n        Boolean sourceHandledThisLoop = NO;\n        int retVal = 0;\n        do {\n\n            /// 2. \u901a\u77e5 Observers: RunLoop \u5373\u5c06\u89e6\u53d1 Timer \u56de\u8c03\u3002\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);\n            /// 3. \u901a\u77e5 Observers: RunLoop \u5373\u5c06\u89e6\u53d1 Source0 (\u975eport) \u56de\u8c03\u3002\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);\n            /// \u6267\u884c\u88ab\u52a0\u5165\u7684block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n\n            /// 4. RunLoop \u89e6\u53d1 Source0 (\u975eport) \u56de\u8c03\u3002\n            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);\n            /// \u6267\u884c\u88ab\u52a0\u5165\u7684block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n\n            /// 5. \u5982\u679c\u6709 Source1 (\u57fa\u4e8eport) \u5904\u4e8e ready \u72b6\u6001\uff0c\u76f4\u63a5\u5904\u7406\u8fd9\u4e2a Source1 \u7136\u540e\u8df3\u8f6c\u53bb\u5904\u7406\u6d88\u606f\u3002\n            if (__Source0DidDispatchPortLastTime) {\n                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)\n                if (hasMsg) goto handle_msg;\n            }\n\n            /// \u901a\u77e5 Observers: RunLoop \u7684\u7ebf\u7a0b\u5373\u5c06\u8fdb\u5165\u4f11\u7720(sleep)\u3002\n            if (!sourceHandledThisLoop) {\n                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);\n            }\n\n            /// 7. \u8c03\u7528 mach_msg \u7b49\u5f85\u63a5\u53d7 mach_port \u7684\u6d88\u606f\u3002\u7ebf\u7a0b\u5c06\u8fdb\u5165\u4f11\u7720, \u76f4\u5230\u88ab\u4e0b\u9762\u67d0\u4e00\u4e2a\u4e8b\u4ef6\u5524\u9192\u3002\n            /// \u2022 \u4e00\u4e2a\u57fa\u4e8e port \u7684Source \u7684\u4e8b\u4ef6\u3002\n            /// \u2022 \u4e00\u4e2a Timer \u5230\u65f6\u95f4\u4e86\n            /// \u2022 RunLoop \u81ea\u8eab\u7684\u8d85\u65f6\u65f6\u95f4\u5230\u4e86\n            /// \u2022 \u88ab\u5176\u4ed6\u4ec0\u4e48\u8c03\u7528\u8005\u624b\u52a8\u5524\u9192\n            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) {\n                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg\n            }\n\n            /// 8. \u901a\u77e5 Observers: RunLoop \u7684\u7ebf\u7a0b\u521a\u521a\u88ab\u5524\u9192\u4e86\u3002\n            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);\n\n            /// \u6536\u5230\u6d88\u606f\uff0c\u5904\u7406\u6d88\u606f\u3002\n            handle_msg:\n\n            /// 9.1 \u5982\u679c\u4e00\u4e2a Timer \u5230\u65f6\u95f4\u4e86\uff0c\u89e6\u53d1\u8fd9\u4e2aTimer\u7684\u56de\u8c03\u3002\n            if (msg_is_timer) {\n                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())\n            } \n\n            /// 9.2 \u5982\u679c\u6709dispatch\u5230main_queue\u7684block\uff0c\u6267\u884cblock\u3002\n            else if (msg_is_dispatch) {\n                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);\n            } \n\n            /// 9.3 \u5982\u679c\u4e00\u4e2a Source1 (\u57fa\u4e8eport) \u53d1\u51fa\u4e8b\u4ef6\u4e86\uff0c\u5904\u7406\u8fd9\u4e2a\u4e8b\u4ef6\n            else {\n                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);\n                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);\n                if (sourceHandledThisLoop) {\n                    mach_msg(reply, MACH_SEND_MSG, reply);\n                }\n            }\n\n            /// \u6267\u884c\u52a0\u5165\u5230Loop\u7684block\n            __CFRunLoopDoBlocks(runloop, currentMode);\n\n\n            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) {\n                /// \u8fdb\u5165loop\u65f6\u53c2\u6570\u8bf4\u5904\u7406\u5b8c\u4e8b\u4ef6\u5c31\u8fd4\u56de\u3002\n                retVal = kCFRunLoopRunHandledSource;\n            } else if (timeout) {\n                /// \u8d85\u51fa\u4f20\u5165\u53c2\u6570\u6807\u8bb0\u7684\u8d85\u65f6\u65f6\u95f4\u4e86\n                retVal = kCFRunLoopRunTimedOut;\n            } else if (__CFRunLoopIsStopped(runloop)) {\n                /// \u88ab\u5916\u90e8\u8c03\u7528\u8005\u5f3a\u5236\u505c\u6b62\u4e86\n                retVal = kCFRunLoopRunStopped;\n            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {\n                /// source/timer/observer\u4e00\u4e2a\u90fd\u6ca1\u6709\u4e86\n                retVal = kCFRunLoopRunFinished;\n            }\n\n            /// \u5982\u679c\u6ca1\u8d85\u65f6\uff0cmode\u91cc\u6ca1\u7a7a\uff0cloop\u4e5f\u6ca1\u88ab\u505c\u6b62\uff0c\u90a3\u7ee7\u7eedloop\u3002\n        } while (retVal == 0);\n    }\n\n    /// 10. \u901a\u77e5 Observers: RunLoop \u5373\u5c06\u9000\u51fa\u3002\n    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);\n}\n</code></pre>\n\n<p>CFRunLoopRunSpecific \u5177\u4f53\u51fd\u6570\u5b9e\u73b0\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u53ef\u67e5\u9605\uff0c\u5b83\u7684\u5185\u90e8\u903b\u8f91\u5982\u4e0b\uff1a</p>\n<ul>\n<li>\u9996\u5148\u5224\u65ad RunLoop \u5bf9\u8c61\u662f\u5426\u5b58\u5728\uff0c\u5426\u5219\u8fd4\u56de kCFRunLoopRunFinished \u7ed3\u675f\u8fd0\u884c\u3002</li>\n<li>\u6839\u636e\u4f20\u5165\u7684 Mode name \u627e\u5230\u672c\u6b21\u8fd0\u884c\u7684 mode\uff0c\u82e5\u672a\u627e\u5230\u8be5 Mode \u6216\u8005 Mode \u4e2d\u672a\u6ce8\u518c\u4efb\u4f55\u4e8b\u4ef6\uff0c\u5219\u8fd4\u56de kCFRunLoopRunFinished \u7ed3\u675f\u8fd0\u884c\u3002</li>\n<li>\u4e0a\u8ff0\u6b65\u9aa4\u6b63\u5e38\u7684\u8bdd\uff0c\u901a\u77e5 observer RunLoop \u5373\u5c06\u8fd0\u884c\uff0c\u7136\u540e\u8c03\u7528 __CFRunLoopRun \u51fd\u6570\u5f00\u542f RunLoop \u8fd0\u884c\u3002</li>\n<li>\u5728 CFRunLoopRun \u51fd\u6570\u56de\u8c03\u4e2d\uff0c\u5904\u7406 Timer\u3001Source0\u3001Source1 \u7b49\u4e8b\u4ef6\uff0c\u82e5\u65e0\u4e8b\u4ef6\u5219\u8fdb\u5165\u4f11\u7720\u3002</li>\n<li>\u76f4\u5230\u63a5\u6536\u5230 kCFRunLoopExit \u4fe1\u53f7\u6216\u8005\u8d85\u65f6\uff0c\u901a\u77e5 observer RunLoop \u9000\u51fa\u8fd0\u884c\u3002</li>\n</ul>\n<h4 id=\"32-runloop-mode\">3.2 \u6dfb\u52a0 RunLoop Mode</h4>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// \u5411\u5f53\u524dRunLoop\u7684common modes\u4e2d\u6dfb\u52a0\u4e00\u4e2amode\u3002\nCFRunLoopAddCommonMode(CFRunLoopRef rl, CFStringRef mode)\n\n/// \u8fd4\u56de\u5f53\u524d\u8fd0\u884c\u7684mode\u7684name\nCFStringRef CFRunLoopCopyCurrentMode(CFRunLoopRef rl)\n\n/// \u8fd4\u56de\u5f53\u524dRunLoop\u7684\u6240\u6709mode\nCFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl)\n</code></pre>\n\n<p>\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u521b\u5efa\u4e00\u4e2aCFRunLoopMode\u5bf9\u8c61\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 CFRunLoopAddCommonMode \u4f20\u5165 Mode \u5b57\u7b26\u4e32\u540d\uff0c\u51fd\u6570\u5185\u90e8\u4f1a\u521b\u5efa CFRunLoopMode \u5bf9\u8c61\u5e76\u6dfb\u52a0\u5230 RunLoop \u4e2d\u3002\u4f46\u662f\u5f97\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a</p>\n<ul>\n<li>modeName\u4e0d\u80fd\u91cd\u590d\uff0cmodeName\u662fmode\u7684\u552f\u4e00\u6807\u8bc6\u7b26</li>\n<li>RunLoop\u7684_commonModes\u6570\u7ec4\u5b58\u653e\u6240\u6709\u88ab\u6807\u8bb0\u4e3acommon\u7684mode\u7684\u540d\u79f0</li>\n<li>\u6dfb\u52a0commonMode\u4f1a\u628acommonModeItems\u6570\u7ec4\u4e2d\u7684\u6240\u6709source\u540c\u6b65\u5230\u65b0\u6dfb\u52a0\u7684mode\u4e2d</li>\n<li>CFRunLoopMode\u5bf9\u8c61\u5728CFRunLoopAddItemsToCommonMode\u51fd\u6570\u4e2d\u8c03\u7528CFRunLoopFindMode\u65f6\u88ab\u521b\u5efa<br />\n\u76f8\u5173\u51fd\u6570\u5b9e\u73b0\u5982\u4e0b\uff1a</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">CFRunLoopAddCommonMode\nvoid CFRunLoopAddCommonMode(CFRunLoopRef rl, CFStringRef modeName) {\n    CHECK_FOR_FORK();\n    if (__CFRunLoopIsDeallocating(rl)) return;\n    __CFRunLoopLock(rl);\n    //\u770brl\u4e2d\u662f\u5426\u5df2\u7ecf\u6709\u8fd9\u4e2amode\uff0c\u5982\u679c\u6709\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\n    if (!CFSetContainsValue(rl-&gt;_commonModes, modeName)) {\n        CFSetRef set = rl-&gt;_commonModeItems ? CFSetCreateCopy(kCFAllocatorSystemDefault, rl-&gt;_commonModeItems) : NULL;\n        //\u628amodeName\u6dfb\u52a0\u5230RunLoop\u7684_commonModes\u4e2d\n        CFSetAddValue(rl-&gt;_commonModes, modeName);\n        if (NULL != set) {\n            CFTypeRef context[2] = {rl, modeName};\n            /* add all common-modes items to new mode */\n            //\u8fd9\u91cc\u8c03\u7528CFRunLoopAddSource/CFRunLoopAddObserver/CFRunLoopAddTimer\u7684\u65f6\u5019\u4f1a\u8c03\u7528\n            //__CFRunLoopFindMode(rl, modeName, true)\uff0cCFRunLoopMode\u5bf9\u8c61\u5728\u8fd9\u4e2a\u65f6\u5019\u88ab\u521b\u5efa\n            CFSetApplyFunction(set, (__CFRunLoopAddItemsToCommonMode), (void *)context);\n            CFRelease(set);\n        }\n    } else {\n    }\n    __CFRunLoopUnlock(rl);\n}\n</code></pre>\n\n<h4 id=\"33-run-loop-sourcemodeitem\">3.3 \u6dfb\u52a0Run Loop Source\uff08ModeItem\uff09</h4>\n<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u63a5\u53e3\u6dfb\u52a0/\u79fb\u9664\u5404\u79cd\u4e8b\u4ef6:</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode)\nvoid CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode)\nvoid CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode)\nvoid CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef * mode)\nvoid CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode)\nvoid CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode)\n</code></pre>\n\n<p>CFRunLoopAddSource \u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">//\u6dfb\u52a0source\u4e8b\u4ef6\nvoid CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef rls, CFStringRef modeName) {    /* DOES CALLOUT */\n    CHECK_FOR_FORK();\n    if (__CFRunLoopIsDeallocating(rl)) return;\n    if (!__CFIsValid(rls)) return;\n    Boolean doVer0Callout = false;\n    __CFRunLoopLock(rl);\n    //\u5982\u679c\u662fkCFRunLoopCommonModes\n    if (modeName == kCFRunLoopCommonModes) {\n        //\u5982\u679crunloop\u7684_commonModes\u5b58\u5728\uff0c\u5219copy\u4e00\u4e2a\u65b0\u7684\u590d\u5236\u7ed9set\n        CFSetRef set = rl-&gt;_commonModes ? CFSetCreateCopy(kCFAllocatorSystemDefault, rl-&gt;_commonModes) : NULL;\n       //\u5982\u679crunl _commonModeItems\u4e3a\u7a7a\n        if (NULL == rl-&gt;_commonModeItems) {\n            //\u5148\u521d\u59cb\u5316\n            rl-&gt;_commonModeItems = CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);\n        }\n        //\u628a\u4f20\u5165\u7684CFRunLoopSourceRef\u52a0\u5165_commonModeItems\n        CFSetAddValue(rl-&gt;_commonModeItems, rls);\n        //\u5982\u679c\u521a\u624dset copy\u5230\u7684\u6570\u7ec4\u91cc\u6709\u6570\u636e\n        if (NULL != set) {\n            CFTypeRef context[2] = {rl, rls};\n            /* add new item to all common-modes */\n            //\u5219\u628aset\u91cc\u7684\u6240\u6709mode\u90fd\u6267\u884c\u4e00\u904d__CFRunLoopAddItemToCommonModes\u51fd\u6570\n            CFSetApplyFunction(set, (__CFRunLoopAddItemToCommonModes), (void *)context);\n            CFRelease(set);\n        }\n        //\u4ee5\u4e0a\u5206\u652f\u7684\u903b\u8f91\u5c31\u662f\uff0c\u5982\u679c\u4f60\u5f80kCFRunLoopCommonModes\u91cc\u9762\u6dfb\u52a0\u4e00\u4e2asource\uff0c\u90a3\u4e48\u6240\u6709_commonModes\u91cc\u7684mode\u90fd\u4f1a\u6dfb\u52a0\u8fd9\u4e2asource\n    } else {\n        //\u6839\u636emodeName\u67e5\u627emode\n        CFRunLoopModeRef rlm = __CFRunLoopFindMode(rl, modeName, true);\n        //\u5982\u679c_sources0\u4e0d\u5b58\u5728\uff0c\u5219\u521d\u59cb\u5316_sources0\uff0c_sources0\u548c_portToV1SourceMap\n        if (NULL != rlm &amp;&amp; NULL == rlm-&gt;_sources0) {\n            rlm-&gt;_sources0 = CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);\n            rlm-&gt;_sources1 = CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);\n            rlm-&gt;_portToV1SourceMap = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, 0, NULL, NULL);\n        }\n        //\u5982\u679c_sources0\u548c_sources1\u4e2d\u90fd\u4e0d\u5305\u542b\u4f20\u5165\u7684source\n        if (NULL != rlm &amp;&amp; !CFSetContainsValue(rlm-&gt;_sources0, rls) &amp;&amp; !CFSetContainsValue(rlm-&gt;_sources1, rls)) {\n            //\u5982\u679cversion\u662f0\uff0c\u5219\u52a0\u5230_sources0\n            if (0 == rls-&gt;_context.version0.version) {\n                CFSetAddValue(rlm-&gt;_sources0, rls);\n                //\u5982\u679cversion\u662f1\uff0c\u5219\u52a0\u5230_sources1\n            } else if (1 == rls-&gt;_context.version0.version) {\n                CFSetAddValue(rlm-&gt;_sources1, rls);\n                __CFPort src_port = rls-&gt;_context.version1.getPort(rls-&gt;_context.version1.info);\n                if (CFPORT_NULL != src_port) {\n                    //\u6b64\u5904\u53ea\u6709\u5728\u52a0\u5230source1\u7684\u65f6\u5019\u624d\u4f1a\u628asouce\u548c\u4e00\u4e2amach_port_t\u5bf9\u5e94\u8d77\u6765\n                    //\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0csource1\u53ef\u4ee5\u901a\u8fc7\u5185\u6838\u5411\u5176\u7aef\u53e3\u53d1\u9001\u6d88\u606f\u6765\u4e3b\u52a8\u5524\u9192runloop\n                    CFDictionarySetValue(rlm-&gt;_portToV1SourceMap, (const void *)(uintptr_t)src_port, rls);\n                    __CFPortSetInsert(src_port, rlm-&gt;_portSet);\n                }\n            }\n            __CFRunLoopSourceLock(rls);\n            //\u628arunloop\u52a0\u5165\u5230source\u7684_runLoops\u4e2d\n            if (NULL == rls-&gt;_runLoops) {\n                rls-&gt;_runLoops = CFBagCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeBagCallBacks); // sources retain run loops!\n            }\n            CFBagAddValue(rls-&gt;_runLoops, rl);\n            __CFRunLoopSourceUnlock(rls);\n            if (0 == rls-&gt;_context.version0.version) {\n                if (NULL != rls-&gt;_context.version0.schedule) {\n                    doVer0Callout = true;\n                }\n            }\n        }\n        if (NULL != rlm) {\n            __CFRunLoopModeUnlock(rlm);\n        }\n    }\n    __CFRunLoopUnlock(rl);\n    if (doVer0Callout) {\n        // although it looses some protection for the source, we have no choice but\n        // to do this after unlocking the run loop and mode locks, to avoid deadlocks\n        // where the source wants to take a lock which is already held in another\n        // thread which is itself waiting for a run loop/mode lock\n        rls-&gt;_context.version0.schedule(rls-&gt;_context.version0.info, rl, modeName); /* CALLOUT */\n    }\n}\n</code></pre>\n\n<p>CFRunLoopAddSource \u51fd\u6570\u5185\u90e8\u5de5\u4f5c\u5185\u5bb9\u5982\u4e0b\uff1a<br />\n- \u5982\u679c modeName \u4f20\u5165 kCFRunLoopCommonModes\uff0c\u5219\u8be5source \u4f1a\u88ab\u4fdd\u5b58\u5230 RunLoop \u7684 _commonModeItems \u4e2d\uff0c\u540c\u65f6\u4e5f\u4f1a\u6dfb\u52a0\u5230 commonMode \u4e0b\u7684\u6240\u6709 Mode \u4e2d\u3002<br />\n- \u5982\u679cmodeName\u4f20\u5165\u7684\u4e0d\u662fkCFRunLoopCommonModes\uff0c\u5219\u4f1a\u5148\u67e5\u627e\u8be5Mode\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Mode \u5bf9\u8c61\uff0c\u5c06 Source \u6dfb\u52a0\u5230\u8be5 Mode \u4fdd\u5b58\u3002<br />\n\u540c\u4e00\u4e2asource\u5728\u4e00\u4e2amode\u4e2d\u53ea\u80fd\u88ab\u6dfb\u52a0\u4e00\u6b21</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">CFRunLoopRemoveSource\n//\u79fb\u9664source\nvoid CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef rls, CFStringRef modeName) { /* DOES CALLOUT */\n    CHECK_FOR_FORK();\n    Boolean doVer0Callout = false, doRLSRelease = false;\n    __CFRunLoopLock(rl);\n    //\u5982\u679c\u662fkCFRunLoopCommonModes\uff0c\u5219\u4ece_commonModes\u7684\u6240\u6709mode\u4e2d\u79fb\u9664\u8be5source\n    if (modeName == kCFRunLoopCommonModes) {\n        if (NULL != rl-&gt;_commonModeItems &amp;&amp; CFSetContainsValue(rl-&gt;_commonModeItems, rls)) {\n            CFSetRef set = rl-&gt;_commonModes ? CFSetCreateCopy(kCFAllocatorSystemDefault, rl-&gt;_commonModes) : NULL;\n            CFSetRemoveValue(rl-&gt;_commonModeItems, rls);\n            if (NULL != set) {\n                CFTypeRef context[2] = {rl, rls};\n                /* remove new item from all common-modes */\n                CFSetApplyFunction(set, (__CFRunLoopRemoveItemFromCommonModes), (void *)context);\n                CFRelease(set);\n            }\n        } else {\n        }\n    } else {\n        //\u6839\u636emodeName\u67e5\u627emode\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56deNULL\n        CFRunLoopModeRef rlm = __CFRunLoopFindMode(rl, modeName, false);\n        if (NULL != rlm &amp;&amp; ((NULL != rlm-&gt;_sources0 &amp;&amp; CFSetContainsValue(rlm-&gt;_sources0, rls)) || (NULL != rlm-&gt;_sources1 &amp;&amp; CFSetContainsValue(rlm-&gt;_sources1, rls)))) {\n            CFRetain(rls);\n            //\u6839\u636esource\u7248\u672c\u505a\u5bf9\u5e94\u7684remove\u64cd\u4f5c\n            if (1 == rls-&gt;_context.version0.version) {\n                __CFPort src_port = rls-&gt;_context.version1.getPort(rls-&gt;_context.version1.info);\n                if (CFPORT_NULL != src_port) {\n                    CFDictionaryRemoveValue(rlm-&gt;_portToV1SourceMap, (const void *)(uintptr_t)src_port);\n                    __CFPortSetRemove(src_port, rlm-&gt;_portSet);\n                }\n            }\n            CFSetRemoveValue(rlm-&gt;_sources0, rls);\n            CFSetRemoveValue(rlm-&gt;_sources1, rls);\n            __CFRunLoopSourceLock(rls);\n            if (NULL != rls-&gt;_runLoops) {\n                CFBagRemoveValue(rls-&gt;_runLoops, rl);\n            }\n            __CFRunLoopSourceUnlock(rls);\n            if (0 == rls-&gt;_context.version0.version) {\n                if (NULL != rls-&gt;_context.version0.cancel) {\n                    doVer0Callout = true;\n                }\n            }\n            doRLSRelease = true;\n        }\n        if (NULL != rlm) {\n            __CFRunLoopModeUnlock(rlm);\n        }\n    }\n    __CFRunLoopUnlock(rl);\n    if (doVer0Callout) {\n        // although it looses some protection for the source, we have no choice but\n        // to do this after unlocking the run loop and mode locks, to avoid deadlocks\n        // where the source wants to take a lock which is already held in another\n        // thread which is itself waiting for a run loop/mode lock\n        rls-&gt;_context.version0.cancel(rls-&gt;_context.version0.info, rl, modeName);   /* CALLOUT */\n    }\n    if (doRLSRelease) CFRelease(rls);\n}\n</code></pre>\n\n<p>\u6dfb\u52a0observer\u548ctimer\u7684\u5185\u90e8\u903b\u8f91\u548c\u6dfb\u52a0source\u5927\u4f53\u7c7b\u4f3c\u3002</p>\n<p>\u533a\u522b\u5728\u4e8eobserver\u548ctimer\u53ea\u80fd\u88ab\u6dfb\u52a0\u5230\u4e00\u4e2aRunLoop\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2amode\u4e2d\uff0c\u6bd4\u5982\u4e00\u4e2atimer\u88ab\u6dfb\u52a0\u5230\u4e3b\u7ebf\u7a0b\u7684RunLoop\u4e2d\uff0c\u5219\u4e0d\u80fd\u518d\u628a\u8be5timer\u6dfb\u52a0\u5230\u5b50\u7ebf\u7a0b\u7684RunLoop\uff0c\u800csource\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u4e0d\u7ba1\u662f\u54ea\u4e2aRunLoop\uff0c\u53ea\u8981mode\u4e2d\u6ca1\u6709\uff0c\u5c31\u53ef\u4ee5\u6dfb\u52a0\u3002</p>\n<p>\u8fd9\u4e00\u70b9\u4ece\u5b9e\u73b0\u7ed3\u6784\u4e0a\u5c31\u80fd\u4f53\u73b0\uff0cCFRunLoopSource\u7ed3\u6784\u4f53\u4e2d\u6709\u4fdd\u5b58RunLoop\u5bf9\u8c61\u7684\u6570\u7ec4\uff0c\u800cCFRunLoopObserver\u548cCFRunLoopTimer\u53ea\u6709\u5355\u4e2aRunLoop\u5bf9\u8c61\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">struct __CFRunLoopSource {\n    CFRuntimeBase _base;\n    uint32_t _bits;\n    pthread_mutex_t _lock;\n    CFIndex _order;\n    CFMutableBagRef _runLoops;\n    union {\n        CFRunLoopSourceContext version0;          \n        CFRunLoopSourceContext1 version1;    \n    } _context;\n}\n\nstruct __CFRunLoopObserver {\n    CFRuntimeBase _base;\n    pthread_mutex_t _lock;\n    CFRunLoopRef _runLoop;\n    CFIndex _rlCount;\n    CFOptionFlags _activities;\n    CFIndex _order;  \n    CFRunLoopObserverCallBack _callout; \n    CFRunLoopObserverContext _context; \n};\n\nstruct __CFRunLoopTimer {\n    CFRuntimeBase _base;\n    uint16_t _bits;\n    pthread_mutex_t _lock;\n    CFRunLoopRef _runLoop; \n    CFMutableSetRef _rlModes;   \n    CFAbsoluteTime _nextFireDate;\n    CFTimeInterval _interval;   \n    CFTimeInterval _tolerance;    \n    uint64_t _fireTSR; \n    CFIndex _order;      \n    CFRunLoopTimerCallBack _callout;    \n    CFRunLoopTimerContext _context; \n};\n</code></pre>\n\n<h4 id=\"34-runloop\">3.4 RunLoop \u7684\u5e95\u5c42\u5b9e\u73b0</h4>\n<p>RunLoop \u7684\u6838\u5fc3\u662f\u57fa\u4e8e mach port \u7684\uff0c\u5176\u8fdb\u5165\u4f11\u7720\u65f6\u8c03\u7528\u7684\u51fd\u6570\u662f mach_msg()\u3002\u4e3a\u4e86\u89e3\u91ca\u8fd9\u4e2a\u903b\u8f91\uff0c\u4e0b\u9762\u7a0d\u5fae\u4ecb\u7ecd\u4e00\u4e0b OSX/iOS \u7684\u7cfb\u7edf\u67b6\u6784\u3002<br />\n<img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-05.png\" /></p>\n<p>\u82f9\u679c\u5b98\u65b9\u5c06\u6574\u4e2a\u7cfb\u7edf\u5927\u81f4\u5212\u5206\u4e3a\u4e0a\u8ff04\u4e2a\u5c42\u6b21\uff1a \u5e94\u7528\u5c42\u5305\u62ec\u7528\u6237\u80fd\u63a5\u89e6\u5230\u7684\u56fe\u5f62\u5e94\u7528\uff0c\u4f8b\u5982 Spotlight\u3001Aqua\u3001SpringBoard \u7b49\u3002 \u5e94\u7528\u6846\u67b6\u5c42\u5373\u5f00\u53d1\u4eba\u5458\u63a5\u89e6\u5230\u7684 Cocoa \u7b49\u6846\u67b6\u3002 \u6838\u5fc3\u6846\u67b6\u5c42\u5305\u62ec\u5404\u79cd\u6838\u5fc3\u6846\u67b6\u3001OpenGL \u7b49\u5185\u5bb9\u3002 Darwin \u5373\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\uff0c\u5305\u62ec\u7cfb\u7edf\u5185\u6838\u3001\u9a71\u52a8\u3001Shell \u7b49\u5185\u5bb9\uff0c\u8fd9\u4e00\u5c42\u662f\u5f00\u6e90\u7684\uff0c\u5176\u6240\u6709\u6e90\u7801\u90fd\u53ef\u4ee5\u5728 opensource.apple.com \u91cc\u627e\u5230\u3002</p>\n<p>\u6211\u4eec\u518d\u6df1\u5165\u770b\u4e00\u4e0b Darwin \u8fd9\u4e2a\u6838\u5fc3\u7684\u67b6\u6784\uff1a<br />\n<img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-06.png\" /></p>\n<p>\u5176\u4e2d\uff0c\u5728\u786c\u4ef6\u5c42\u4e0a\u9762\u7684\u4e09\u4e2a\u7ec4\u6210\u90e8\u5206\uff1aMach\u3001BSD\u3001IOKit (\u8fd8\u5305\u62ec\u4e00\u4e9b\u4e0a\u9762\u6ca1\u6807\u6ce8\u7684\u5185\u5bb9)\uff0c\u5171\u540c\u7ec4\u6210\u4e86 XNU \u5185\u6838\u3002 XNU \u5185\u6838\u7684\u5185\u73af\u88ab\u79f0\u4f5c Mach\uff0c\u5176\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u5185\u6838\uff0c\u4ec5\u63d0\u4f9b\u4e86\u8bf8\u5982\u5904\u7406\u5668\u8c03\u5ea6\u3001IPC (\u8fdb\u7a0b\u95f4\u901a\u4fe1)\u7b49\u975e\u5e38\u5c11\u91cf\u7684\u57fa\u7840\u670d\u52a1\u3002 BSD \u5c42\u53ef\u4ee5\u770b\u4f5c\u56f4\u7ed5 Mach \u5c42\u7684\u4e00\u4e2a\u5916\u73af\uff0c\u5176\u63d0\u4f9b\u4e86\u8bf8\u5982\u8fdb\u7a0b\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u548c\u7f51\u7edc\u7b49\u529f\u80fd\u3002 IOKit \u5c42\u662f\u4e3a\u8bbe\u5907\u9a71\u52a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61(C++)\u7684\u4e00\u4e2a\u6846\u67b6\u3002</p>\n<p>Mach \u672c\u8eab\u63d0\u4f9b\u7684 API \u975e\u5e38\u6709\u9650\uff0c\u800c\u4e14\u82f9\u679c\u4e5f\u4e0d\u9f13\u52b1\u4f7f\u7528 Mach \u7684 API\uff0c\u4f46\u662f\u8fd9\u4e9bAPI\u975e\u5e38\u57fa\u7840\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e9bAPI\u7684\u8bdd\uff0c\u5176\u4ed6\u4efb\u4f55\u5de5\u4f5c\u90fd\u65e0\u6cd5\u5b9e\u65bd\u3002\u5728 Mach \u4e2d\uff0c\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u901a\u8fc7\u81ea\u5df1\u7684\u5bf9\u8c61\u5b9e\u73b0\u7684\uff0c\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u548c\u865a\u62df\u5185\u5b58\u90fd\u88ab\u79f0\u4e3a\u201d\u5bf9\u8c61\u201d\u3002\u548c\u5176\u4ed6\u67b6\u6784\u4e0d\u540c\uff0c Mach \u7684\u5bf9\u8c61\u95f4\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u53ea\u80fd\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u7684\u65b9\u5f0f\u5b9e\u73b0\u5bf9\u8c61\u95f4\u7684\u901a\u4fe1\u3002\u201c\u6d88\u606f\u201d\u662f Mach \u4e2d\u6700\u57fa\u7840\u7684\u6982\u5ff5\uff0c\u6d88\u606f\u5728\u4e24\u4e2a\u7aef\u53e3 (port) \u4e4b\u95f4\u4f20\u9012\uff0c\u8fd9\u5c31\u662f Mach \u7684 IPC (\u8fdb\u7a0b\u95f4\u901a\u4fe1) \u7684\u6838\u5fc3\u3002</p>\n<p>Mach \u7684\u6d88\u606f\u5b9a\u4e49\u5728 <mach/message.h> \u6587\u4ef6\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">typedef struct {\n  mach_msg_header_t header;\n  mach_msg_body_t body;\n} mach_msg_base_t;\n\ntypedef struct {\n  mach_msg_bits_t msgh_bits;\n  mach_msg_size_t msgh_size;\n  mach_port_t msgh_remote_port;\n  mach_port_t msgh_local_port;\n  mach_port_name_t msgh_voucher_port;\n  mach_msg_id_t msgh_id;\n} mach_msg_header_t;\n\nmach_msg_return_t mach_msg(\n   mach_msg_header_t *msg,\n   mach_msg_option_t option,\n   mach_msg_size_t send_size,\n   mach_msg_size_t rcv_size,\n   mach_port_name_t rcv_name,\n   mach_msg_timeout_t timeout,\n   mach_port_name_t notify);\n</code></pre>\n\n<p>\u4e00\u6761 Mach \u6d88\u606f\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u636e\u5305 (BLOB)\uff0c\u5176\u5934\u90e8\u5b9a\u4e49\u4e86\u5f53\u524d\u7aef\u53e3 msgh_remote_port \u548c\u76ee\u6807\u7aef\u53e3 msgh_remote_port\uff0c \u53d1\u9001\u548c\u63a5\u53d7\u6d88\u606f\u662f\u901a\u8fc7\u540c\u4e00\u4e2a API \u8fdb\u884c\u7684\uff0c\u5176 option \u6807\u8bb0\u4e86\u6d88\u606f\u4f20\u9012\u7684\u65b9\u5411\u3002</p>\n<p>\u4e3a\u4e86\u5b9e\u73b0\u6d88\u606f\u7684\u53d1\u9001\u548c\u63a5\u6536\uff0cmach_msg() \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86\u4e00\u4e2a Mach \u9677\u9631 (trap)\uff0c\u5373\u51fd\u6570mach_msg_trap()\uff0c\u9677\u9631\u8fd9\u4e2a\u6982\u5ff5\u5728 Mach \u4e2d\u7b49\u540c\u4e8e\u7cfb\u7edf\u8c03\u7528\u3002\u5f53\u4f60\u5728\u7528\u6237\u6001\u8c03\u7528 mach_msg_trap() \u65f6\u4f1a\u89e6\u53d1\u9677\u9631\u673a\u5236\uff0c\u5207\u6362\u5230\u5185\u6838\u6001\uff1b\u5185\u6838\u6001\u4e2d\u5185\u6838\u5b9e\u73b0\u7684 mach_msg() \u51fd\u6570\u4f1a\u5b8c\u6210\u5b9e\u9645\u7684\u5de5\u4f5c\uff0c\u5982\u4e0b\u56fe\uff1a<br />\n<img alt=\"image\" src=\"https://meanmouse.github.io/postImage/iOS-\u4e8b\u4ef6\u5206\u53d1\u5904\u7406-RunLoop/psb-07.png\" /></p>\n<p>RunLoop \u7684\u6838\u5fc3\u5c31\u662f\u4e00\u4e2a mach_msg() \uff0cRunLoop \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u53bb\u63a5\u6536\u6d88\u606f\uff0c\u5982\u679c\u6ca1\u6709\u522b\u4eba\u53d1\u9001 port \u6d88\u606f\u8fc7\u6765\uff0c\u5185\u6838\u4f1a\u5c06\u7ebf\u7a0b\u7f6e\u4e8e\u7b49\u5f85\u72b6\u6001\u3002\u4f8b\u5982\u4f60\u5728\u6a21\u62df\u5668\u91cc\u8dd1\u8d77\u4e00\u4e2a iOS \u7684 App\uff0c\u7136\u540e\u5728 App \u9759\u6b62\u65f6\u70b9\u51fb\u6682\u505c\uff0c\u4f60\u4f1a\u770b\u5230\u4e3b\u7ebf\u7a0b\u8c03\u7528\u6808\u662f\u505c\u7559\u5728 mach_msg_trap() \u8fd9\u4e2a\u5730\u65b9\u3002</p>\n<h3 id=\"runloop_3\">\u56db\u3001RunLoop\u7684\u5e94\u7528</h3>\n<h4 id=\"41-runloop-observer\">4.1 \u6839\u636e RunLoop \u7684\u72b6\u6001 Observer \uff0c\u4f18\u5316\u6027\u80fd</h4>\n<p>\u590d\u6742 Cell \u7684\u9ad8\u5ea6\u8ba1\u7b97\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u9ad8\u5ea6\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u5f00\u9500\u3002\u8ba1\u7b97\u9ad8\u5ea6\u5e76\u7f13\u5b58\u7684\u65f6\u673a\u5e94\u5728\u7528\u6237\u65e0\u611f\u77e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p>\n<p>RunLoop \u5904\u4e8e\u201c\u7a7a\u95f2\u201d\u72b6\u6001<br />\n\u5f53 RunLoop \u8fed\u4ee3\u5904\u7406\u5b8c\u6210\u4e86\u6240\u6709\u4e8b\u4ef6\uff0c\u9a6c\u4e0a\u8981\u4f11\u7720\u65f6 RunLoop \u63d0\u4f9b\u4e86 CFRunLoopObserverCreateWithHandler \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u76d1\u542c RunLoop \u5f53\u524d\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">CFRunLoopRef runLoop = CFRunLoopGetCurrent();\nCFStringRef runLoopMode = kCFRunLoopDefaultMode;\nCFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler\n(kCFAllocatorDefault, kCFRunLoopBeforeWaiting, true, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity _) {\n    // TODO here\n});\nCFRunLoopAddObserver(runLoop, observer, runLoopMode);\n/// \u6ce8\u610f\uff1a\u9700\u5728\u5408\u9002\u7684\u673a\u4f1a\u8c03\u7528 CFRunLoopRemoveObserver \u79fb\u9664\u76d1\u542c\n</code></pre>\n\n<h4 id=\"42-autoreleasepool\">4.2 AutoreleasePool</h4>\n<p>App\u542f\u52a8\u540e\uff0c\u82f9\u679c\u5728\u4e3b\u7ebf\u7a0b RunLoop \u91cc\u6ce8\u518c\u4e86\u4e24\u4e2a Observer\uff0c\u5176\u56de\u8c03\u90fd\u662f_wrapRunLoopWithAutoreleasePoolHandler()\u3002</p>\n<ul>\n<li>\u7b2c\u4e00\u4e2a Observer \u76d1\u89c6\u7684\u4e8b\u4ef6\u662f Entry (\u5373\u5c06\u8fdb\u5165Loop)\uff0c\u5176\u56de\u8c03\u5185\u4f1a\u8c03\u7528 _objc_autoreleasePoolPush() \u521b\u5efa\u81ea\u52a8\u91ca\u653e\u6c60\u3002\u5176 order \u662f-2147483647\uff0c\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4fdd\u8bc1\u521b\u5efa\u91ca\u653e\u6c60\u53d1\u751f\u5728\u5176\u4ed6\u6240\u6709\u56de\u8c03\u4e4b\u524d\u3002</li>\n<li>\u7b2c\u4e8c\u4e2a Observer \u76d1\u89c6\u4e86\u4e24\u4e2a\u4e8b\u4ef6\uff1a BeforeWaiting(\u51c6\u5907\u8fdb\u5165\u4f11\u7720) \u65f6\u8c03\u7528_objc_autoreleasePoolPop() \u548c _objc_autoreleasePoolPush() \u91ca\u653e\u65e7\u7684\u6c60\u5e76\u521b\u5efa\u65b0\u6c60\uff1bExit(\u5373\u5c06\u9000\u51faLoop) \u65f6\u8c03\u7528 _objc_autoreleasePoolPop() \u6765\u91ca\u653e\u81ea\u52a8\u91ca\u653e\u6c60\u3002\u8fd9\u4e2a Observer \u7684 order \u662f 2147483647\uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u4fdd\u8bc1\u5176\u91ca\u653e\u6c60\u5b50\u53d1\u751f\u5728\u5176\u4ed6\u6240\u6709\u56de\u8c03\u4e4b\u540e\u3002</li>\n</ul>\n<p>\u5728\u4e3b\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\uff0c\u901a\u5e38\u662f\u5199\u5728\u8bf8\u5982\u4e8b\u4ef6\u56de\u8c03\u3001Timer\u56de\u8c03\u5185\u7684\u3002\u8fd9\u4e9b\u56de\u8c03\u4f1a\u88ab RunLoop \u521b\u5efa\u597d\u7684 AutoreleasePool \u73af\u7ed5\u7740\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u5185\u5b58\u6cc4\u6f0f\uff0c\u5f00\u53d1\u8005\u4e5f\u4e0d\u5fc5\u663e\u793a\u521b\u5efa Pool \u4e86\u3002</p>\n<h4 id=\"43\">4.3 \u4e8b\u4ef6\u54cd\u5e94</h4>\n<p>\u82f9\u679c\u6ce8\u518c\u4e86\u4e00\u4e2a Source1 (\u57fa\u4e8e mach port \u7684) \u7528\u6765\u63a5\u6536\u7cfb\u7edf\u4e8b\u4ef6\uff0c\u5176\u56de\u8c03\u51fd\u6570\u4e3a __IOHIDEventSystemClientQueueCallback()\u3002</p>\n<p>\u5f53\u4e00\u4e2a\u786c\u4ef6\u4e8b\u4ef6(\u89e6\u6478/\u9501\u5c4f/\u6447\u6643\u7b49)\u53d1\u751f\u540e\uff0c\u9996\u5148\u7531 IOKit.framework \u751f\u6210\u4e00\u4e2a IOHIDEvent \u4e8b\u4ef6\u5e76\u7531 SpringBoard \u63a5\u6536\u3002SpringBoard \u53ea\u63a5\u6536\u6309\u952e(\u9501\u5c4f/\u9759\u97f3\u7b49)\uff0c\u89e6\u6478\uff0c\u52a0\u901f\uff0c\u63a5\u8fd1\u4f20\u611f\u5668\u7b49\u51e0\u79cd Event\uff0c\u968f\u540e\u7528 mach port \u8f6c\u53d1\u7ed9\u9700\u8981\u7684 App \u8fdb\u7a0b\u3002\u968f\u540e\u82f9\u679c\u6ce8\u518c\u7684\u90a3\u4e2a Source1 \u5c31\u4f1a\u89e6\u53d1\u56de\u8c03\uff0c\u5e76\u8c03\u7528 _UIApplicationHandleEventQueue() \u8fdb\u884c\u5e94\u7528\u5185\u90e8\u7684\u5206\u53d1\u3002</p>\n<p>_UIApplicationHandleEventQueue() \u4f1a\u628a IOHIDEvent \u5904\u7406\u5e76\u5305\u88c5\u6210 UIEvent \u8fdb\u884c\u5904\u7406\u6216\u5206\u53d1\uff0c\u5176\u4e2d\u5305\u62ec\u8bc6\u522b UIGesture/\u5904\u7406\u5c4f\u5e55\u65cb\u8f6c/\u53d1\u9001\u7ed9 UIWindow \u7b49\u3002\u901a\u5e38\u4e8b\u4ef6\u6bd4\u5982 UIButton \u70b9\u51fb\u3001touchesBegin/Move/End/Cancel \u4e8b\u4ef6\u90fd\u662f\u5728\u8fd9\u4e2a\u56de\u8c03\u4e2d\u5b8c\u6210\u7684\u3002</p>\n<h4 id=\"44\">4.4 \u754c\u9762\u66f4\u65b0</h4>\n<p>\u5f53\u5728\u64cd\u4f5c UI \u65f6\uff0c\u6bd4\u5982\u6539\u53d8\u4e86 Frame\u3001\u66f4\u65b0\u4e86 UIView/CALayer \u7684\u5c42\u6b21\u65f6\uff0c\u6216\u8005\u624b\u52a8\u8c03\u7528\u4e86 UIView/CALayer \u7684 setNeedsLayout/setNeedsDisplay\u65b9\u6cd5\u540e\uff0c\u8fd9\u4e2a UIView/CALayer \u5c31\u88ab\u6807\u8bb0\u4e3a\u5f85\u5904\u7406\uff0c\u5e76\u88ab\u63d0\u4ea4\u5230\u4e00\u4e2a\u5168\u5c40\u7684\u5bb9\u5668\u53bb\u3002</p>\n<p>\u82f9\u679c\u6ce8\u518c\u4e86\u4e00\u4e2a Observer \u76d1\u542c BeforeWaiting(\u5373\u5c06\u8fdb\u5165\u4f11\u7720) \u548c Exit (\u5373\u5c06\u9000\u51faLoop) \u4e8b\u4ef6\uff0c\u56de\u8c03\u53bb\u6267\u884c\u4e00\u4e2a\u5f88\u957f\u7684\u51fd\u6570\uff1a _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()\u3002\u8fd9\u4e2a\u51fd\u6570\u91cc\u4f1a\u904d\u5386\u6240\u6709\u5f85\u5904\u7406\u7684 UIView/CAlayer \u4ee5\u6267\u884c\u5b9e\u9645\u7684\u7ed8\u5236\u548c\u8c03\u6574\uff0c\u5e76\u66f4\u65b0 UI \u754c\u9762\u3002</p>\n<h4 id=\"45-nstimer\">4.5 NSTimer \u5b9a\u65f6\u5668</h4>\n<p>NSTimer \u5176\u5b9e\u5c31\u662f CFRunLoopTimerRef\uff0c\u4ed6\u4eec\u4e4b\u95f4\u662f toll-free bridged \u7684\u3002\u4e00\u4e2a NSTimer \u6ce8\u518c\u5230 RunLoop \u540e\uff0cRunLoop \u4f1a\u4e3a\u5176\u91cd\u590d\u7684\u65f6\u95f4\u70b9\u6ce8\u518c\u597d\u4e8b\u4ef6\u3002\u4f8b\u5982 10:00, 10:10, 10:20 \u8fd9\u51e0\u4e2a\u65f6\u95f4\u70b9\u3002RunLoop\u4e3a\u4e86\u8282\u7701\u8d44\u6e90\uff0c\u5e76\u4e0d\u4f1a\u5728\u975e\u5e38\u51c6\u786e\u7684\u65f6\u95f4\u70b9\u56de\u8c03\u8fd9\u4e2aTimer\u3002Timer \u6709\u4e2a\u5c5e\u6027\u53eb\u505a Tolerance (\u5bbd\u5bb9\u5ea6)\uff0c\u6807\u793a\u4e86\u5f53\u65f6\u95f4\u70b9\u5230\u540e\uff0c\u5bb9\u8bb8\u6709\u591a\u5c11\u6700\u5927\u8bef\u5dee\u3002 \u5982\u679c\u67d0\u4e2a\u65f6\u95f4\u70b9\u88ab\u9519\u8fc7\u4e86\uff0c\u4f8b\u5982\u6267\u884c\u4e86\u4e00\u4e2a\u5f88\u957f\u7684\u4efb\u52a1\uff0c\u5219\u90a3\u4e2a\u65f6\u95f4\u70b9\u7684\u56de\u8c03\u4e5f\u4f1a\u8df3\u8fc7\u53bb\uff0c\u4e0d\u4f1a\u5ef6\u540e\u6267\u884c\u3002\u5c31\u6bd4\u5982\u7b49\u516c\u4ea4\uff0c\u5982\u679c 10:10 \u65f6\u6211\u5fd9\u7740\u73a9\u624b\u673a\u9519\u8fc7\u4e86\u90a3\u4e2a\u70b9\u7684\u516c\u4ea4\uff0c\u90a3\u6211\u53ea\u80fd\u7b49 10:20 \u8fd9\u4e00\u8d9f\u4e86\u3002</p>\n<p>CADisplayLink \u662f\u4e00\u4e2a\u548c\u5c4f\u5e55\u5237\u65b0\u7387\u4e00\u81f4\u7684\u5b9a\u65f6\u5668\uff08\u4f46\u5b9e\u9645\u5b9e\u73b0\u539f\u7406\u66f4\u590d\u6742\uff0c\u548c NSTimer \u5e76\u4e0d\u4e00\u6837\uff0c\u5176\u5185\u90e8\u5b9e\u9645\u662f\u64cd\u4f5c\u4e86\u4e00\u4e2a Source\uff09\u3002\u5982\u679c\u5728\u4e24\u6b21\u5c4f\u5e55\u5237\u65b0\u4e4b\u95f4\u6267\u884c\u4e86\u4e00\u4e2a\u957f\u4efb\u52a1\uff0c\u90a3\u5176\u4e2d\u5c31\u4f1a\u6709\u4e00\u5e27\u88ab\u8df3\u8fc7\u53bb\uff08\u548c NSTimer \u76f8\u4f3c\uff09\uff0c\u9020\u6210\u754c\u9762\u5361\u987f\u7684\u611f\u89c9\u3002\u5728\u5feb\u901f\u6ed1\u52a8TableView\u65f6\uff0c\u5373\u4f7f\u4e00\u5e27\u7684\u5361\u987f\u4e5f\u4f1a\u8ba9\u7528\u6237\u6709\u6240\u5bdf\u89c9\u3002Facebook \u5f00\u6e90\u7684 AsyncDisplayLink \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u754c\u9762\u5361\u987f\u7684\u95ee\u9898\uff0c\u5176\u5185\u90e8\u4e5f\u7528\u5230\u4e86 RunLoop\u3002</p>\n<h4 id=\"46-performselecter\">4.6 PerformSelecter</h4>\n<p>\u5f53\u8c03\u7528 NSObject \u7684 performSelecter:afterDelay: \u540e\uff0c\u5b9e\u9645\u4e0a\u5176\u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a Timer \u5e76\u6dfb\u52a0\u5230\u5f53\u524d\u7ebf\u7a0b\u7684 RunLoop \u4e2d\u3002\u6240\u4ee5\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u6ca1\u6709 RunLoop\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5931\u6548\u3002 \u5f53\u8c03\u7528 performSelector:onThread: \u65f6\uff0c\u5b9e\u9645\u4e0a\u5176\u4f1a\u521b\u5efa\u4e00\u4e2a Timer \u52a0\u5230\u5bf9\u5e94\u7684\u7ebf\u7a0b\u53bb\uff0c\u540c\u6837\u7684\uff0c\u5982\u679c\u5bf9\u5e94\u7ebf\u7a0b\u6ca1\u6709 RunLoop \u8be5\u65b9\u6cd5\u4e5f\u4f1a\u5931\u6548\u3002</p>\n<h4 id=\"47-ios-nsurlconnection\">4.7 iOS \u4e2d\u7684\u7f51\u7edc\u8bf7\u6c42 NSURLConnection</h4>\n<p>\u901a\u5e38\u4f7f\u7528 NSURLConnection \u65f6\uff0c\u4f60\u4f1a\u4f20\u5165\u4e00\u4e2a Delegate\uff0c\u5f53\u8c03\u7528\u4e86 [connection start] \u540e\uff0c\u8fd9\u4e2a Delegate \u5c31\u4f1a\u4e0d\u505c\u6536\u5230\u4e8b\u4ef6\u56de\u8c03\u3002\u5b9e\u9645\u4e0a\uff0cstart \u8fd9\u4e2a\u51fd\u6570\u7684\u5185\u90e8\u4f1a\u4f1a\u83b7\u53d6 CurrentRunLoop\uff0c\u7136\u540e\u5728\u5176\u4e2d\u7684 DefaultMode \u6dfb\u52a0\u4e864\u4e2a Source0 (\u5373\u9700\u8981\u624b\u52a8\u89e6\u53d1\u7684Source)\u3002CFMultiplexerSource \u662f\u8d1f\u8d23\u5404\u79cd Delegate \u56de\u8c03\u7684\uff0cCFHTTPCookieStorage \u662f\u5904\u7406\u5404\u79cd Cookie \u7684\u3002</p>\n<p>\u5f53\u5f00\u59cb\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 NSURLConnection \u521b\u5efa\u4e86\u4e24\u4e2a\u65b0\u7ebf\u7a0b\uff1acom.apple.NSURLConnectionLoader \u548c com.apple.CFSocket.private\u3002\u5176\u4e2d CFSocket \u7ebf\u7a0b\u662f\u5904\u7406\u5e95\u5c42 socket \u8fde\u63a5\u7684\u3002NSURLConnectionLoader \u8fd9\u4e2a\u7ebf\u7a0b\u5185\u90e8\u4f1a\u4f7f\u7528 RunLoop \u6765\u63a5\u6536\u5e95\u5c42 socket \u7684\u4e8b\u4ef6\uff0c\u5e76\u901a\u8fc7\u4e4b\u524d\u6dfb\u52a0\u7684 Source0 \u901a\u77e5\u5230\u4e0a\u5c42\u7684 Delegate\u3002</p>\n<p>NSURLConnectionLoader \u4e2d\u7684 RunLoop \u901a\u8fc7\u4e00\u4e9b\u57fa\u4e8e mach port \u7684 Source \u63a5\u6536\u6765\u81ea\u5e95\u5c42 CFSocket \u7684\u901a\u77e5\u3002\u5f53\u6536\u5230\u901a\u77e5\u540e\uff0c\u5176\u4f1a\u5728\u5408\u9002\u7684\u65f6\u673a\u5411 CFMultiplexerSource \u7b49 Source0 \u53d1\u9001\u901a\u77e5\uff0c\u540c\u65f6\u5524\u9192 Delegate \u7ebf\u7a0b\u7684 RunLoop \u6765\u8ba9\u5176\u5904\u7406\u8fd9\u4e9b\u901a\u77e5\u3002CFMultiplexerSource \u4f1a\u5728 Delegate \u7ebf\u7a0b\u7684 RunLoop \u5bf9 Delegate \u6267\u884c\u5b9e\u9645\u7684\u56de\u8c03\u3002</p>\n<h4 id=\"48-runloop-afnetworking\">4.8 RunLoop \u5728 AFNetworking \u7684\u5e94\u7528</h4>\n<p>AFNetworking \u662f\u7b2c\u4e09\u65b9\u6846\u67b6\uff0c\u57fa\u4e8e NSURLConnection \u7cfb\u7edf\u7f51\u7edc\u8bf7\u6c42\u6846\u67b6\u5c01\u88c5\u7684\u3002AFNetworking \u5e0c\u671b\u80fd\u5728\u540e\u53f0\u7ebf\u7a0b\u63a5\u6536 Delegate \u56de\u8c03\u3002\u4e3a\u6b64 AFNetworking \u5355\u72ec\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u4e2d\u542f\u52a8\u4e86\u4e00\u4e2a RunLoop\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">+ (void)networkRequestThreadEntryPoint:(id)__unused object {\n    @autoreleasepool {\n        [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];\n        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];\n        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];\n        [runLoop run];\n    }\n}\n\n\n+ (NSThread *)networkRequestThread {\n    static NSThread *_networkRequestThread = nil;\n    static dispatch_once_t oncePredicate;\n    dispatch_once(&amp;oncePredicate, ^{\n        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];\n        [_networkRequestThread start];\n    });\n    return _networkRequestThread;\n}\n</code></pre>\n\n<p>RunLoop \u542f\u52a8\u524d\u5185\u90e8\u5fc5\u987b\u8981\u6709\u81f3\u5c11\u4e00\u4e2a Timer/Observer/Source\uff0c\u6240\u4ee5 AFNetworking \u5728 [runLoop run] \u4e4b\u524d\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 NSMachPort \u6dfb\u52a0\u8fdb\u53bb\u4e86\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u8005\u9700\u8981\u6301\u6709\u8fd9\u4e2a NSMachPort (mach_port) \u5e76\u5728\u5916\u90e8\u7ebf\u7a0b\u901a\u8fc7\u8fd9\u4e2a port \u53d1\u9001\u6d88\u606f\u5230 loop \u5185\uff1b\u4f46\u6b64\u5904\u6dfb\u52a0 port \u53ea\u662f\u4e3a\u4e86\u8ba9 RunLoop \u4e0d\u81f3\u4e8e\u9000\u51fa\uff0c\u5e76\u6ca1\u6709\u7528\u4e8e\u5b9e\u9645\u7684\u53d1\u9001\u6d88\u606f\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">- (void)start {\n    [self.lock lock];\n    if ([self isCancelled]) {\n        [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];\n    } else if ([self isReady]) {\n        self.state = AFOperationExecutingState;\n        [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];\n    }\n    [self.lock unlock];\n}\n</code></pre>\n\n<p>\u5f53\u9700\u8981\u8fd9\u4e2a\u540e\u53f0\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u65f6\uff0cAFNetworking \u901a\u8fc7\u8c03\u7528 [NSObject performSelector:onThread:..] \u5c06\u8fd9\u4e2a\u4efb\u52a1\u6254\u5230\u4e86\u540e\u53f0\u7ebf\u7a0b\u7684 RunLoop \u4e2d\u3002</p>\n<p>\u6574\u7406\u51fa\u5904:<br />\n<a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">\u6df1\u5165\u7406\u89e3RunLoop</a></p>"}