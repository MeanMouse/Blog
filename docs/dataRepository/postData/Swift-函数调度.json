{"title": "Swift \u51fd\u6570\u8c03\u5ea6", "date": "2021-09-13 19:06:54", "categories": "iOS", "tags": "Swift", "keywords": "\u51fd\u6570\u8c03\u5ea6", "description": "", "images": "", "file_name": "Swift-\u51fd\u6570\u8c03\u5ea6", "short": " \u5728 OC \u4e2d\u65b9\u6cd5\u7684\u8c03\u7528\u662f\u8981\u7ecf\u8fc7 runtime \u6d88\u606f\u8f6c\u53d1\u673a\u5236\u627e\u5230\u65b9\u6cd5\u5b9e\u73b0\uff0c\u7136\u540e\u8c03\u7528\u65b9\u6cd5\u5b9e\u73b0\uff0c\u5728 Swift \u4e2d\u51fd\u6570\u7684\u8c03\u5ea6\u5206\u4e3a\u4e24\u79cd\uff1a\u9759\u6001\u8c03\u5ea6\u3001\u52a8\u6001\u8c03\u5ea6\u3002 \n ", "content": "<p>\u5728 OC \u4e2d\u65b9\u6cd5\u7684\u8c03\u7528\u662f\u8981\u7ecf\u8fc7 runtime \u6d88\u606f\u8f6c\u53d1\u673a\u5236\u627e\u5230\u65b9\u6cd5\u5b9e\u73b0\uff0c\u7136\u540e\u8c03\u7528\u65b9\u6cd5\u5b9e\u73b0\uff0c\u5728 Swift \u4e2d\u51fd\u6570\u7684\u8c03\u5ea6\u5206\u4e3a\u4e24\u79cd\uff1a\u9759\u6001\u8c03\u5ea6\u3001\u52a8\u6001\u8c03\u5ea6\u3002</p>\n<!-- more -->\n<h3 id=\"_1\">\u51fd\u6570\u8c03\u5ea6\u65b9\u5f0f</h3>\n<h4 id=\"_2\">\u9759\u6001\u8c03\u5ea6</h4>\n<p>\u9759\u6001\u8c03\u5ea6\u4e5f\u88ab\u79f0\u4e3a\u76f4\u63a5\u8c03\u5ea6\uff08Direct Dispatch\uff09\uff0c\u51fd\u6570\u5728\u7f16\u8bd1\u3001\u94fe\u63a5\u5b8c\u6210\u540e\uff0c\u51fd\u6570\u7684\u5730\u5740\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u51fd\u6570\u7684\u5730\u5740\u5b58\u653e\u5728\u4ee3\u7801\u6bb5\u3002\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230\u8fd9\u4e2a\u5730\u5740\u6765\u6267\u884c\uff0c\u56e0\u6b64\u5b83\u7684\u6548\u7387\u6700\u5feb\u3002</p>\n<h4 id=\"_3\">\u52a8\u6001\u8c03\u5ea6</h4>\n<p>\u5bf9\u4e8e\u52a8\u6001\u8c03\u5ea6\u7684\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u5b83\u7684\u5185\u5b58\u5730\u5740\uff0c\u6240\u4ee5\u65e0\u6cd5\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c\u53ef\u80fd\u5bfc\u81f4\u4e00\u4e9b\u6027\u80fd\u95ee\u9898\u7684\u51fa\u73b0\u3002\u52a8\u6001\u8c03\u5ea6\u53ef\u4ee5\u4e3a\u8986\u5199\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u63d0\u4f9b\u652f\u6301\uff0c\u4f7f\u5f97Swift\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002<br />\n\u52a8\u6001\u8c03\u5ea6\u53c8\u53ef\u5206\u4e3a\u73b0\u4e24\u79cd\uff1a</p>\n<h5 id=\"_4\">\u8868\u8c03\u5ea6</h5>\n<p>\u8868\u8c03\u5ea6\u662f\u7f16\u8bd1\u8bed\u8a00\u4e2d\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u4e4b\u4e00\uff0c\u5728\u7f16\u8bd1\u65f6\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u6784\u9020\u4e00\u4e2a v-table\uff0c\u5176\u4e2d\u5305\u542b\u7c7b\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u6307\u9488\uff0c\u62e5\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u5b50\u7c7b\u4f1a\u5728\u865a\u51fd\u6570\u8868\u5185\u901a\u8fc7\u7ee7\u627f\u987a\u5e8f\u53bb\u5c55\u793a\u865a\u51fd\u6570\u8868\u6307\u9488\u3002\u4e0e\u9759\u6001\u8c03\u5ea6\u76f8\u6bd4\uff0c\u8868\u8c03\u5ea6\u9700\u8981\u4e24\u6761\u989d\u5916\u7684\u6307\u4ee4\uff08\u8bfb\u548c\u8df3\u8f6c\uff09\u6765\u786e\u5b9a\u5728\u8fd0\u884c\u65f6\u51fd\u6570\u7684\u5730\u5740\u3002</p>\n<p>\u5bf9\u4e8e\u503c\u7c7b\u578b\u6765\u8bf4\uff0c\u5e76\u6ca1\u6709\u6784\u9020\u865a\u51fd\u6570\u8868\u6307\u9488\uff0c\u4f46\u5bf9\u4e8e\u5c5e\u4e8e\u7ed3\u6784\u4f53\u7684 Protocol\uff0cProtocol \u53ef\u4ee5\u62e5\u6709\u5c5e\u6027\u548c\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4e3a\u7ba1\u7406 Protocol \u7684\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u52a0\u5165\u4e86 The Protocol Witness Table (PWT) \u51fd\u6570\u8868\u7528\u4e8e\u534f\u8bae\u7c7b\u578b\u65b9\u6cd5\u7684\u8c03\u5ea6\u3002</p>\n<h5 id=\"_5\">\u6d88\u606f\u8c03\u5ea6</h5>\n<p>\u6d88\u606f\u8c03\u5ea6\u662f\u6700\u7075\u6d3b\u4e5f\u662f\u6700\u6162\u7684\u8c03\u5ea6\u6280\u672f\uff0c\u6700\u5feb\u662f\u5728\u65b9\u6cd5\u7f13\u5b58\u8868\u4e2d\u627e\u5230\u65b9\u6cd5\u5b9e\u73b0\uff0c\u6700\u6162\u7684\u65f6\u5019\uff0c\u8fd0\u884c\u65f6\u9700\u8981\u722c\u904d\u6574\u4e2a\u7c7b\u5c42\u6b21\u7ed3\u6784\uff0c\u7136\u540e\u5206\u6790\u662f\u5426\u52a8\u6001\u6dfb\u52a0\u4e86\u65b9\u6cd5\u5b9e\u73b0\uff0c\u662f\u5426\u63d0\u4f9b\u4e86\u5176\u4ed6\u5bf9\u8c61\u5904\u7406\uff0c\u662f\u5426\u6709\u6700\u540e\u7684\u5bb9\u9519\u5904\u7406\u3002Objective-C \u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u6d88\u606f\u8c03\u5ea6\uff0c\u5e76\u4e14\u8fd8\u901a\u8fc7 dynamic @objc \u5411 Swift \u63d0\u4f9b\u8fd0\u884c\u65f6\u529f\u80fd\u3002</p>\n<h3 id=\"_6\">\u7c7b\u7684\u51fd\u6570\u8c03\u5ea6\u65b9\u5f0f</h3>\n<pre class=\"codehilite\"><code class=\"language-swift\">/// main.swift\nclass Person {\n    func eat() {}\n    static func eat2() {}\n    class func eat3() {}\n    @objc func eat4() {}\n    dynamic func eat5() {}\n    @objc dynamic func eat6() {}\n}\nextension Person {\n    func ex_eat() { }\n    static func ex_eat2() {}\n    class func ex_eat3() {}\n    @objc func ex_eat4() {}\n    dynamic func ex_eat5() {}\n    @objc dynamic func ex_eat6() {}\n}\n\nlet p = Person()\np.eat()\nPerson.eat2()\nPerson.eat3()\np.eat4()\np.eat5()\np.eat6()\n\np.ex_eat()\nPerson.ex_eat2()\nPerson.ex_eat3()\np.ex_eat4()\np.ex_eat5()\np.ex_eat6()\n\nshell\u547d\u4ee4\uff1a swiftc -emit-sil main.swift \u751f\u6210SIL\u6e90\u6587\u4ef6\uff0c\u7b80\u5355\u5904\u7406\u5982\u4e0b\uff1a\n\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;) -&gt; Int32 {\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;):\n  %9 = class_method %8 : $Person, #Person.eat : (Person) -&gt; () -&gt; (), $@convention(method) (@guaranteed Person) -&gt; () // user: %10\n  %12 = function_ref @$s4main6PersonC4eat2yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %13\n  %15 = function_ref @$s4main6PersonC4eat3yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %16\n  %18 = class_method %17 : $Person, #Person.eat4 : (Person) -&gt; () -&gt; (), $@convention(method) (@guaranteed Person) -&gt; () // user: %19\n  %21 = class_method %20 : $Person, #Person.eat5 : (Person) -&gt; () -&gt; (), $@convention(method) (@guaranteed Person) -&gt; () // user: %22\n  %24 = objc_method %23 : $Person, #Person.eat6!foreign : (Person) -&gt; () -&gt; (), $@convention(objc_method) (Person) -&gt; () // user: %25\n  %27 = function_ref @$s4main6PersonC6ex_eatyyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %28\n  %30 = function_ref @$s4main6PersonC7ex_eat2yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %31\n  %33 = function_ref @$s4main6PersonC7ex_eat3yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %34\n  %36 = objc_method %35 : $Person, #Person.ex_eat4!foreign : (Person) -&gt; () -&gt; (), $@convention(objc_method) (Person) -&gt; () // user: %37\n  %39 = dynamic_function_ref @$s4main6PersonC7ex_eat5yyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %40\n  %42 = objc_method %41 : $Person, #Person.ex_eat6!foreign : (Person) -&gt; () -&gt; (), $@convention(objc_method) (Person) -&gt; () // user: %43\n\n  %45 = struct $Int32 (%44 : $Builtin.Int32)      // user: %46\n  return %45 : $Int32                             // id: %46\n} // end sil function 'main'\n\nsil_vtable Person {\n  #Person.eat: (Person) -&gt; () -&gt; () : @$s4main6PersonC3eatyyF   // Person.eat()\n  #Person.eat3: (Person.Type) -&gt; () -&gt; () : @$s4main6PersonC4eat3yyFZ   // static Person.eat3()\n  #Person.eat4: (Person) -&gt; () -&gt; () : @$s4main6PersonC4eat4yyF // Person.eat4()\n  #Person.eat5: (Person) -&gt; () -&gt; () : @$s4main6PersonC4eat5yyF // Person.eat5()\n  #Person.init!allocator: (Person.Type) -&gt; () -&gt; Person : @$s4main6PersonCACycf// Person.__allocating_init()\n  #Person.deinit!deallocator: @$s4main6PersonCfD    // Person.__deallocating_deinit\n}\n</code></pre>\n\n<p>\u4eceSIL\u6e90\u6587\u4ef6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6709\u4e09\u79cd\u8c03\u7528\u8c03\u5ea6\u65b9\u5f0f\uff1aclass_method\u3001function_ref\u3001objc_method\u3002</p>\n<p>\u9996\u5148\u4e86\u89e3\u4e00\u4e0b\u6c47\u7f16\u6307\u4ee4:</p>\n<pre class=\"codehilite\"><code>adrp: \u5730\u5740\u504f\u79fb\nblr: \u5e26\u8fd4\u56de\u7684\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230\u6307\u4ee4\u540e\u8fb9\u8ddf\u968f\u5bc4\u5b58\u5668\u4e2d\u4fdd\u5b58\u7684\u5730\u5740\u3002\nmov: \u5c06\u67d0\u4e00\u5bc4\u5b58\u5668\u7684\u503c\u590d\u5236\u5230\u53e6\u4e00\u5bc4\u5b58\u5668\uff08\u53ea\u80fd\u7528\u4e8e\u5bc4\u5b58\u5668\u548c\u5bc4\u5b58\u5668\u6216\u8005\u5bc4\u5b58\u5668\u4e0e\u5e38\u91cf\u4e4b\u95f4\u4f20\u503c\uff0c\u4e0d\u80fd\u7528\u4e8e\u5185\u5b58\u5730\u5740\uff09\u5982 mov x1 , x0 : \u5c06\u5bc4\u5b58\u5668 x0 \u7684\u503c\u590d\u5236\u5230\u5bc4\u5b58\u5668 x1 \u4e2d\nldr: \u5c06\u5185\u5b58\u4e2d\u7684\u503c\u8bfb\u53d6\u5230\u5bc4\u5b58\u5668\u4e2d ldr x0, [x1, x2] : \u5c06\u5185\u5b58 [x1 + x2] \u5904\u7684\u503c\u653e\u5165\u5bc4\u5b58\u5668 x0 \u4e2d\nstr: \u5c06\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5199\u5165\u5230\u5185\u5b58\u4e2d str x0, [x0, x8] : \u5c06\u5bc4\u5b58\u5668 x0 \u7684\u503c\u4fdd\u5b58\u5728\u5185\u5b58 [x0 + x8] \u5904\nbl: \u8df3\u8f6c\u5230\u67d0\u5730\u5740\n</code></pre>\n\n<p>\u6253\u65ad\u70b9\uff0c\u6c47\u7f16\u7f16\u8bd1\u8fc7\u7a0b\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code>    // p.eat()  class_method\n    -&gt; 0x100005fcc &lt;+56&gt;:  ldr    x9, [x8, #0x488] \n    0x100005fd0 &lt;+60&gt;:  ldr    x10, [x9]\n    0x100005fd4 &lt;+64&gt;:  ldr    x10, [x10, #0x50]\n    0x100005fd8 &lt;+68&gt;:  mov    x20, x9\n    0x100005fdc &lt;+72&gt;:  str    x8, [sp]\n    0x100005fe0 &lt;+76&gt;:  blr    x10\n    0x100005fe4 &lt;+80&gt;:  ldr    x20, [sp, #0x8]\n\n    // Person.eat2() function_ref\n    -&gt; 0x100005fe8 &lt;+84&gt;:  bl     0x1000060e0               ; static SwiftTest.Person.eat2() -&gt; () at main.swift:27\n    0x100005fec &lt;+88&gt;:  ldr    x20, [sp, #0x8]\n\n    // Person.eat3() function_ref\n    -&gt; 0x100005ff0 &lt;+92&gt;:  bl     0x1000060f4               ; static SwiftTest.Person.eat3() -&gt; () at main.swift:28\n    0x100005ff4 &lt;+96&gt;:  ldr    x8, [sp]\n\n    // p.eat4() class_method\n    -&gt; 0x100005ff8 &lt;+100&gt;: ldr    x9, [x8, #0x488]\n    0x100005ffc &lt;+104&gt;: ldr    x10, [x9]\n    0x100006000 &lt;+108&gt;: ldr    x10, [x10, #0x60]\n    0x100006004 &lt;+112&gt;: mov    x20, x9\n    0x100006008 &lt;+116&gt;: blr    x10\n    0x10000600c &lt;+120&gt;: ldr    x8, [sp]\n\n    // p.eat5() class_method\n    -&gt; 0x100006010 &lt;+124&gt;: ldr    x9, [x8, #0x488]\n    0x100006014 &lt;+128&gt;: ldr    x10, [x9]\n    0x100006018 &lt;+132&gt;: ldr    x10, [x10, #0x68]\n    0x10000601c &lt;+136&gt;: mov    x20, x9\n    0x100006020 &lt;+140&gt;: blr    x10\n    0x100006024 &lt;+144&gt;: ldr    x8, [sp]\n\n    // p.eat6() objc_method\n    -&gt; 0x100006028 &lt;+148&gt;: ldr    x0, [x8, #0x488]\n    0x10000602c &lt;+152&gt;: adrp   x9, 18\n    0x100006030 &lt;+156&gt;: ldr    x9, [x9, #0xa40]\n    0x100006034 &lt;+160&gt;: mov    x1, x9\n    0x100006038 &lt;+164&gt;: bl     0x100011bd0               ; symbol stub for: objc_msgSend\n    0x10000603c &lt;+168&gt;: ldr    x8, [sp]\n\n    // p.ex_eat() function_ref\n    -&gt; 0x100006040 &lt;+172&gt;: ldr    x20, [x8, #0x488]\n    0x100006044 &lt;+176&gt;: bl     0x1000062ac               ; SwiftTest.Person.ex_eat() -&gt; () at main.swift:34\n    0x100006048 &lt;+180&gt;: ldr    x20, [sp, #0x8]\n\n    // Person.ex_eat2() function_ref\n    -&gt; 0x10000604c &lt;+184&gt;: bl     0x1000062c0               ; static SwiftTest.Person.ex_eat2() -&gt; () at main.swift:35\n    0x100006050 &lt;+188&gt;: ldr    x20, [sp, #0x8]\n\n    // Person.ex_eat3() function_ref\n    -&gt; 0x100006054 &lt;+192&gt;: bl     0x1000062d4               ; static SwiftTest.Person.ex_eat3() -&gt; () at main.swift:36\n    0x100006058 &lt;+196&gt;: ldr    x8, [sp]\n\n    // p.ex_eat4() objc_method\n    -&gt; 0x10000605c &lt;+200&gt;: ldr    x0, [x8, #0x488]\n    0x100006060 &lt;+204&gt;: adrp   x9, 18\n    0x100006064 &lt;+208&gt;: ldr    x1, [x9, #0xa48]\n    0x100006068 &lt;+212&gt;: bl     0x100011bd0               ; symbol stub for: objc_msgSend\n    0x10000606c &lt;+216&gt;: ldr    x8, [sp]\n\n    // p.ex_eat5() function_ref\n    -&gt; 0x100006070 &lt;+220&gt;: ldr    x20, [x8, #0x488]\n    0x100006074 &lt;+224&gt;: bl     0x100006338               ; SwiftTest.Person.ex_eat5() -&gt; () at main.swift:38\n    0x100006078 &lt;+228&gt;: ldr    x8, [sp]\n\n    // p.ex_eat6() objc_method\n    -&gt; 0x10000607c &lt;+232&gt;: ldr    x0, [x8, #0x488]\n    0x100006080 &lt;+236&gt;: adrp   x9, 18\n    0x100006084 &lt;+240&gt;: ldr    x1, [x9, #0xa50]\n    0x100006088 &lt;+244&gt;: bl     0x100011bd0               ; symbol stub for: objc_msgSend\n</code></pre>\n\n<p>\u53ef\u4ee5\u770b\u51fa\uff1a</p>\n<ul>\n<li>function_ref \u9759\u6001\u8c03\u5ea6</li>\n<li>class_method \u8868\u8c03\u5ea6</li>\n<li>objc_method \u6d88\u606f\u8c03\u5ea6</li>\n</ul>\n<p>\u5728\u7c7b\u4e2d\uff0c\u5bf9\u4e8e static\u3001class \u4fee\u9970\u7684\u51fd\u6570\u91c7\u7528\u7684\u662f\u9759\u6001\u8c03\u5ea6\uff0c@objc dynamic \u7ec4\u5408\u4fee\u9970\u7684\u51fd\u6570\u91c7\u7528\u6d88\u606f\u8c03\u5ea6\uff0c\u5176\u4ed6\u7684\u51fd\u6570\u91c7\u7528\u8868\u8c03\u5ea6\u3002\u5728\u7c7b\u7684 extension \u4e2d\uff0cobjc \u548c objc dynamic \u4fee\u9970\u7684\u51fd\u6570\u91c7\u7528\u7684\u662f\u6d88\u606f\u8c03\u5ea6\uff0c\u5176\u4ed6\u7684\u51fd\u6570\u91c7\u7528\u9759\u6001\u8c03\u5ea6\u3002</p>\n<h4 id=\"sil_vtable\">sil_vtable</h4>\n<p>sil_vtable SIL\u6e90\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">// swift-main/docs/SIL.rst\ndecl ::= sil-vtable\nsil-vtable ::= 'sil_vtable' identifier '{' sil-vtable-entry* '}'\n\nsil-vtable-entry ::= sil-decl-ref ':' sil-linkage? sil-function-name\n\nSIL represents dynamic dispatch for class methods using the `class_method`_,\n`super_method`_, `objc_method`_, and `objc_super_method`_ instructions.\n\nThe potential destinations for `class_method`_ and `super_method`_ are\ntracked in ``sil_vtable`` declarations for every class type. The declaration\ncontains a mapping from every method of the class (including those inherited\nfrom its base class) to the SIL function that implements the method for that\nclass::\n\n  class A {\n    func foo()\n    func bar()\n    func bas()\n  }\n\n  sil @A_foo : $@convention(thin) (@owned A) -&gt; ()\n  sil @A_bar : $@convention(thin) (@owned A) -&gt; ()\n  sil @A_bas : $@convention(thin) (@owned A) -&gt; ()\n\n  sil_vtable A {\n    #A.foo: @A_foo\n    #A.bar: @A_bar\n    #A.bas: @A_bas\n  }\n\n  class B : A {\n    func bar()\n  }\n\n  sil @B_bar : $@convention(thin) (@owned B) -&gt; ()\n\n  sil_vtable B {\n    #A.foo: @A_foo\n    #A.bar: @B_bar\n    #A.bas: @A_bas\n  }\n\n  class C : B {\n    func bas()\n  }\n\n  sil @C_bas : $@convention(thin) (@owned C) -&gt; ()\n\n  sil_vtable C {\n    #A.foo: @A_foo\n    #A.bar: @B_bar\n    #A.bas: @C_bas\n  }\n</code></pre>\n\n<p>\u4ece\u6e90\u7801\u6ce8\u91ca\u4e2d\u53ef\u5f97\u77e5\uff0c\u5728\u7c7b\u4e2d class_method\u3001super_method\u3001objc_method \u548c objc_super_method \u90fd\u91c7\u7528\u52a8\u6001\u8c03\u5ea6\u3002\u7c7b\u7684\u6bcf\u4e2a\u51fd\u6570\u548c\u7ee7\u627f\u7684\u51fd\u6570\uff0c\u90fd\u5728 sil_vtable \u4e2d\u6620\u5c04\u76f8\u5bf9\u5e94\u7684\u51fd\u6570\u5b9e\u73b0\u3002swift \u7684 AST \u8bb0\u5f55\u4e86\u91cd\u8f7d\u5173\u7cfb\uff0cvtable\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u662f\u6307\u5411\u6700\u540e\u7684\u884d\u751f\u7c7b\u7684\u51fd\u6570\u3002\u4e3a\u4e86\u6807\u660e\u91cd\u8f7d\u51fd\u6570\u7684\u6240\u5c5e\uff0c\u4f7f\u7528\u4e86\u539f\u59cb\u7c7b\u540d\u4f5c\u4e3a\u524d\u7f00\u3002</p>\n<p>\u518d\u770b\u4e00\u4e0b\u7c7b\u7684 v-table \u7684\u521d\u59cb\u5316\u6d41\u7a0b</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">static void initClassVTable(ClassMetadata *self) {\n  const auto *description = self-&gt;getDescription();\n  auto *classWords = reinterpret_cast&lt;void **&gt;(self);\n\n  if (description-&gt;hasVTable()) {\n    auto *vtable = description-&gt;getVTableDescriptor();\n    auto vtableOffset = vtable-&gt;getVTableOffset(description);\n    auto descriptors = description-&gt;getMethodDescriptors();\n    for (unsigned i = 0, e = vtable-&gt;VTableSize; i &lt; e; ++i) {\n      auto &amp;methodDescription = descriptors[i];\n      swift_ptrauth_init_code_or_data(\n          &amp;classWords[vtableOffset + i], methodDescription.Impl.get(),\n          methodDescription.Flags.getExtraDiscriminator(),\n          !methodDescription.Flags.isAsync());\n    }\n  }\n  ...\n}\n</code></pre>\n\n<p>\u53ef\u4ee5\u770b\u51fa v-table \u662f\u4e00\u4e2a\u6570\u7ec4\u7ed3\u6784\uff0c\u91cc\u9762\u5b58\u653e\u7740\u51fd\u6570\u6307\u9488\u6570\u7ec4\uff0c\u901a\u8fc7 vtableOffset + i \u504f\u79fb\u83b7\u53d6\u51fd\u6570\u3002</p>\n<h3 id=\"_7\">\u7ed3\u6784\u4f53\u7684\u51fd\u6570\u8c03\u5ea6\u65b9\u5f0f</h3>\n<pre class=\"codehilite\"><code class=\"language-swift\">struct TestStruct {\n    func test() {}\n    static func test2() {}\n}\nextension TestStruct {\n    func ex_test() { }\n    static func ex_test2() {}\n}\n\nlet s = TestStruct()\ns.test()\nTestStruct.test2()\n\ns.ex_test()\nTestStruct.ex_test2()\n\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;) -&gt; Int32 {\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;):\n\n  %9 = function_ref @$s4main10TestStructV4testyyF : $@convention(method) (TestStruct) -&gt; () // user: %10\n\n  %12 = function_ref @$s4main10TestStructV5test2yyFZ : $@convention(method) (@thin TestStruct.Type) -&gt; () // user: %13\n\n  %15 = function_ref @$s4main10TestStructV7ex_testyyF : $@convention(method) (TestStruct) -&gt; () // user: %16\n\n  %18 = function_ref @$s4main10TestStructV8ex_test2yyFZ : $@convention(method) (@thin TestStruct.Type) -&gt; () // user: %19\n\n  %21 = struct $Int32 (%20 : $Builtin.Int32)      // user: %22\n  return %21 : $Int32                             // id: %22\n} // end sil function 'main'\n</code></pre>\n\n<p>\u7531\u4e0a\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u9759\u6001\u8c03\u5ea6\u3002</p>\n<h3 id=\"_8\">\u534f\u8bae\u7684\u51fd\u6570\u8c03\u5ea6\u65b9\u5f0f</h3>\n<pre class=\"codehilite\"><code class=\"language-swift\">// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;) -&gt; Int32 {\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;):\n\n  // function_ref RunProtocol.run()\n  %9 = open_existential_addr immutable_access %3 : $*RunProtocol to $*@opened(&quot;5B499E10-11DF-11EC-A870-1E00231ED685&quot;) RunProtocol // users: %11, %11, %10\n  %10 = witness_method $@opened(&quot;5B499E10-11DF-11EC-A870-1E00231ED685&quot;) RunProtocol, #RunProtocol.run : &lt;Self where Self : RunProtocol&gt; (Self) -&gt; () -&gt; (), %9 : $*@opened(&quot;5B499E10-11DF-11EC-A870-1E00231ED685&quot;) RunProtocol : $@convention(witness_method: RunProtocol) &lt;\u03c4_0_0 where \u03c4_0_0 : RunProtocol&gt; (@in_guaranteed \u03c4_0_0) -&gt; () // type-defs: %9; user: %11\n\n  // function_ref RunProtocol.ex_run()\n  %13 = function_ref @$s4main11RunProtocolPAAE6ex_runyyF : $@convention(method) &lt;\u03c4_0_0 where \u03c4_0_0 : RunProtocol&gt; (@in_guaranteed \u03c4_0_0) -&gt; () // user: %14\n  %14 = apply %13&lt;@opened(&quot;5B499FBE-11DF-11EC-A870-1E00231ED685&quot;) RunProtocol&gt;(%12) : $@convention(method) &lt;\u03c4_0_0 where \u03c4_0_0 : RunProtocol&gt; (@in_guaranteed \u03c4_0_0) -&gt; () // type-defs: %12\n\n  %16 = struct $Int32 (%15 : $Builtin.Int32)      // user: %17\n  return %16 : $Int32                             // id: %17\n} // end sil function 'main'\n</code></pre>\n\n<p>\u4ece\u4e0a\u9762\u7684SIL\u6e90\u7801\u770b\uff0c\u5bf9\u4e8e protocol \u7684\u6269\u5c55\u51fd\u6570 ex_run() \u8c03\u7528\u91c7\u7528\u7684\u662f\u9759\u6001\u8c03\u5ea6\uff0c\u800c run() \u91c7\u7528\u7684\u662f witness_method \u7684\u8c03\u5ea6\u65b9\u5f0f\u3002</p>\n<p>witness_method \u91c7\u7528\u7684\u662f Protocol Witness Table(\u7b80\u79f0PWT)\u8c03\u5ea6\uff0c\u548c v-table \u4e00\u6837, PWT \u5185\u5b58\u50a8\u7684\u662f\u65b9\u6cd5\u6570\u7ec4\uff0c\u91cc\u9762\u5305\u542b\u4e86\u51fd\u6570\u5b9e\u73b0\u7684\u6307\u9488\u5730\u5740\uff0c\u8c03\u5ea6\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u83b7\u53d6\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u548c\u51fd\u6570\u7684 offset \u53bb\u67e5\u627e\u7684\u3002</p>\n<h4 id=\"sil-witness-table\">sil-witness-table</h4>\n<pre class=\"codehilite\"><code class=\"language-swift\">// swift-main/docs/SIL.rst\n\ndecl ::= sil-witness-table\nsil-witness-table ::= 'sil_witness_table' sil-linkage?\n normal-protocol-conformance '{' sil-witness-entry* '}'\n</code></pre>\n\n<p>SIL \u5c06\u901a\u7528\u7c7b\u578b\u52a8\u6001\u5206\u6d3e\u6240\u9700\u7684\u4fe1\u606f\u7f16\u7801\u4e3a witness table\uff0c\u8fd9\u4e9b\u4fe1\u606f\u7528\u4e8e\u5728\u751f\u6210\u4e8c\u8fdb\u5236\u7801\u65f6\u4ea7\u751f\u8fd0\u884c\u65f6\u5206\u914d\u8868 (runtime dispatch table)\u3002\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bf9\u7279\u5b9a\u901a\u7528\u51fd\u6570\u7684 SIL \u4f18\u5316\u3002\u6bcf\u4e2a\u660e\u786e\u7684\u4e00\u81f4\u6027\u58f0\u660e\u90fd\u4f1a\u4ea7\u751f witness table\u3002\u901a\u7528\u7c7b\u578b\u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u4e00\u4e2a\u901a\u7528 witness table\uff0c\u884d\u751f\u7c7b\u4f1a\u7ee7\u627f\u57fa\u7c7b\u7684 witness table\u3002</p>\n<p>\u770b\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\uff0c\u7ed3\u679c\u4f1a\u8f93\u51fa\u4ec0\u4e48\u5462\uff1f</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">protocol RunProtocol {\n    func run()\n}\nextension RunProtocol {\n    func run() {\n        print(&quot;extension run&quot;)\n    }\n}\nclass ProtocolStructTest: RunProtocol { }\n\nclass ProtocolStructTestSuper: ProtocolStructTest {\n    func run() {\n        print(&quot;sadda&quot;)\n    }\n}\n\nlet structTestSuper: ProtocolStructTestSuper = ProtocolStructTestSuper()\nlet structTestSuper2: RunProtocol = ProtocolStructTestSuper()\nstructTestSuper.run()\nstructTestSuper2.run()\n\n\u8f93\u51fa\uff1a\nsadda\nextension run\n</code></pre>\n\n<p>structTestSuper.run() \u8c03\u7528\u8005\u662f ProtocolStructTestSuper \u7c7b\u578b\uff0c\u91c7\u7528 class_method \u65b9\u5f0f\u8c03\u5ea6\uff0c\u6240\u4ee5\u6253\u5370\uff1asadda\u3002structTestSuper2.run() \u8c03\u7528<br />\n\u8005\u662f RunProtocol \u534f\u8bae\u7c7b\u578b\uff0c\u91c7\u7528 witness_method \u65b9\u5f0f\u8c03\u5ea6\uff0c\u7531\u4e8e\u7236\u7c7b ProtocolStructTest \u63a5\u53d7 RunProtocol \u534f\u8bae\u5e76\u91c7\u7528\u534f\u8bae\u7684\u9ed8\u8ba4\u5b9e\u73b0\u65b9\u5f0f\uff0c\u534f\u8bae\u7684\u9ed8\u8ba4\u5b9e\u73b0\u51fd\u6570\u5b58\u653e\u5728 RunProtocol \u7684 witness Table \uff0c\u56e0\u6b64 ProtocolStructTest \u7684\u865a\u51fd\u6570\u8868\u4e2d\u6ca1\u6709\u8be5\u51fd\u6570\uff0c\u5b50\u7c7b ProtocolStructTestSuper \u4e5f\u65e0\u6cd5\u7ee7\u627f\u5230\u8be5\u51fd\u6570\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">sil_vtable ProtocolStructTest {\n  #ProtocolStructTest.init!allocator: (ProtocolStructTest.Type) -&gt; () -&gt; ProtocolStructTest : @$s4main18ProtocolStructTestCACycfC   // ProtocolStructTest.__allocating_init()\n  #ProtocolStructTest.deinit!deallocator: @$s4main18ProtocolStructTestCfD   // ProtocolStructTest.__deallocating_deinit\n}\n\nsil_vtable ProtocolStructTestSuper {\n  #ProtocolStructTest.init!allocator: (ProtocolStructTest.Type) -&gt; () -&gt; ProtocolStructTest : @$s4main23ProtocolStructTestSuperCACycfC [override]   // ProtocolStructTestSuper.__allocating_init()\n  #ProtocolStructTestSuper.run: (ProtocolStructTestSuper) -&gt; () -&gt; () : @$s4main23ProtocolStructTestSuperC3runyyF   // ProtocolStructTestSuper.run()\n  #ProtocolStructTestSuper.deinit!deallocator: @$s4main23ProtocolStructTestSuperCfD // ProtocolStructTestSuper.__deallocating_deinit\n}\n\nsil_witness_table hidden ProtocolStructTest: RunProtocol module main {\n  method #RunProtocol.run: &lt;Self where Self : RunProtocol&gt; (Self) -&gt; () -&gt; () : @$s4main18ProtocolStructTestCAA03RunB0A2aDP3runyyFTW    // protocol witness for RunProtocol.run() in conformance ProtocolStructTest\n}\n</code></pre>\n\n<p>\u5b50\u7c7b ProtocolStructTestSuper \u4e2d\u5b9e\u73b0\u7684 run() \u51fd\u6570\u5e76\u4e0d\u662f\u5bf9 RunProtocol \u534f\u8bae\u65b9\u6cd5\u5b9e\u73b0\uff0c\u53ea\u662f ProtocolStructTestSuper \u7684\u6210\u5458\u51fd\u6570\u800c\u5df2\uff0c\u6240\u4ee5 witness_method \u8c03\u5ea6\u65f6\uff0c\u53d1\u73b0\u5b50\u7c7b ProtocolStructTestSuper \u6ca1\u6709 sil_witness_table\uff0c\u5230\u7236\u7c7b ProtocolStructTest \u65f6\uff0c\u4ece\u7236\u7c7b\u7684 sil_witness_table \u627e\u5230 RunProtocol.run() \u51fd\u6570\u5b9e\u73b0\u5730\u5740\u8c03\u7528\uff0c\u8f93\u51fa\uff1aextension run\u3002</p>\n<h3 id=\"final\">final \u5173\u952e\u5b57</h3>\n<p>\u7528 final \u5173\u952e\u5b57\u4fee\u9970\uff0c\u8868\u793a\u4e0d\u5141\u8bb8\u5bf9\u5176\u4fee\u9970\u7684\u5185\u5bb9\u8fdb\u884c\u7ee7\u627f\u6216\u8005\u91cd\u65b0\u64cd\u4f5c\u3002\u5f53\u7528 final \u4fee\u9970\u7c7b\u65f6\uff0c\u5c31\u65e0\u6cd5\u5bf9\u7c7b\u8fdb\u884c\u7ee7\u627f\u4ee5\u53ca\u5bf9\u51fd\u6570\u7684\u91cd\u5199\uff0c\u90a3\u5bf9\u4e8e\u51fd\u6570\u8c03\u5ea6\u6709\u4ec0\u4e48\u6837\u7684\u5f71\u54cd\u5462\uff1f</p>\n<pre class=\"codehilite\"><code class=\"language-swift\">final class Person {\n    func eat() {}\n    static func eat2() {}\n    class func eat3() {}\n    @objc func eat4() {}\n    dynamic func eat5() {}\n    @objc dynamic func eat6() {}\n}\nextension Person {\n    func ex_eat() { }\n    static func ex_eat2() {}\n    class func ex_eat3() {}\n    @objc func ex_eat4() {}\n    dynamic func ex_eat5() {}\n    @objc dynamic func ex_eat6() {}\n\n}\n\n// SIL \u6e90\u7801\n\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;) -&gt; Int32 {\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer&lt;Optional&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;&gt;):\n\n  // function_ref Person.eat()\n  %9 = function_ref @$s4main6PersonC3eatyyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %10\n  %10 = apply %9(%8) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %11 = metatype $@thick Person.Type              // user: %13\n  // function_ref static Person.eat2()\n  %12 = function_ref @$s4main6PersonC4eat2yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %13\n  %13 = apply %12(%11) : $@convention(method) (@thick Person.Type) -&gt; ()\n  %14 = metatype $@thick Person.Type              // user: %16\n  // function_ref static Person.eat3()\n  %15 = function_ref @$s4main6PersonC4eat3yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %16\n  %16 = apply %15(%14) : $@convention(method) (@thick Person.Type) -&gt; ()\n  %17 = load %3 : $*Person                        // user: %19\n  // function_ref Person.eat4()\n  %18 = function_ref @$s4main6PersonC4eat4yyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %19\n  %19 = apply %18(%17) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %20 = load %3 : $*Person                        // user: %22\n  // dynamic_function_ref Person.eat5()\n  %21 = dynamic_function_ref @$s4main6PersonC4eat5yyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %22\n  %22 = apply %21(%20) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %23 = load %3 : $*Person                        // users: %24, %25\n  %24 = objc_method %23 : $Person, #Person.eat6!foreign : (Person) -&gt; () -&gt; (), $@convention(objc_method) (Person) -&gt; () // user: %25\n  %25 = apply %24(%23) : $@convention(objc_method) (Person) -&gt; ()\n  %26 = load %3 : $*Person                        // user: %28\n  // function_ref Person.ex_eat()\n  %27 = function_ref @$s4main6PersonC6ex_eatyyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %28\n  %28 = apply %27(%26) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %29 = metatype $@thick Person.Type              // user: %31\n  // function_ref static Person.ex_eat2()\n  %30 = function_ref @$s4main6PersonC7ex_eat2yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %31\n  %31 = apply %30(%29) : $@convention(method) (@thick Person.Type) -&gt; ()\n  %32 = metatype $@thick Person.Type              // user: %34\n  // function_ref static Person.ex_eat3()\n  %33 = function_ref @$s4main6PersonC7ex_eat3yyFZ : $@convention(method) (@thick Person.Type) -&gt; () // user: %34\n  %34 = apply %33(%32) : $@convention(method) (@thick Person.Type) -&gt; ()\n  %35 = load %3 : $*Person                        // user: %37\n  // function_ref Person.ex_eat4()\n  %36 = function_ref @$s4main6PersonC7ex_eat4yyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %37\n  %37 = apply %36(%35) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %38 = load %3 : $*Person                        // user: %40\n  // dynamic_function_ref Person.ex_eat5()\n  %39 = dynamic_function_ref @$s4main6PersonC7ex_eat5yyF : $@convention(method) (@guaranteed Person) -&gt; () // user: %40\n  %40 = apply %39(%38) : $@convention(method) (@guaranteed Person) -&gt; ()\n  %41 = load %3 : $*Person                        // users: %42, %43\n  %42 = objc_method %41 : $Person, #Person.ex_eat6!foreign : (Person) -&gt; () -&gt; (), $@convention(objc_method) (Person) -&gt; () // user: %43\n  %43 = apply %42(%41) : $@convention(objc_method) (Person) -&gt; ()\n  %44 = integer_literal $Builtin.Int32, 0         // user: %45\n  %45 = struct $Int32 (%44 : $Builtin.Int32)      // user: %46\n  return %45 : $Int32                             // id: %46\n} // end sil function 'main'\n</code></pre>\n\n<p>\u53ef\u4ee5\u770b\u51fa\uff0c\u7528 final \u4fee\u9970\u540e\uff0c\u9664 @objc dynamic \u4fee\u9970\u7684\u51fd\u6570\u8fd8\u662f\u91c7\u7528 objc_method \u8c03\u5ea6\uff0c\u5176\u4ed6\u7684\u51fd\u6570\u90fd\u91c7\u7528\u9759\u6001\u8c03\u5ea6\u3002\u867d\u7136\u9759\u6001\u8c03\u5ea6\u6548\u7387\u9ad8\uff0c\u4f46\u4e5f\u4e0d\u80fd\u56e0\u6b64\u8fc7\u5ea6\u4f7f\u7528 final\uff0c <br />\n\u5bf9\u4e8e\u4e0d\u5e0c\u671b\u88ab\u7ee7\u627f\u548c\u91cd\u5199\u7684\u7c7b\u53ef\u4ee5\u4f7f\u7528\u8be5\u5173\u952e\u8bcd\uff0c\u63d0\u9ad8\u51fd\u6570\u7684\u8c03\u7528\u6548\u7387\u3002</p>"}