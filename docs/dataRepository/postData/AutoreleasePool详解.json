{"title": "AutoreleasePool\u8be6\u89e3", "date": "2022-03-11 16:25:19", "categories": "iOS", "tags": "AutoreleasePool", "keywords": "AutoreleasePool,Autorelease,\u5185\u5b58\u7ba1\u7406", "description": "", "images": "", "file_name": "AutoreleasePool\u8be6\u89e3", "short": " \u4e00\u3001\u524d\u8a00 \n iOS \u7684\u5185\u5b58\u7ba1\u7406\u662f\u901a\u8fc7\u5f15\u7528\u8ba1\u6570\u7ba1\u7406\u7684\uff0c\u5f53\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\uff0c\u8bf4\u660e\u8be5\u5bf9\u8c61\u8981\u91ca\u653e\u56de\u6536\u5185\u5b58\u4e86\u3002\u5728 iOS 5 \u4e4b\u524d\uff0c\u5185\u5b58\u7ba1\u7406\u662f\u9700\u8981\u5f00\u53d1\u8005\u8d1f\u8d23\u7684\uff0c\u9700\u8981\u624b\u52a8\u8c03\u7528 retain\u3001release\u3001autorelease \u53bb\u64cd\u4f5c\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u8fd9\u79cd\u624b\u52a8\u7ba1\u7406\u6a21\u5f0f\u79f0\u4e3a MRC\uff08Manual Reference Counting\uff09\u3002iOS 5 \u540e\u5f15\u5165 ARC\uff08Automatic Reference Counting\uff09\uff0cLLVM \u7f16\u8bd1\u5668\u4f1a\u5728\u7f16\u8bd1\u65f6\u81ea\u52a8\u63d2\u5165 retain\u3001release\u3001autorelease \u7684\u8c03\u7528\u65b9\u6cd5\u3002autorelease \u6807\u8bb0\u7684\u5bf9\u8c61\u4f1a\u6dfb\u52a0\u5230 AutoreleasePool\uff0c\u7531 AutoreleasePool \u7ba1\u7406\u5185\u5b58\u91ca\u653e\u3002 \n ", "content": "<h3 id=\"_1\">\u4e00\u3001\u524d\u8a00</h3>\n<p>iOS \u7684\u5185\u5b58\u7ba1\u7406\u662f\u901a\u8fc7\u5f15\u7528\u8ba1\u6570\u7ba1\u7406\u7684\uff0c\u5f53\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\uff0c\u8bf4\u660e\u8be5\u5bf9\u8c61\u8981\u91ca\u653e\u56de\u6536\u5185\u5b58\u4e86\u3002\u5728 iOS 5 \u4e4b\u524d\uff0c\u5185\u5b58\u7ba1\u7406\u662f\u9700\u8981\u5f00\u53d1\u8005\u8d1f\u8d23\u7684\uff0c\u9700\u8981\u624b\u52a8\u8c03\u7528 retain\u3001release\u3001autorelease \u53bb\u64cd\u4f5c\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u8fd9\u79cd\u624b\u52a8\u7ba1\u7406\u6a21\u5f0f\u79f0\u4e3a MRC\uff08Manual Reference Counting\uff09\u3002iOS 5 \u540e\u5f15\u5165 ARC\uff08Automatic Reference Counting\uff09\uff0cLLVM \u7f16\u8bd1\u5668\u4f1a\u5728\u7f16\u8bd1\u65f6\u81ea\u52a8\u63d2\u5165 retain\u3001release\u3001autorelease \u7684\u8c03\u7528\u65b9\u6cd5\u3002autorelease \u6807\u8bb0\u7684\u5bf9\u8c61\u4f1a\u6dfb\u52a0\u5230 AutoreleasePool\uff0c\u7531 AutoreleasePool \u7ba1\u7406\u5185\u5b58\u91ca\u653e\u3002</p>\n<!-- more -->\n<h3 id=\"autoreleasepool\">\u4e8c\u3001AutoreleasePool \u662f\u4ec0\u4e48\uff1f</h3>\n<h4 id=\"21\">2.1  \u521b\u5efa\u81ea\u52a8\u91ca\u653e\u6c60</h4>\n<p>\u5728 MRC \u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 NSAutoreleasePool \u6216\u8005@autoreleasepool \u53bb\u624b\u52a8\u521b\u5efa\u4e00\u4e2a AutoreleasePool</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\nClass *obj = [[Class alloc] init];\n/// \u52a0\u5165 pool\n[obj autorelease];\n[pool release]\n</code></pre>\n\n<p>\u5728 ARC \u4e0b\uff0c\u5df2\u7ecf\u7981\u6b62\u4f7f\u7528 NSAutoreleasePool \u7c7b\u4ee5\u53ca retain\u3001release\u3001autorelease \u7b49\u8c03\u7528\u65b9\u6cd5\uff0c\u53ea\u80fd\u901a\u8fc7 @autoreleasepool \u521b\u5efa\u81ea\u52a8\u91ca\u653e\u6c60\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">@autoreleasepool {\n    /// \u62ec\u53f7\u4e2d\uff0c\u5b58\u5728 autorelease \u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u52a0\u5165 pool \u4e2d\u3002\n}\n</code></pre>\n\n<h4 id=\"22-autoreleasepool\">2.2  @autoreleasepool \u6e90\u7801\u5206\u6790</h4>\n<p>\u6211\u4eec\u4f30\u8ba1\u5e73\u65f6\u5f88\u5c11\u4f7f\u7528 @autoreleasepool \u663e\u5f0f\u521b\u5efa AutoreleasePool\uff0c\u5728\u5de5\u7a0b\u7684 Main \u6587\u4ef6\uff0c\u5012\u662f\u80fd\u770b\u5230 @autoreleasepool \u4f7f\u7528\uff0cmian \u51fd\u6570\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">int main(int argc, const char * argv[]) {\n    @autoreleasepool {}\n    return 0;\n}\n</code></pre>\n\n<p>\u901a\u8fc7 Clang \u547d\u4ee4\u5c06\u4e0a\u8ff0\u4ee3\u7801\u8f6c\u6362\u6210 C++ \u6e90\u7801\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// -&gt; clang -rewrite-objc main.m\n/// -&gt; main.cpp\n......\nstruct __AtAutoreleasePool {\n  __AtAutoreleasePool() {atautoreleasepoolobj = objc_autoreleasePoolPush();}\n  ~__AtAutoreleasePool() {objc_autoreleasePoolPop(atautoreleasepoolobj);}\n  void * atautoreleasepoolobj;\n};\n......\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ \n    { __AtAutoreleasePool __autoreleasepool;  }\n    return 0;\n}\n......\n</code></pre>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u770b\uff0c@autoreleasepool \u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a  __AtAutoreleasePool \u7ed3\u6784\u4f53\u5bf9\u8c61\uff0c\u5728\u521b\u5efa__AtAutoreleasePool\u7ed3\u6784\u4f53\u65f6\u4f1a\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528objc_autoreleasePoolPush()\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aatautoreleasepoolobj (POOL_BOUNDARY\u5b58\u653e\u7684\u5185\u5b58\u5730\u5740\uff0c\u4e0b\u9762\u4f1a\u8bb2\u5230)\u3002\u5728\u91ca\u653e__AtAutoreleasePool\u7ed3\u6784\u4f53\u65f6\u4f1a\u5728\u6790\u6784\u51fd\u6570\u4e2d\u8c03\u7528objc_autoreleasePoolPop()\u51fd\u6570\uff0c\u5e76\u5c06atautoreleasepoolobj\u4f20\u5165\u3002</p>\n<h4 id=\"23-autoreleasepoolpage\">2.3  AutoreleasePoolPage</h4>\n<p>objc_autoreleasePoolPush() \u548c objc_autoreleasePoolPop() \u8fd9\u4e24\u4e2a\u51fd\u6570\u505a\u4e86\u4ec0\u4e48\u5462\uff0c\u8ba9\u6211\u4eec\u53bb objc4 \u6e90\u7801 \u67e5\u770b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// -&gt; NSObject.mm\nvoid * objc_autoreleasePoolPush(void)\n{\n    return AutoreleasePoolPage::push();\n}\n\nvoid objc_autoreleasePoolPop(void *ctxt)\n{\n    AutoreleasePoolPage::pop(ctxt);\n}\n</code></pre>\n\n<p>\u4ece\u4e0a\u8ff0\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0cobjc_autoreleasePoolPush() \u548c objc_autoreleasePoolPop() \u5185\u90e8\u662f\u901a\u8fc7 AutoreleasePoolPage \u53bb\u8c03\u7528 push() \u548c pop() \u51fd\u6570\uff0cAutoreleasePoolPage \u660e\u663e\u662f @autoreleasepool \u57fa\u7840\u5b9e\u73b0\u7c7b\u3002AutoreleasePoolPage \u662f\u5982\u4f55\u7ba1\u7406 autorelease \u5bf9\u8c61\u7684\u5462\uff1f\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b AutoreleasePoolPage \u7684\u5b9e\u73b0\u7ed3\u6784\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// -&gt; NSObject.mm\nclass AutoreleasePoolPage : private AutoreleasePoolPageData\n{\n    friend struct thread_data_t;\n\npublic:\n    static size_t const SIZE =\n#if PROTECT_AUTORELEASEPOOL\n        PAGE_MAX_SIZE;  // must be multiple of vm page size\n#else\n        PAGE_MIN_SIZE;  // size and alignment, power of 2\n#endif\n\nprivate:\n    static pthread_key_t const key = AUTORELEASE_POOL_KEY;\n    static uint8_t const SCRIBBLE = 0xA3;  // 0xA3A3A3A3 after releasing\n    static size_t const COUNT = SIZE / sizeof(id);\n    static size_t const MAX_FAULTS = 2;\n\n    // EMPTY_POOL_PLACEHOLDER is stored in TLS when exactly one pool is \n    // pushed and it has never contained any objects. This saves memory \n    // when the top level (i.e. libdispatch) pushes and pops pools but \n    // never uses them.\n#   define EMPTY_POOL_PLACEHOLDER ((id*)1)\n#   define POOL_BOUNDARY nil\n......\n    AutoreleasePoolPage(AutoreleasePoolPage *newParent) :\n        AutoreleasePoolPageData(begin(),\n                                objc_thread_self(),\n                              newParent,\n                                newParent ? 1+newParent-&gt;depth : 0,\n                                newParent ? newParent-&gt;hiwat : 0)\n{\n        if (objc::PageCountWarning != -1) {\n            checkTooMuchAutorelease();\n        }\n\n\n        if (parent) {\n            parent-&gt;check();\n            ASSERT(!parent-&gt;child);\n            parent-&gt;unprotect();\n            parent-&gt;child = this;\n            parent-&gt;protect();\n        }\n        protect();\n    }\n......\n}\n\n\n/// -&gt; NSObject-internal.h\nstruct AutoreleasePoolPageData\n{\n#if SUPPORT_AUTORELEASEPOOL_DEDUP_PTRS\n    struct AutoreleasePoolEntry {\n        uintptr_t ptr: 48;\n        uintptr_t count: 16;\n        static const uintptr_t maxCount = 65535; // 2^16 - 1\n    };\n    static_assert((AutoreleasePoolEntry){ .ptr = MACH_VM_MAX_ADDRESS }.ptr == MACH_VM_MAX_ADDRESS, &quot;MACH_VM_MAX_ADDRESS doesn't fit into AutoreleasePoolEntry::ptr!&quot;);\n#endif\n\n    magic_t const magic;  // \u7528\u6765\u6821\u9a8c Page \u7684\u7ed3\u6784\u662f\u5426\u5b8c\u6574\n    __unsafe_unretained id *next;  // \u6307\u5411\u4e0b\u4e00\u4e2a\u53ef\u5b58\u653e autorelease \u5bf9\u8c61\u5730\u5740\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u5316\u6307\u5411 begin()\n    pthread_t const thread;  // \u6307\u5411\u5f53\u524d\u7ebf\u7a0b\n    AutoreleasePoolPage * const parent;  // \u6307\u5411\u7236\u7ed3\u70b9\uff0c\u9996\u7ed3\u70b9\u7684 parent \u4e3a nil\n    AutoreleasePoolPage *child;  // \u6307\u5411\u5b50\u7ed3\u70b9\uff0c\u5c3e\u7ed3\u70b9\u7684 child  \u4e3a nil\n    uint32_t const depth;  // Page \u7684\u6df1\u5ea6\uff0c\u4ece 0 \u5f00\u59cb\u9012\u589e\n    uint32_t hiwat;\n......\n};\n</code></pre>\n\n<p>AutoreleasePoolPage \u7c7b\u7ee7\u627f\u81ea AutoreleasePoolPageData\uff0c\u4ece AutoreleasePoolPageData \u7684\u5b9e\u73b0\u7ed3\u6784\u53ef\u5f97\u77e5\uff1a</p>\n<ul>\n<li>AutoreleasePool \u662f\u4ee5 AutoreleasePoolPage \u4e3a\u8282\u70b9\u7ec4\u5408\u7684\u201c\u53cc\u5411\u94fe\u8868\u201d\uff0cAutoreleasePoolPage \u521b\u5efa\u65f6\uff0c\u5c06\u65b0\u521b\u5efa\u7684 Page \u7684 parent \u6307\u9488\u6307\u5411parentPage\uff0c\u5c06 parentPage \u7684 child \u6307\u9488\u6307\u5411\u81ea\u5df1\u3002</li>\n<li>AutoreleasePoolPage \u7684 thread \u6210\u5458\u53d8\u91cf\u6307\u5411\u5f53\u524d AutoreleasePool \u6240\u5728\u7684\u7ebf\u7a0b\uff0c\u8bf4\u660e AutoreleasePool \u548c\u7ebf\u7a0b\u662f\u4e00\u4e00\u5bf9\u5e94\u7684</li>\n<li>AutoreleasePoolPage \u7684\u6700\u5927 Size \u4e3a\u4e00\u9875\u865a\u62df\u5185\u5b58\u9875\u7684\u5927\u5c0f-4096 \u5b57\u8282\uff0c\u5176\u4e2d 56 \u4e2a\u5b57\u8282\u7528\u6765\u5b58\u653e\u5b83\u5185\u90e8\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\uff084040\u4e2a\u5b57\u8282\uff09\u7528\u6765\u5b58\u653e autorelease \u5bf9\u8c61 \u7684\u5730\u5740\uff0c\u5b83\u7684\u5185\u5b58\u5206\u5e03\u56fe\u5982\u4e0b\uff1a<br />\n<img alt=\"image\" src=\"https://lianghuii.com/postImage/AutoreleasePool\u8be6\u89e3/psb-01.png\" /></li>\n</ul>\n<p>AutoreleasePoolPage \u62e5\u6709 begin\u3001end\u3001empty\u3001full \u8fd9\u4e9b\u65b9\u6cd5\u6765\u63cf\u8ff0 Page \u7684\u5bb9\u91cf\u60c5\u51b5\uff0c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">id * begin() {\n   /// Page\u81ea\u5df1\u7684\u5730\u5740+Page\u5bf9\u8c61\u7684\u5927\u5c0f56\u4e2a\u5b57\u8282\uff1b\n   return (id *) ((uint8_t *)this+sizeof(*this));\n}\n\nid * end() {\n   /// Page\u81ea\u5df1\u7684\u5730\u5740+4096\u4e2a\u5b57\u8282\uff1b\n   return (id *) ((uint8_t *)this+SIZE);\n}\n\nbool empty() {\n   /// \u5224\u65adPage\u662f\u5426\u4e3a\u7a7a\u7684\u6761\u4ef6\n   return next == begin();\n}\n\nbool full() { \n   /// \u5224\u65adPage\u662f\u5426\u5df2\u6ee1\u7684\u6761\u4ef6\n   return next == end();\n}\n</code></pre>\n\n<h4 id=\"24-autoreleasepoolpage-push-pop\">2.4  AutoreleasePoolPage \u7684 push() \u548c pop()</h4>\n<h5 id=\"241-push\">2.4.1  push()</h5>\n<p>AutoreleasePoolPage \u662f\u5982\u4f55\u64cd\u7eb5 autorelease \u5bf9\u8c61\u7684\u6dfb\u52a0\u5462\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b push() \u7684\u6e90\u7801\u5b9e\u73b0\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">/// NSObject.mm\nstatic inline void *push() {\n   id *dest;\n   if (slowpath(DebugPoolAllocation)) {\n      // Each autorelease pool starts on a new pool page.\n      dest = autoreleaseNewPage(POOL_BOUNDARY);\n   } else {\n      dest = autoreleaseFast(POOL_BOUNDARY);\n   }\n   ASSERT(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);\n   return dest;\n}\n</code></pre>\n\n<p>\u5f53 AutoreleasePool \u521b\u5efa\u540e\uff0cAutoreleasePoolPage \u4f1a\u8c03\u7528 push() \u65b9\u6cd5\u52a0\u5165 POOL_BOUNDARY \u54e8\u5175\u5bf9\u8c61\u3002push() \u5185\u90e8\u52a0\u5165\u5bf9\u8c61\u65f6\uff0c\u4f1a\u5224\u65ad\u662f\u5426 AutoreleasePoolPage \u5bf9\u8c61\u5b58\u5728\uff0c\u6ca1\u6709\u7684\u8bdd\uff0c\u8c03\u7528  autoreleaseNewPage() \uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b autoreleaseNewPage \u7684\u5b9e\u73b0\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">static __attribute__((noinline))\nid *autoreleaseNewPage(id obj)\n{\n   AutoreleasePoolPage *page = hotPage();\n   if (page) return autoreleaseFullPage(obj, page);\n   else return autoreleaseNoPage(obj);\n}\n\nstatic __attribute__((noinline))\nid *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)\n{\n     // The hot page is full. \n     // Step to the next non-full page, adding a new page if necessary.\n     // Then add the object to that page.\n     ASSERT(page == hotPage());\n     ASSERT(page-&gt;full()  ||  DebugPoolAllocation);\n\n     do {\n        if (page-&gt;child) page = page-&gt;child;\n        else page = new AutoreleasePoolPage(page);\n     } while (page-&gt;full());\n\n     setHotPage(page);\n     return page-&gt;add(obj);\n}\n\nstatic __attribute__((noinline))\nid *autoreleaseNoPage(id obj)\n{\n    // &quot;No page&quot; could mean no pool has been pushed\n    // or an empty placeholder pool has been pushed and has no contents yet\n    ASSERT(!hotPage());\n\n    bool pushExtraBoundary = false;\n    if (haveEmptyPoolPlaceholder()) {\n       // We are pushing a second pool over the empty placeholder pool\n       // or pushing the first object into the empty placeholder pool.\n       // Before doing that, push a pool boundary on behalf of the pool \n       // that is currently represented by the empty placeholder.\n       pushExtraBoundary = true;\n    }\n    else if (obj != POOL_BOUNDARY  &amp;&amp;  DebugMissingPools) {\n       // We are pushing an object with no pool in place, \n       // and no-pool debugging was requested by environment.\n       _objc_inform(&quot;MISSING POOLS: (%p) Object %p of class %s &quot;\n                         &quot;autoreleased with no pool in place - &quot;\n                         &quot;just leaking - break on &quot;\n                         &quot;objc_autoreleaseNoPool() to debug&quot;, \n                         objc_thread_self(), (void*)obj, object_getClassName(obj));\n       objc_autoreleaseNoPool(obj);\n       return nil;\n    }\n    else if (obj == POOL_BOUNDARY  &amp;&amp;  !DebugPoolAllocation) {\n       // We are pushing a pool with no pool in place,\n       // and alloc-per-pool debugging was not requested.\n       // Install and return the empty pool placeholder.\n       return setEmptyPoolPlaceholder();\n    }\n\n    // We are pushing an object or a non-placeholder'd pool.\n    // Install the first page.\n    AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);\n    setHotPage(page);\n\n    // Push a boundary on behalf of the previously-placeholder'd pool.\n    if (pushExtraBoundary) {\n        page-&gt;add(POOL_BOUNDARY);\n    }\n\n    // Push the requested object or pool.\n    return page-&gt;add(obj);\n }\n</code></pre>\n\n<p>autoreleaseNewPage() \u5185\u90e8\u903b\u8f91\u5982\u4e0b\uff1a</p>\n<ul>\n<li>\u9996\u5148\uff0c\u8c03\u7528 hotPage() \u83b7\u53d6 AutoreleasePool \u53cc\u5411\u94fe\u8868\u6700\u540e\u4e00\u4e2a Page\u3002</li>\n<li>\u5982\u679c Page \u5b58\u5728\uff0c\u8c03\u7528  autoreleaseFullPage()\uff1a</li>\n<li>1\u3001\u5f53\u524d Page \u672a\u6ee1\u65f6\uff0c\u901a\u8fc7 page\u2192add(obj) \u5c06 autorelease \u5bf9\u8c61\u52a0\u5230\u5f53\u524d Page \u4e2d\u3002</li>\n<li>2\u3001\u5f53\u524d Page \u5df2\u6ee1\u65f6\uff0c\u901a\u8fc7 while \u5faa\u73af\u67e5\u627e\u672a\u6ee1\u7684Page\uff0c\u82e5\u67e5\u627e\u5230\uff0c\u5c06 autorelease \u5bf9\u8c61\u6dfb\u52a0\u8fdb\u53bb\u3002\u82e5\u672a\u67e5\u627e\u5230\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Page\uff0c\u5e76\u5c06 autorelease \u5bf9\u8c61\u6dfb\u52a0\u8fdb\u53bb\u3002</li>\n<li>\u5982\u679c Page \u4e0d\u5b58\u5728\uff0c\u8c03\u7528 autoreleaseNoPage() \u521b\u5efa\u7b2c\u4e00\u4e2a AutoreleasePoolPage\uff0c\u5e76\u5c06 autorelease \u5bf9\u8c61\u6dfb\u52a0\u8fdb\u53bb\u3002</li>\n</ul>\n<p>\u518d\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b push() \u65b9\u6cd5\u4e2d\uff0c\u5f53\u5b58\u5728 AutoreleasePoolPage \u65f6 autoreleaseFast()  \u51fd\u6570\u5b9e\u73b0\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">static inline id *autoreleaseFast(id obj)\n{\n    AutoreleasePoolPage *page = hotPage();\n    if (page &amp;&amp; !page-&gt;full()) {\n        return page-&gt;add(obj);\n    } else if (page) {\n        return autoreleaseFullPage(obj, page);\n    } else {\n        return autoreleaseNoPage(obj);\n    }\n}\n</code></pre>\n\n<p>autoreleaseFast() \u91cc\u5904\u7406\u7684\u4e8b\u60c5\u8ddf autoreleaseNewPage() \u5dee\u4e0d\u591a\uff0c\u90fd\u662f\u5224\u65ad hotPage()\u7684\u5b58\u5728\u4ee5\u53ca\u662f\u5426\u6ee1\u5bb9\u91cf\u505a\u76f8\u5bf9\u5e94\u7684\u5904\u7406\u3002</p>\n<p>\u5bf9\u8c61\u8981\u6dfb\u52a0\u5230 AutoreleasePool \u4e2d\uff0c\u5c31\u8981\u8c03\u7528 autorelease()\uff0c\u5176\u5185\u90e8\u4e5f\u662f\u901a\u8fc7 autoreleaseFast() \u65b9\u6cd5\u6dfb\u52a0\u7684\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">static inline id autorelease(id obj)\n{\n    ASSERT(!obj-&gt;isTaggedPointerOrNil());\n    id *dest __unused = autoreleaseFast(obj);\n#if SUPPORT_AUTORELEASEPOOL_DEDUP_PTRS\n    ASSERT(!dest  ||  dest == EMPTY_POOL_PLACEHOLDER  ||  (id)((AutoreleasePoolEntry *)dest)-&gt;ptr == obj);\n#else\n    ASSERT(!dest  ||  dest == EMPTY_POOL_PLACEHOLDER  ||  *dest == obj);\n#endif\n    return obj;\n}\n</code></pre>\n\n<h5 id=\"242-pop\">2.4.2  pop()</h5>\n<p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 autorelease \u5bf9\u8c61\u7684\u6dfb\u52a0\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u4e86\u89e3 autorelease \u5bf9\u8c61\u7684\u91ca\u653e\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">static inline void\npop(void *token)\n{\n    AutoreleasePoolPage *page;\n    id *stop;\n    if (token == (void*)EMPTY_POOL_PLACEHOLDER) {\n    // Popping the top-level placeholder pool.\n    page = hotPage();\n    if (!page) {\n       // Pool was never used. Clear the placeholder.\n       return setHotPage(nil);\n    }\n       // Pool was used. Pop its contents normally.\n       // Pool pages remain allocated for re-use as usual.\n       page = coldPage();\n       token = page-&gt;begin();\n    } else {\n       page = pageForPointer(token);\n    }\n\n    stop = (id *)token;\n    if (*stop != POOL_BOUNDARY) {\n       if (stop == page-&gt;begin()  &amp;&amp;  !page-&gt;parent) {\n          // Start of coldest page may correctly not be POOL_BOUNDARY:\n          // 1. top-level pool is popped, leaving the cold page in place\n          // 2. an object is autoreleased with no pool\n       } else {\n          // Error. For bincompat purposes this is not \n          // fatal in executables built with old SDKs.\n          return badPop(token);\n       }\n    }\n\n    if (slowpath(PrintPoolHiwat || DebugPoolAllocation || DebugMissingPools)) {\n       return popPageDebug(token, page, stop);\n    }\n    return popPage&lt;false&gt;(token, page, stop);\n}\n</code></pre>\n\n<p>pop() \u65b9\u6cd5\u6709\u4e2a\u5165\u53c2\u6570 token\uff0c\u8be5 token \u5176\u5b9e\u5c31\u662f AutoreleasePool \u521b\u5efa\u65f6 push \u7684 POOL_BOUNDARY \u54e8\u5175\u5bf9\u8c61\u3002\u5f53 AutoreleasePool \u9500\u6bc1\u65f6\uff0cpop() \u65b9\u6cd5\u4f1a\u4f9d\u6b21\u5411 AutoreleasePool \u4e2d\u7684\u5bf9\u8c61\u53d1\u9001 release \u6d88\u606f\uff0c\u76f4\u5230\u9047\u5230 POOL_BOUNDARY \u54e8\u5175\u5bf9\u8c61\u65f6\uff0c\u8bf4\u660e AutoreleasePool \u5185\u7684\u5bf9\u8c61\u5df2\u5168\u90e8\u91ca\u653e\u3002</p>\n<p>pop() \u65b9\u6cd5\u5185\u90e8\u6d41\u7a0b\u5982\u4e0b\uff1a</p>\n<ul>\n<li>\u5224\u65ad token \u662f\u4e0d\u662f EMPTY_POOL_PLACEHOLDER\uff0c\u5982\u662f\u7684\u8bdd\uff0c\u5224\u65ad hotPage \u5b58\u4e0d\u5b58\u5728\uff1a</li>\n<li>1\u3001\u82e5\u4e0d\u5b58\u5728\uff0c\u8bc1\u660e\u8be5 AutoreleasePool \u662f\u7a7a\u6c60\uff0c\u6e05\u9664 EMPTY_POOL_PLACEHOLDER \u6807\u8bc6\uff0c\u9500\u6bc1\u8be5\u6c60\u3002</li>\n<li>2\u3001\u82e5\u5b58\u5728\uff0c\u8c03\u7528 coldPage() \u91cd\u65b0\u5206\u914d Page \u8fd4\u56de\u7b2c\u4e00\u4e2a Page\u5bf9\u8c61\uff0c\u5c06 Page \u7684\u9996\u5bf9\u8c61\u8d4b\u503c\u7ed9 token\u3002</li>\n<li>\u5982\u679c\u4e0d\u662f\u7684\u8bdd EMPTY_POOL_PLACEHOLDER\uff0c\u5c31\u901a\u8fc7 pageForPointer(token) \u62ff\u5230 token \u6240\u5728\u7684Page\uff08\u81ea\u52a8\u91ca\u653e\u6c60\u7684\u9996\u4e2a Page\uff09</li>\n<li>\u82e5 token \u5bf9\u8c61\u975e POOL_BOUNDARY\uff0c\u8bf4\u660e Page \u7684\u9996\u5bf9\u8c61\u4e0d\u6b63\u786e\uff0c\u5982\u679c token \u662f page \u7684\u9996\u5bf9\u8c61\u4e14 page \u662f\u7b2c\u4e00\u9875\uff0c\u8bf4\u660e\u8fd9\u662f  coldPage \u6216\u8005\u5bf9\u8c61\u5df2\u7ecf\u81ea\u52a8\u91ca\u653e\u3002\u5982\u679c\u4e0d\u662f\u524d\u9762\u7684\u60c5\u51b5\u7684\u8bdd\uff0c\u8bf4\u660e AutoreleasePool \u5f02\u5e38\uff0c\u8c03\u7528 badPop() \u51fd\u6570\u9500\u6bc1 AutoreleasePool\u3002</li>\n<li>\u8c03\u7528 popPage() \u51fd\u6570\uff0c\u5185\u90e8\u4f1a\u8c03\u7528 releaseUntil() \u91ca\u653e autorelease \u5bf9\u8c61\u3002</li>\n</ul>\n<p>\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b releaseUntil() \u662f\u5982\u4f55\u91ca\u653e\u5bf9\u8c61\u7684\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">void releaseUntil(id *stop) \n{\n    // Not recursive: we don't want to blow out the stack \n    // if a thread accumulates a stupendous amount of garbage\n\n    while (this-&gt;next != stop) {\n       // Restart from hotPage() every time, in case -release \n       // autoreleased more objects\n       AutoreleasePoolPage *page = hotPage();\n\n       // fixme I think this `while` can be `if`, but I can't prove it\n       while (page-&gt;empty()) {\n          page = page-&gt;parent;\n          setHotPage(page);\n       }\n\n       page-&gt;unprotect();\n#if SUPPORT_AUTORELEASEPOOL_DEDUP_PTRS\n       AutoreleasePoolEntry* entry = (AutoreleasePoolEntry*) --page-&gt;next;\n\n       // create an obj with the zeroed out top byte and release that\n       id obj = (id)entry-&gt;ptr;\n       int count = (int)entry-&gt;count;  // grab these before memset\n#else\n       id obj = *--page-&gt;next;\n#endif\n       memset((void*)page-&gt;next, SCRIBBLE, sizeof(*page-&gt;next));\n       page-&gt;protect();\n\n       if (obj != POOL_BOUNDARY) {\n#if SUPPORT_AUTORELEASEPOOL_DEDUP_PTRS\n         // release count+1 times since it is count of the additional\n         // autoreleases beyond the first one\n         for (int i = 0; i &lt; count + 1; i++) {\n             objc_release(obj);\n         }\n#else\n         objc_release(obj);\n#endif\n       }\n    }\n\n    setHotPage(this);\n\n#if DEBUG\n    // we expect any children to be completely empty\n    for (AutoreleasePoolPage *page = child; page; page = page-&gt;child) {\n       ASSERT(page-&gt;empty());\n    }\n#endif\n}\n</code></pre>\n\n<p>releaseUntil() \u5185\u901a\u8fc7 while \u5faa\u73af\uff0c\u4ece\u6700\u540e\u4e00\u4e2a autorelease \u5bf9\u8c61\u5f00\u59cb\u5f80\u524d\u4f9d\u6b21\u8c03\u7528 release() \u91ca\u653e\u5bf9\u8c61\uff0c\u76f4\u5230 POOL_BOUNDARY \u54e8\u5175\u5bf9\u8c61\u9000\u51fa\u5faa\u73af\u3002</p>\n<h3 id=\"pool_boundary\">\u4e09\u3001  POOL_BOUNDARY \u7684\u4f5c\u7528</h3>\n<p>\u4ece  AutoreleasePoolPage pop() \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 POOL_BOUNDARY \u660e\u663e\u7684\u4e00\u70b9\u5c31\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8fb9\u754c\u5bf9\u8c61\uff0c\u8fd9\u6837 AutoreleasePoolPage \u53ef\u4ee5\u4fdd\u8bc1\u5c06\u8be5\u91ca\u653e\u7684\u5bf9\u8c61\u91ca\u653e\uff0c\u8fd9\u4e00\u4f5c\u7528\u5728 @autoreleasepool \u5d4c\u5957\u4f7f\u7528\u4e2d\u66f4\u80fd\u4f53\u73b0\uff0c\u5148\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5355\u4e2a @autoreleasepool \u7ba1\u7406 autorelease \u5bf9\u8c61\u7684\u5185\u5b58\u5206\u5e03\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">extern void _objc_autoreleasePoolPrint(void);\n\n_objc_autoreleasePoolPrint();\n@autoreleasepool {\n    _objc_autoreleasePoolPrint();\n    NSObject *obj = [[[NSObject alloc] init] autorelease];\n    _objc_autoreleasePoolPrint();\n    NSObject *obj2 = [[[NSObject alloc] init] autorelease];\n    _objc_autoreleasePoolPrint();\n}\n</code></pre>\n\n<p>_objc_autoreleasePoolPrint() \u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u5f53\u524d AutoreleasePool \u4e2d\u7684\u5bf9\u8c61\u4fe1\u606f\uff0c_objc_autoreleasePoolPrint() Runtime \u4e2d\u7684\u9690\u533f\u51fd\u6570\uff0c\u6240\u4ee5\u5f97<br />\nextern void _objc_autoreleasePoolPrint(void)\uff0c\u4ee5\u4e0b\u662f\u8f93\u51fa\u4fe1\u606f\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">objc[1529]: ##############\nobjc[1529]: AUTORELEASE POOLS for thread 0x10008c580\nobjc[1529]: 0 releases pending.\nobjc[1529]: [0x100810000]  ................  PAGE  (hot) (cold)\nobjc[1529]: ##############\nobjc[1529]: ##############\nobjc[1529]: AUTORELEASE POOLS for thread 0x10008c580\nobjc[1529]: 1 releases pending.\nobjc[1529]: [0x100810000]  ................  PAGE  (hot) (cold)\nobjc[1529]: [0x100810038]  ################  POOL 0x100810038 // POOL_BOUNDARY\nobjc[1529]: ##############\nobjc[1529]: ##############\nobjc[1529]: AUTORELEASE POOLS for thread 0x10008c580\nobjc[1529]: 2 releases pending.\nobjc[1529]: [0x100810000]  ................  PAGE  (hot) (cold)\nobjc[1529]: [0x100810038]  ################  POOL 0x100810038\nobjc[1529]: [0x100810040]       0x1007b6db0  NSObject\nobjc[1529]: ##############\nobjc[1529]: ##############\nobjc[1529]: AUTORELEASE POOLS for thread 0x10008c580\nobjc[1529]: 3 releases pending.\nobjc[1529]: [0x100810000]  ................  PAGE  (hot) (cold)\nobjc[1529]: [0x100810038]  ################  POOL 0x100810038\nobjc[1529]: [0x100810040]       0x1007b6db0  NSObject\nobjc[1529]: [0x100810048]       0x1007b5760  NSObject\nobjc[1529]: ##############\nProgram ended with exit code: 0\n</code></pre>\n\n<p>\u4ece\u8f93\u51fa\u4fe1\u606f\u6765\u770b\uff0c\u5b83\u7684\u5185\u5b58\u5206\u5e03\u56fe\u5982\u4e0b\uff1a<br />\n<img alt=\"image\" src=\"https://lianghuii.com/postImage/AutoreleasePool\u8be6\u89e3/psb-02.png\" /></p>\n<p>\u518d\u6765\u770b\u770b\u591a\u5c42 @autoreleasepool \u5d4c\u5957\u60c5\u51b5\uff1a</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">int main(int argc, const char * argv[]) {\n    _objc_autoreleasePoolPrint();\n    @autoreleasepool {\n        _objc_autoreleasePoolPrint();\n        NSObject *obj = [[[NSObject alloc] init] autorelease];\n        _objc_autoreleasePoolPrint();\n        NSObject *obj2 = [[[NSObject alloc] init] autorelease];\n        _objc_autoreleasePoolPrint();\n        @autoreleasepool {\n            _objc_autoreleasePoolPrint();\n            NSObject *obj3 = [[[NSObject alloc] init] autorelease];\n            _objc_autoreleasePoolPrint();\n            NSObject *obj4 = [[[NSObject alloc] init] autorelease];\n            _objc_autoreleasePoolPrint();\n        }\n    }\n    return 0;\n}\n</code></pre>\n\n<p>\u6bcf\u4e2a AutoreleasePool \u521b\u5efa\u540e\u90fd\u4f1a push \u4e00\u4e2a POOL_BOUNDARY \u5bf9\u8c61\uff0c\u533a\u522b\u5176\u4ed6 AutoreleasePool \u7ba1\u7406\u7684\u5bf9\u8c61\uff0c\u5d4c\u5957\u540e\u5206\u5e03\u56fe\u5982\u4e0b<br />\n<img alt=\"image\" src=\"https://lianghuii.com/postImage/AutoreleasePool\u8be6\u89e3/psb-03.png\" /></p>\n<h3 id=\"autoreleasepool_1\">\u56db\u3001AutoreleasePool \u7684\u521b\u5efa\u65f6\u673a\u548c\u91ca\u653e\u65f6\u673a</h3>\n<p>AutoreleasePool \u521b\u5efa\u4e00\u822c\u662f\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff1a</p>\n<p>\u5f00\u542f RunLoop\uff0cRunLoop \u4f1a\u81ea\u52a8\u7ba1\u7406 AutoreleasePool \u7684\u521b\u5efa\u548c\u91ca\u653e\uff0cRunloop \u4e2d\u6ce8\u518c\u4e86\u4e24\u4e2a Observer\uff0c\u56de\u8c03\u90fd\u662f _wrapRunLoopWithAutoreleasePoolHandler()\u3002\u4e24\u4e2a Observer \u5982\u4e0b\uff1a</p>\n<ul>\n<li>1\u3001\u76d1\u6d4b Entry \u4e8b\u4ef6\uff0c\u56de\u8c03\u91cc\u81ea\u52a8\u521b\u5efa\u81ea\u52a8\u91ca\u653e\u6c60\uff0corder\u4e3a -214748364\uff0c \u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u4fdd\u8bc1\u521b\u5efa\u91ca\u653e\u6c60\u53d1\u751f\u5728\u5176\u4ed6\u6240\u6709\u56de\u8c03\u4e4b\u524d\uff1b</li>\n<li>2\u3001\u76d1\u6d4b BeforeWaiting \u53ca Exit \u4e8b\u4ef6\uff0cBeforeWaiting \u65f6\u8c03\u7528 _objc_autoreleasePoolPop() \u548c _objc_autoreleasePoolPush() \u91ca\u653e\u65e7\u7684\u6c60\u5e76\u521b\u5efa\u65b0\u6c60\u3002Exit \u65f6\u8c03\u7528 _objc_autoreleasePoolPop() \u6765\u91ca\u653e\u81ea\u52a8\u91ca\u653e\u6c60\u3002\u8fd9\u4e2a Observer \u7684 order \u662f 2147483647\uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u4fdd\u8bc1\u5176\u91ca\u653e\u6c60\u5b50\u53d1\u751f\u5728\u5176\u4ed6\u6240\u6709\u56de\u8c03\u4e4b\u540e\u3002</li>\n</ul>\n<p>\u901a\u8fc7 @autoreleasepool \u624b\u52a8\u521b\u5efa\uff0c\u5728\u79bb\u5f00 @autoreleasepool \u6240\u5904\u7684\u4f5c\u7528\u57df\u65f6\uff0c AutoreleasePool \u91ca\u653e<br />\n\u4e3b\u7ebf\u7a0b\u56e0\u4e3a\u4f1a\u81ea\u52a8\u5f00 RunLoop\uff0c\u56e0\u6b64 AutoreleasePool \u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u4f46\u5176\u4ed6\u7ebf\u7a0b\u7684 RunLoop \u662f\u9ed8\u8ba4\u672a\u521b\u5efa\u7684\uff0c\u90a3\u5b83\u4eec\u7684  autorelease \u5bf9\u8c61\u5982\u4f55\u7ba1\u7406\u5462\uff1f\u5b50\u7ebf\u7a0b\u4e2d\u5982\u679c\u6ca1\u6709\u5f00\u542f RunLoop\uff0c\u5f53\u5b58\u5728 autorelease \u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u521b\u5efa AutoreleasePool \u5e76\u6dfb\u52a0\u5230 AutoreleasePool \u4e2d\uff0c\u7b49\u7ebf\u7a0b\u9500\u6bc1\u65f6\uff0cAutoreleasePool \u5c31\u4f1a\u91ca\u653e\u3002</p>\n<p>@autoreleasepool \u7684\u624b\u52a8\u521b\u5efa\uff0c\u4e00\u822c\u7528\u4e8e\u907f\u514d\u5185\u5b58\u5cf0\u503c\uff0c\u6bd4\u5982\u5728 for \u5faa\u73af\u4e2d\u521b\u5efa\u4e86\u5927\u91cf\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u5728\u5faa\u73af\u4f53\u5185\u521b\u5efa AutoreleasePool \uff0c\u5f53\u4e00\u6b21\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u91ca\u653e\u4e34\u65f6\u5bf9\u8c61\uff0c\u6570\u7ec4\u7cfb\u7edf\u904d\u5386\u65b9\u6cd5\u5185\u90e8\u4e3a\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5185\u90e8\u4f1a\u81ea\u52a8\u521b\u5efa AutoreleasePool\uff0c\u4f46\u8bf7\u6ce8\u610f\u53ea\u6709 Autorelease\u7c7b\u578b\u7684\u5bf9\u8c61\u624d\u4f1a\u4ea4\u7ed9AutoreleasePool\u53bb\u7ba1\u7406\u3002</p>\n<pre class=\"codehilite\"><code class=\"language-Objective-C\">[array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {\n    // \u8fd9\u91cc\u88ab\u4e00\u4e2a\u5c40\u90e8@autoreleasepool\u5305\u56f4\u7740\n}];\n</code></pre>\n\n<h3 id=\"autorelease\">\u4e94\u3001\u4ec0\u4e48\u5bf9\u8c61\u4f1a\u901a\u8fc7 autorelease \u7ba1\u7406</h3>\n<p>\u53ea\u6709 Autorelease \u7c7b\u578b\u7684\u5bf9\u8c61\u624d\u4f1a\u4ea4\u7ed9AutoreleasePool\u53bb\u7ba1\u7406\uff0c\u90a3\u4ec0\u4e48\u6837\u7684\u5bf9\u8c61\u624d\u662f Autorelease \u7c7b\u578b\u7684\u5462\uff1f</p>\n<p>\u7f16\u8bd1\u5668\u4f1a\u68c0\u67e5\u65b9\u6cd5\u540d\u662f\u5426\u4ee5alloc, new, copy, mutableCopy \u5f00\u59cb\uff0c\u5982\u679c\u4e0d\u662f\u5219\u81ea\u52a8\u5c06\u8fd4\u56de\u503c\u7684\u5bf9\u8c61\u6ce8\u518c\u5230 AutoreleasePool \u4e2d\uff0c\u6bd4\u5982\u4e00\u4e9b\u7c7b\u65b9\u6cd5\uff1b<br />\niOS 5 \u53ca\u4e4b\u524d\u7684\u7f16\u8bd1\u5668\uff0c\u5173\u952e\u5b57 __weak \u4fee\u9970\u7684\u5bf9\u8c61\uff0c\u4f1a\u81ea\u52a8\u52a0\u5165AutoreleasePool\u3002iOS 5 \u53ca\u4e4b\u540e\u7684\u7f16\u8bd1\u5668\uff0c\u5219\u76f4\u63a5\u8c03\u7528\u7684 release\uff0c\u4e0d\u4f1a\u52a0\u5165 AutoreleasePool\uff1b<br />\nid \u6307\u9488 (id <em>) \u548c\u5bf9\u8c61\u6307\u9488\uff08NSError </em>\uff09\uff0c\u4f1a\u81ea\u52a8\u52a0\u4e0a\u5173\u952e\u5b57 __autorealeasing\uff0c\u52a0\u5165 AutoreleasePool\u3002</p>\n<p>\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7 objc_autoreleaseReturnValue \u51fd\u6570\u6765\u6807\u8bc6\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u52a0\u5165\u5230 AutoreleasePool \u4e2d\u53bb\u3002\u540c\u65f6\u8be5\u65b9\u6cd5\u901a\u8fc7 TLS\uff08Thread Local Storage\uff09\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u505a\u4e86\u4e9b\u4f18\u5316\uff0c\u7b26\u53f7\u4f18\u5316\u60c5\u51b5\u7684\u4e0d\u4f1a\u52a0\u5165\u5230 AutoreleasePool \u4e2d\u3002\u7cfb\u7edf\u5c06\u4e00\u5757\u5185\u5b58\u4f5c\u4e3a\u67d0\u4e2a\u7ebf\u7a0b\u4e13\u6709\u7684\u5b58\u50a8\uff0c\u4ee5key-value\u7684\u5f62\u5f0f\u8fdb\u884c\u8bfb\u5199\uff0c\u6bd4\u5982\u5728\u975earm\u67b6\u6784\u4e0b\uff0c\u4f7f\u7528 pthread \u63d0\u4f9b\u7684\u65b9\u6cd5\u5b9e\u73b0\uff1a</p>\n<p>void<em> pthread_getspecific(pthread_key_t);<br />\nint pthread_setspecific(pthread_key_t , const void </em>);<br />\n\u5728\u8fd4\u56de\u503c\u8eab\u4e0a\u8c03\u7528 objc_autoreleaseReturnValue \u65b9\u6cd5\u65f6\uff0cruntime \u5c06\u8fd9\u4e2a\u8fd4\u56de\u503c object \u50a8\u5b58\u5728TLS\u4e2d\uff0c\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2aobject\uff08\u4e0d\u8c03\u7528autorelease\uff09\uff0c\u540c\u65f6\uff0c\u5728\u5916\u90e8\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u7684 objc_retainAutoreleasedReturnValue\u91cc\uff0c\u53d1\u73b0TLS\u4e2d\u6b63\u597d\u5b58\u4e86\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2aobject\uff08\u4e0d\u8c03\u7528retain\uff09\u3002<br />\n\u4e8e\u662f\u4e4e\uff0c\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u65b9\u5229\u7528TLS\u505a\u4e2d\u8f6c\uff0c\u5f88\u6709\u9ed8\u5951\u7684\u514d\u53bb\u4e86\u5bf9\u8fd4\u56de\u503c\u7684\u5185\u5b58\u7ba1\u7406\u3002</p>"}