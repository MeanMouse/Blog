{"title": "__weak \u4fee\u9970\u7b26", "date": "2018-12-19 12:03:55", "categories": "iOS", "tags": "__weak", "keywords": "__weak,weak,\u5faa\u73af\u5f15\u7528,SideTables", "description": "", "images": "", "file_name": "weak-\u4fee\u9970\u7b26", "short": " SideTables \n SideTables \u662f\u5168\u5c40\u8868\uff0c\u7ba1\u7406\u7740\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u548cweak\u5f15\u7528\u6307\u9488\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u5728\u6b64\u8868\u4e2d\u90fd\u6709\u5bf9\u5e94\u7684\u4e00\u4e2a SideTable\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b SideTables \u6e90\u7801\u5b9a\u4e49 \n ", "content": "<h3 id=\"sidetables\">SideTables</h3>\n<p>SideTables \u662f\u5168\u5c40\u8868\uff0c\u7ba1\u7406\u7740\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u548cweak\u5f15\u7528\u6307\u9488\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u5728\u6b64\u8868\u4e2d\u90fd\u6709\u5bf9\u5e94\u7684\u4e00\u4e2a SideTable\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b SideTables \u6e90\u7801\u5b9a\u4e49</p>\n<!-- more -->\n\n<pre><code>static StripedMap&lt;SideTable&gt;&amp; SideTables() {\nreturn *reinterpret_cast&lt;StripedMap&lt;SideTable&gt;*&gt;(SideTableBuf);\n}\n</code></pre>\n<p>\u867d\u7136\u770b\u4e0d\u61c2\uff0c\u4f46\u4ece\u6e90\u7801\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa SideTables \u662f\u901a\u8fc7 StripedMap \u6765\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0</p>\n<pre><code>template&lt;typename T&gt;\nclass StripedMap {\n\nenum { CacheLineSize = 64 };\n\n#if TARGET_OS_EMBEDDED // \u5d4c\u5165\u5f0f\nenum { StripeCount = 8 };\n#else\nenum { StripeCount = 64 };\n#endif\n\nstruct PaddedT {\nT value alignas(CacheLineSize);\n};\n\nPaddedT array[StripeCount];\n\nstatic unsigned int indexForPointer(const void *p) {\nuintptr_t addr = reinterpret_cast&lt;uintptr_t&gt;(p);\nreturn ((addr &gt;&gt; 4) ^ (addr &gt;&gt; 9)) % StripeCount;\n}\n\npublic:\nT&amp; operator[] (const void *p) { \nreturn array[indexForPointer(p)].value; \n}\nconst T&amp; operator[] (const void *p) const { \nreturn const_cast&lt;StripedMap&lt;T&gt;&gt;(this)[p]; \n}\n};\n</code></pre>\n<p>\u4ece\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0cStripedMap \u7684\u5bb9\u91cf\u5927\u5c0f\u4e3a\uff1aStripeCount = 64\uff0c\u901a\u8fc7 indexForPointer \u51fd\u6570\u5206\u914d\u5728 StripedMap\u7684\u4e0b\u6807\u3002public \u4e2d\u7684\u5e94\u8be5\u662f\u8bfb\u5b58\u65b9\u6cd5\u5427\uff08\u731c\u6d4b\uff0c\u54c8\u54c8\u3002\u3002\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u5176\u548c Map \u96c6\u5408\u4e00\u6837\u3002</p>\n<h4 id=\"sidetable\">SideTable</h4>\n<p>SideTable \u7684\u5b9a\u4e49\u5982\u4e0b</p>\n<pre><code>typedef objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;,size_t,true&gt; RefcountMap;\n\nstruct SideTable {\nspinlock_t slock;\nRefcountMap refcnts;\nweak_table_t weak_table;\n...\n};\n</code></pre>\n<ul>\n<li>slock\uff1a\u662f\u7528\u4e8e\u5728\u5bf9 SideTable \u64cd\u4f5c\u65f6\uff0c\u5bf9 SideTable \u52a0\u9501\u9632\u6b62\u5176\u4ed6\u8bbf\u95ee\u3002</li>\n<li>refcnts\uff1a\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u5668\uff0c\u5b58\u50a8\u7740\u5bf9\u8c61\u88ab\u5f15\u7528\u7684\u8bb0\u5f55\u3002</li>\n<li>weak_table_t: \u5b58\u653e\u5f31\u53d8\u91cf\u5f15\u7528</li>\n</ul>\n<h5 id=\"disguisedptr\">DisguisedPtr</h5>\n<pre><code>class DisguisedPtr {\nuintptr_t value;\n\n// \u5bf9\u6307\u9488\u8fdb\u884c\u4f2a\u88c5\nstatic uintptr_t disguise(T* ptr) {\nreturn -(uintptr_t)ptr;\n}\n// \u6062\u590d\u81f3\u539f\u6307\u9488\nstatic T* undisguise(uintptr_t val) {\nreturn (T*)-val;\n}\n};\n\n</code></pre>\n<p>DisguisedPtr \u5bf9\u6307\u9488\u8fdb\u884c\u4f2a\u88c5\u7684\u7c7b\uff0c\u5c06\u6307\u9488\u5f3a\u8f6c\u4e3a uintptr_t \uff08unsigned long\uff09\u7c7b\u578b\u7684\u8d1f\u503c\uff0c\u8fd9\u6837\u7c7b\u4f3c leaks \u8fd9\u6837\u7684\u67e5\u5185\u5b58\u6cc4\u6f0f\u7684\u5de5\u5177\u4fbf\u65e0\u6cd5\u8ddf\u8e2a\u5230\u5bf9\u8c61\u3002</p>\n<h5 id=\"weak_table_t\">weak_table_t</h5>\n<pre><code>struct weak_table_t {\nweak_entry_t *weak_entries;\nsize_t    num_entries;\nuintptr_t mask;\nuintptr_t max_hash_displacement;\n};\n</code></pre>\n<ul>\n<li>weak_entries\uff1a\u5b58\u653e\u5bf9\u8c61\u4e0e\u5f31\u5f15\u7528\u5bf9\u8c61\u6307\u9488\u6620\u5c04\u7684\u5f31\u5f15\u7528\u6761\u76ee\u6570\u7ec4</li>\n<li>num_entries\uff1a\u5f31\u5f15\u7528\u6761\u76ee\u603b\u6570</li>\n<li>mask\uff1a\u53ef\u5b58\u50a8\u5f31\u5f15\u7528\u6761\u76ee\u7684\u5bb9\u91cf</li>\n<li>max_hash_displacement\uff1a\u6700\u5927\u54c8\u5e0c\u504f\u79fb\u503c</li>\n</ul>\n<h5 id=\"weak_entry_t\">weak_entry_t</h5>\n<pre><code>#define WEAK_INLINE_COUNT 4\n#define REFERRERS_OUT_OF_LINE 2\n\nstruct weak_entry_t {\nDisguisedPtr&lt;objc_object&gt; referent;\nunion {\nstruct {\nweak_referrer_t *referrers;\nuintptr_t        out_of_line_ness : 2;\nuintptr_t        num_refs : PTR_MINUS_2;\nuintptr_t        mask;\nuintptr_t        max_hash_displacement;\n};\nstruct {\n\nweak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];\n};\n};\n};\n</code></pre>\n<p>weak_entry_t \u662f\u4e00\u4e2a\u5f31\u5f15\u7528\u6761\u76ee\uff0c\u5176\u6620\u5c04\u4e86\u5f15\u7528\u5bf9\u8c61\u548c\u5176\u88ab\u5f31\u5f15\u7528\u7684\u6307\u9488\uff0creferent \u4fbf\u662f\u5f15\u7528\u5bf9\u8c61\uff0cunion\uff08\u8054\u5408\u4f53\uff09 \u91cc\u5b58\u653e\u7740\u5f31\u5f15\u7528\u8be5\u5bf9\u8c61\u7684\u6307\u9488\uff0cunion \u91cc\u9762\u7684\u591a\u4e2a\u6210\u5458\u53d8\u91cf\u5171\u4eab\u540c\u4e00\u5185\u5b58\u7a7a\u95f4\u3002union \u4e2d\u6709\u4e24\u4e2a\u7ed3\u6784\u4f53\u90fd\u662f\u5b58\u50a8\u5f31\u5f15\u7528\u5bf9\u8c61\u6307\u9488\u7684\u96c6\u5408\u3002\u7b2c\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d referrers \u662f\u4e00\u4e2a\u53ef\u8fdb\u884c\u6269\u5bb9\u7684\u96c6\u5408\uff0c\u800c\u7b2c\u4e8c\u4e2a\u7ed3\u6784\u4f53\u4e2d inline_referrers \u662f\u4e00\u4e2a\u5bb9\u91cf\u4e3a 4 \u7684\u6570\u7ec4\uff0cweak_entry_t \u9ed8\u8ba4\u4f7f\u7528 inline_referrers \u6765\u4fdd\u5b58\u5f31\u5f15\u7528\u6307\u9488\uff0c\u5f53\u6b64\u6570\u7ec4\u5bb9\u91cf\u6ee1\u540e\uff0c\u4f1a\u4f7f\u7528 referrers \u63a5\u7ba1\u4fdd\u5b58\u5de5\u4f5c\u3002out_of_line_ness \u4fbf\u662f\u63cf\u8ff0\u5b58\u50a8\u7684\u5f31\u5f15\u7528\u6307\u9488\u662f\u5426\u8d85\u51fa inline_referrers \u7684\u5bb9\u91cf\u3002</p>\n<h3 id=\"__weak\">__weak \u539f\u7406</h3>\n<pre><code>NSString *aa = @&quot;aa&quot;;\n__weak NSString *test = aa;\n</code></pre>\n<p>\u4e0a\u9762\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u6a21\u62df\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p>\n<pre><code>NSString *aa;\naa = @&quot;aa&quot;\nNSString *test;\nobjc_initWeak(&amp;obj, aa);\nobjc_destoryWeak(&amp;obj);\n</code></pre>\n<h4 id=\"__weak_1\">__weak \u53d8\u91cf\u521b\u5efa</h4>\n<p>__weak \u53d8\u91cf\u7684\u521b\u5efa\u5165\u53e3\u662f objc_initWeak \u8fd9\u4e2a\u51fd\u6570\uff0c\u5176\u5b9e\u73b0\u662f\uff1a</p>\n<pre><code>id objc_initWeak(id *location, id newObj)\n{\nif (!newObj) {\n*location = nil;\nreturn nil;\n}\n\nreturn storeWeak&lt;false/*old*/, true/*new*/, true/*crash*/&gt;\n(location, (objc_object*)newObj);\n}\n\n</code></pre>\n<p>\u5982\u679c __weak \u53d8\u91cf\u88ab\u8d4b\u4e88\u7684\u5bf9\u8c61\u662f nil \u90a3\u4e48\uff0c\u5c06 __weak \u53d8\u91cf\u7f6e nil\uff0c\u8fdb\u5165 objc_destoryWeak \u9500\u6bc1\u51fd\u6570\u3002storeWeak \u51fd\u6570\u662f\u4e00\u4e2a\u66f4\u65b0\u5f31\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u6709\u70b9\u957f\uff0c\u6211\u4eec\u5206\u6bb5\u8bb2\u8ff0\uff1a</p>\n<pre><code>// \u5982\u679c HaveOld \u4e3a true\uff0c\u5219\u8868\u660e\u53d8\u91cf\u9700\u8981\u6e05\u7406\uff0c\u53d8\u91cf\u53ef\u80fd\u4e3anil\n// \u5982\u679c HaveNew \u4e3a true\uff0c\u5219\u8868\u660e\u6709\u4e00\u4e2a\u65b0\u503c\u5c06\u8d4b\u4e88\u53d8\u91cf\uff0c\u8fd9\u4e2a\u65b0\u503c\u53ef\u80fd\u4e3a nil\n// \u5982\u679c CrashIfDeallocating \u4e3a true\uff0c\u5219\u8868\u660e\u65b0\u503c newObj \u662f\u91ca\u653e\u4e86\u7684\u5bf9\u8c61\uff08\u5e76\u4e0d\u662f\u8bf4 newObj \u4e3a nil\uff09\u6216\u8005\u662f\u4e00\u4e2a\u4e0d\u652f\u6301\u5f31\u5f15\u7528\u7684\u5bf9\u8c61\u3002\n// \u5982\u679c CrashIfDeallocating \u4e3a false\uff0c\u5219\u5c06\u65b0\u503c newObj \u7f6enil \u5e76 *location \u5f31\u53d8\u91cf\u8d4b\u503c\u4e3a nil\u3002 \ntemplate &lt;bool HaveOld, bool HaveNew, bool CrashIfDeallocating&gt;\nstatic id \nstoreWeak(id *location, objc_object *newObj)\n{\nassert(HaveOld  ||  HaveNew);\nif (!HaveNew) assert(newObj == nil);\n\nClass previouslyInitializedClass = nil;\nid oldObj;\nSideTable *oldTable;\nSideTable *newTable;\n\n// Acquire locks for old and new values.\n// \u4e3a\u65b0\u65e7\u503c\u83b7\u53d6\u9501\u3002\n// Order by lock address to prevent lock ordering problems. \n// \u6309\u9501\u5730\u5740\u6392\u5e8f\u4ee5\u9632\u6b62\u9501\u6392\u5e8f\u95ee\u9898\n// Retry if the old value changes underneath us.\n// \u5982\u679c\u4e0b\u9762\u7684\u65e7\u503c\u53d1\u751f\u66f4\u6539\uff0c\u8bf7\u91cd\u8bd5\u3002\nretry:\nif (HaveOld) {\noldObj = *location;\noldTable = &amp;SideTables()[oldObj];\n} else {\noldTable = nil;\n}\nif (HaveNew) {\nnewTable = &amp;SideTables()[newObj];\n} else {\nnewTable = nil;\n}\n</code></pre>\n<p>\u58f0\u660e\u4e00\u4e2a previouslyInitializedClass \u4fdd\u5b58\u5148\u524d\u521d\u59cb\u5316\u7684\u7c7b\uff0c\u58f0\u660e\u4e00\u4e2a\u65e7\u503c\u5bf9\u8c61 oldObj\uff0c\u4e00\u65b0\u4e00\u65e7\u4e24\u4e2a SideTable\uff08\u6563\u5217\u8868\uff09\u3002\u4ece objc_initWeak \u4f20\u5165\u7684 HaveOld \u4e3a false\uff0cHaveNew \u4e3a true\uff0c\u56e0\u6b64\u5c06 oldTable \u8d4b\u503c\u4e3a nil\uff0c\u4ece SideTables \u83b7\u53d6 newObj \u7684 SideTable \u8d4b\u503c\u7ed9 newTable\u3002\u4e24\u4e2a\u6563\u5217\u8868\u5904\u7406\u597d\u4e86\u540e\uff0c\u56e0\u4e3a\u5f53\u524d\u662f __weak \u53d8\u91cf\u7684\u521b\u5efa\uff0c\u5904\u7406\u7684\u662f\u65b0\u503c\uff0c\u6240\u4ee5\u4e0b\u9762\u53ea\u7ed9\u51fa\u65b0\u503c\u6709\u5173\u7684\u5904\u7406\u4ee3\u7801</p>\n<pre><code>// \u7ed9\u65b0\u65e7\u6563\u5217\u8868\u52a0\u9501\nSideTable::lockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\n\n// \u901a\u8fc7\u786e\u4fdd\u6ca1\u6709\u5f31\u5f15\u7528\u5bf9\u8c61\u5177\u6709\u672a\u521d\u59cb\u5316\u7684isa\uff0c\u9632\u6b62\u5f31\u5f15\u7528\u673a\u5236\u548c\u521d\u59cb\u5316\u673a\u5236\u4e4b\u95f4\u7684\u6b7b\u9501\u3002\nif (HaveNew  &amp;&amp;  newObj) {\nClass cls = newObj-&gt;getIsa();\nif (cls != previouslyInitializedClass  &amp;&amp;  \n!((objc_class *)cls)-&gt;isInitialized()) \n{\nSideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\n_class_initialize(_class_getNonMetaClass(cls, (id)newObj));\n\n// \u5982\u679c\u8fd9\u4e2a\u7c7b\u5b8c\u6210\u4e86+initialize\uff0c\u90a3\u6700\u597d\u3002\u5982\u679c\u8fd9\u4e2a\u7c7b\u4ecd\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u4e0a\u8fd0\u884c+initialize\uff08\u5373+initialize\uff0c\u8c03\u7528storeWeak\uff0c\u5728\u5176\u81ea\u8eab\u7684\u5b9e\u4f8b\u4e0a\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\uff0c\u4f46\u662f\u5c06\u663e\u793a\u4e3a\u521d\u59cb\u5316\u548c\u5c1a\u672a\u521d\u59cb\u5316\u4f5c\u4e3a\u4e0a\u8ff0\u68c0\u67e5\uff0c\u8bbe\u7f6e previouslyInitializedClass \u4ee5\u5728\u91cd\u8bd5\u65f6\u8bc6\u522b\u5b83\npreviouslyInitializedClass = cls;\n\ngoto retry;\n}\n}\n</code></pre>\n<p>\u6b64\u6b65\u9aa4\u4e3a\u786e\u4fdd\u5f31\u5f15\u7528\u5bf9\u8c61 newObj \u521d\u59cb\u5316\u4e86\uff0c\u9996\u5148\u901a\u8fc7\u83b7\u53d6 newObj \u7684 isa \u6307\u9488\u83b7\u53d6\u5b83\u7684\u7c7b\uff0c\u7136\u540e\u5224\u65ad\u5b83\u7684\u7c7b\u662f\u5426\u521d\u59cb\u5316\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u4fbf\u6253\u5f00\u65b0\u65e7\u6563\u5217\u8868\u7684\u9501\uff0c\u83b7\u53d6 newObj \u7684\u5143\u7c7b\u53d1\u9001 +initialize \u6d88\u606f\u8fdb\u884c\u521d\u59cb\u5316\u3002\u4e0b\u9762\u662f storeWeak \u51fd\u6570\u6700\u540e\u4e00\u90e8\u5206\uff1a</p>\n<pre><code>\n// Assign new value, if any.\nif (HaveNew) {\n// \u5f31\u5f15\u7528\u6ce8\u518c\u5931\u8d25\u4fbf\u8fd4\u56de nil\nnewObj = (objc_object *)weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location, CrashIfDeallocating);\n\n// \u8bbe\u7f6erefcount\u8868\u4e2d\u7684\u5f31\u5f15\u7528\u4f4d\nif (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) {\nnewObj-&gt;setWeaklyReferenced_nolock();\n}\n\n// \u4e0d\u8981\u5728\u5176\u4ed6\u5730\u65b9\u8bbe\u7f6e *location\uff0c\u5426\u5219\u4f1a\u6709\u51b2\u7a81\u3002\n*location = (id)newObj;\n}\n// \u6253\u5f00\u65b0\u65e7\u6563\u5217\u8868\u7684\u9501\nSideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\n\n// \u5f31\u5f15\u7528\u5904\u7406\u5b8c\u6bd5\uff0c\u8fd4\u56de\u65b0\u503c\nreturn (id)newObj;\n</code></pre>\n<p>\u9996\u5148\uff0c\u901a\u8fc7 weak_register_no_lock \u51fd\u6570\u5c06 __weak \u53d8\u91cf\u5bf9 newObj \u7684\u5f31\u5f15\u7528\u6ce8\u518c\u5230 newObj\u7684\u6563\u5217\u8868\u7684\u5f31\u5f15\u7528\u8868\u4e2d\uff0c\u5982\u679c\u6ce8\u518c\u6210\u529f\u5219\u8bbe\u7f6e newObj \u7684refcount\u8868\u4e2d\u7684 __weak \u53d8\u91cf\u5bf9\u5176\u7684\u5f15\u7528\u4e3a\u5f31\u5f15\u7528\uff0c\u7136\u540e\u5c06\u65b0\u503c\u8d4b\u7ed9 __weak \u53d8\u91cf\u3002\u6700\u540e\uff0c\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u4e86\uff0c\u6253\u5f00\u65b0\u65e7\u6563\u5217\u8868\u7684\u9501\uff0c\u8fd4\u56de\u65b0\u503c\u8d4b\u7ed9 __weak \u53d8\u91cf\u3002</p>\n<h4 id=\"_1\">\u5f31\u5f15\u7528\u6ce8\u518c</h4>\n<p>__weak \u53d8\u91cf\u5f15\u7528\u5bf9\u8c61\u65f6\uff0c\u9700\u8981\u5c06 __weak \u53d8\u91cf\u7684\u5f31\u5f15\u7528\u6ce8\u518c\u5230\u88ab\u5f15\u7528\u5bf9\u8c61\u7684\u5f31\u5f15\u7528\u8868\u4e2d\uff0c\u8fd9\u4e00\u64cd\u4f5c\u4fbf\u7531 weak_register_no_lock \u51fd\u6570\u5b8c\u6210\u3002\u6b64\u51fd\u6570\u7684\u5b9e\u73b0\u6211\u4eec\u5206\u4e24\u90e8\u5206\u7a0b\u5448\u73b0\uff1a</p>\n<pre><code>id \nweak_register_no_lock(weak_table_t *weak_table, id referent_id, \nid *referrer_id, bool crashIfDeallocating)\n{\nobjc_object *referent = (objc_object *)referent_id;\nobjc_object **referrer = (objc_object **)referrer_id;\n\nif (!referent  ||  referent-&gt;isTaggedPointer()) return referent_id;\n\n// ensure that the referenced object is viable\n// \u786e\u4fdd\u5f15\u7528\u7684\u5bf9\u8c61\u662f\u53ef\u7528\u7684\nbool deallocating;\nif (!referent-&gt;ISA()-&gt;hasCustomRR()) {\ndeallocating = referent-&gt;rootIsDeallocating();\n}\nelse {\nBOOL (*allowsWeakReference)(objc_object *, SEL) = \n(BOOL(*)(objc_object *, SEL))\nobject_getMethodImplementation((id)referent, \nSEL_allowsWeakReference);\nif ((IMP)allowsWeakReference == _objc_msgForward) {\nreturn nil;\n}\ndeallocating =\n! (*allowsWeakReference)(referent, SEL_allowsWeakReference);\n}\n\nif (deallocating) {\nif (crashIfDeallocating) {\n_objc_fatal(&quot;Cannot form weak reference to instance (%p) of &quot;\n&quot;class %s. It is possible that this object was &quot;\n&quot;over-released, or is in the process of deallocation.&quot;,\n(void*)referent, object_getClassName((id)referent));\n} else {\nreturn nil;\n}\n}\n</code></pre>\n<p>\u4e0a\u90e8\u5206\u662f\u4e3a\u4e86\u786e\u4fdd\u5f31\u5f15\u7528\u7684\u5bf9\u8c61 referent\uff08newObj\u5bf9\u8c61\uff09\u652f\u6301\u88ab\u5f31\u5f15\u7528\u3002\u9996\u5148\u5224\u65ad\u5f15\u7528\u5bf9\u8c61 referent \u7684 isa \u4e2d\u662f\u5426\u6709\u81ea\u5b9a\u4e49 retain \u548c release \u5b9e\u73b0\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8c03\u7528 rootIsDeallocating() \u51fd\u6570\u68c0\u67e5 referent \u662f\u5426\u5728\u6790\u6784\uff08\u5373\u662f\u5426\u88ab\u91ca\u653e\uff09\u3002</p>\n<p>\u5982\u679creferent \u7684 isa \u4e2d\u6709\u81ea\u5b9a\u4e49 retain \u548c release \u5b9e\u73b0\uff0c\u9996\u5148\u4f1a\u83b7\u53d6 referent \u4e2d SEL_allowsWeakReference \u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u5982\u679c\u83b7\u53d6\u7684\u662f _objc_msgForward \u6d88\u606f\u8f6c\u53d1\u51fd\u6570\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u5f15\u7528\u5bf9\u8c61\u4e0d\u652f\u6301\u5f31\u5f15\u7528\u3002\u53cd\u4e4b\uff0c\u4fbf\u53d1\u9001 SEL_allowsWeakReference \u6d88\u606f\u53bb\u5224\u65ad\u8be5\u5bf9\u8c61\u662f\u5426\u652f\u6301\u5f31\u5f15\u7528\uff0c\u5982\u679c\u652f\u6301\u5219\u8868\u793a referent \u5f15\u7528\u5bf9\u8c61\u4e0d\u5728\u6790\u6784\u3002</p>\n<p>\u5982\u679c\u8be5\u5f15\u7528\u5bf9\u8c61\u5728\u6790\u6784\u5e76\u4e14 crashIfDeallocating\uff08\u63a7\u5236\u5f15\u7528\u5bf9\u8c61\u6790\u6784\u662f\u5426\u9700crash\uff09\u4e3atrue\uff0c\u5219crash\u3002\u5982\u679c crashIfDeallocating \u4e3a false\uff0c\u5219\u8fd4\u56de nil \u8868\u793a\u6ce8\u518c\u5f31\u5f15\u7528\u5931\u8d25\u3002</p>\n<pre><code>// now remember it and where it is being stored\nweak_entry_t *entry;\nif ((entry = weak_entry_for_referent(weak_table, referent))) {\nappend_referrer(entry, referrer);\n} \nelse {\nweak_entry_t new_entry(referent, referrer);\nweak_grow_maybe(weak_table);\nweak_entry_insert(weak_table, &amp;new_entry);\n}\n\n// Do not set *referrer. objc_storeWeak() requires that the \n// value not change.\n\nreturn referent_id;\n}\n</code></pre>\n<p>\u8fd9\u4e0b\u534a\u90e8\u5206\u5c31\u662f\u5c06 __weak \u53d8\u91cf\u7684\u5f31\u5f15\u7528\u6307\u9488\u5b58\u50a8\u5230\u88ab\u5f15\u7528\u5bf9\u8c61 newObj \u7684\u5f31\u5f15\u7528\u8868\u4e2d\uff0c\u5b8c\u6210\u6ce8\u518c\u3002\u9996\u5148\u901a\u8fc7 weak_entry_for_referent \u51fd\u6570\u53bb\u67e5\u627e newObj \u5bf9\u5e94\u7684 SideTable \u7684 weak_table \u8868\u4e2d\u7684\u5bf9\u5e94 newObj \u7684\u5f31\u5f15\u7528\u6761\u76ee entry\u3002\u5982\u679c\u4e0d\u5b58\u5728 entry\uff0c\u5219\u7528 newobj \u548c __weak\u53d8\u91cf\u6307\u9488\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5f31\u5f15\u7528\u6761\u76ee new_entry\u3002\u63a5\u4e0b\u6765\u6267\u884c weak_grow_maybe \u51fd\u6570\u770b weak_table \u662f\u5426\u9700\u8981\u6269\u5bb9\u3002</p>\n<h5 id=\"weak_grow_maybe-weak_resize\">weak_grow_maybe \u548c weak_resize</h5>\n<pre><code>#define TABLE_SIZE(entry) (entry-&gt;mask ? entry-&gt;mask + 1 : 0)\n\nstatic void weak_grow_maybe(weak_table_t *weak_table)\n{\nsize_t old_size = TABLE_SIZE(weak_table);\n\n// Grow if at least 3/4 full.\n// \u5982\u679c\u5f53\u524d\u6761\u76ee\u6570\u5df2\u6ee1\u5bb9\u91cf\u7684 3/4 \u5219\u5141\u8bb8\u6269\u5bb9\n// \u5982\u679c\u662f\u521d\u6b21\u7684\u8bdd\u6269\u5bb9 64\uff0c\u4e4b\u540e\u4ee5 2 \u500d\u589e\u52a0\nif (weak_table-&gt;num_entries &gt;= old_size * 3 / 4) {\nweak_resize(weak_table, old_size ? old_size*2 : 64);\n}\n}\n</code></pre>\n<p>\u5982\u679c newObj \u662f\u7b2c\u4e00\u6b21\u88ab\u5f15\u7528\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u7684 weak_table \u7684\u5bb9\u91cf mask \u5e94\u4e3a 0\uff0c\u5219 old_size = 0\uff0c weak_table \u7684\u5f31\u5f15\u7528\u6761\u76ee\u603b\u6570\u81ea\u7136\u4e5f\u4e3a 0\u3002\u6ee1\u8db3\u6269\u5bb9\u6761\u4ef6\uff0c\u56e0\u6b64\u521d\u6b21\u6269\u5bb9\u4e3a 64\uff0c\u6267\u884c weak_resize(weak_table, 64)\u3002</p>\n<p>weak_resize \u662f\u5bf9 weak_table \u6269\u5bb9\u7684\u51fd\u6570\uff0c\u5176\u5b9e\u73b0\u5982\u4e0b\uff1a</p>\n<pre><code>static void weak_resize(weak_table_t *weak_table, size_t new_size)\n{\nsize_t old_size = TABLE_SIZE(weak_table);\n\nweak_entry_t *old_entries = weak_table-&gt;weak_entries;\nweak_entry_t *new_entries = (weak_entry_t *)\ncalloc(new_size, sizeof(weak_entry_t));\n\nweak_table-&gt;mask = new_size - 1;\nweak_table-&gt;weak_entries = new_entries;\nweak_table-&gt;max_hash_displacement = 0;\nweak_table-&gt;num_entries = 0;  // restored by weak_entry_insert below\n\nif (old_entries) {\nweak_entry_t *entry;\nweak_entry_t *end = old_entries + old_size;\nfor (entry = old_entries; entry &lt; end; entry++) {\nif (entry-&gt;referent) {\nweak_entry_insert(weak_table, entry);\n}\n}\nfree(old_entries);\n}\n}\n</code></pre>\n<p>\u521b\u5efa\u4e00\u4e2a weak_entry_t \u5b9e\u4f8b old_entries \u4fdd\u5b58 weak_table \u5f31\u5f15\u7528\u8868\u4e2d\u7684\u5f31\u5f15\u7528\u6761\u76ee\u5217\u8868\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a 64 \u683c\u7684\u65b0\u5f31\u5f15\u7528\u6761\u76ee\u5217\u8868\uff0c\u63a5\u7740\u66f4\u65b0\u8bbe\u7f6e weak_table \u7684\u5bb9\u91cf\u5927\u5c0f\u3001\u5f31\u5f15\u7528\u6761\u76ee\u5217\u8868\u3001\u6700\u5927\u54c8\u5e0c\u4f4d\u79fb\u6570\u3001\u6761\u76ee\u603b\u6570\u3002\u6700\u540e\uff0c\u5982\u679c\u65e7\u5f31\u5f15\u7528\u6761\u76ee\u5217\u8868 old_entries \u5b58\u5728\u6570\u636e\uff0c\u5219\u5c06\u65e7\u6761\u76ee\u5217\u8868\u7684\u6570\u636e\u63d2\u5165 weak_table \u65b0\u6269\u5bb9\u7684\u6761\u76ee\u5217\u8868\u4e2d\u5e76\u91ca\u653e\u65e7\u6761\u76ee\u5217\u8868\u3002</p>\n<p>\u6269\u5bb9\u5b8c\u540e\uff0c\u4fbf\u5f00\u59cb\u5c06\u65b0\u521b\u5efa\u7684\u6761\u76ee\u63d2\u5165 weak_table \u7684\u6761\u76ee\u5217\u8868 weak_entries \u4e2d\u3002</p>\n<h5 id=\"weak_entry_insert\">weak_entry_insert</h5>\n<pre><code>static void weak_entry_insert(weak_table_t *weak_table, weak_entry_t *new_entry)\n{\nweak_entry_t *weak_entries = weak_table-&gt;weak_entries;\nassert(weak_entries != nil);\n\nsize_t begin = hash_pointer(new_entry-&gt;referent) &amp; (weak_table-&gt;mask);\nsize_t index = begin;\nsize_t hash_displacement = 0;\nwhile (weak_entries[index].referent != nil) {\nindex = (index+1) &amp; weak_table-&gt;mask;\nif (index == begin) bad_weak_table(weak_entries);\nhash_displacement++;\n}\n\nweak_entries[index] = *new_entry;\nweak_table-&gt;num_entries++;\n\nif (hash_displacement &gt; weak_table-&gt;max_hash_displacement) {\nweak_table-&gt;max_hash_displacement = hash_displacement;\n}\n}\n</code></pre>\n<p>\u901a\u8fc7 hash_pointer(new_entry-&gt;referent) \u548c weak_table-&gt;mask \u7684\u4e0e\u8fd0\u7b97\u51b3\u5b9a\u65b0\u5f31\u5f15\u7528\u6761\u76ee\u5728 weak_entries \u7684\u521d\u59cb\u4e0b\u6807\uff0c\u5982\u679c weak_entries \u4e2d\u8be5\u4e0b\u6807\u4e2d\u6ca1\u88ab\u7528\uff0c\u5219\u5c06 new_entry \u5b58\u653e\u5728\u6b64\u5904\uff0cweak_table \u7684 num_entries \u81ea\u589e\u957f 1\u3002</p>\n<p>\u5982\u679c\u8be5\u521d\u59cb\u4e0b\u6807\u4e2d\u5df2\u88ab\u5b58\u653e\u4e86\u6761\u76ee\uff0c\u5219\u5faa\u73af\u5c06 hash_pointer() \u8ba1\u7b97\u7684 hash\u503c + 1 \u518d\u6b21\u4e0e weak_table-&gt;mask \u8fdb\u884c\u201c\u4e0e\u8fd0\u7b97\u201d\u5e76\u4e14\u54c8\u5e0c\u4f4d\u79fb\u6570\u81ea\u589e\u52a0 1\uff0c\u5982\u679c\u6ca1\u627e\u5230\u53ef\u5b58\u50a8\u7684\u4f4d\u7f6e\u5219\u4f1a\u6267\u884c bad_weak_table \u62a5 \u201cThis may be a runtime bug or a memory error somewhere else.\u201d \u9519\u8bef\u3002</p>\n<p>\u5982\u679c\u627e\u5230\u53ef\u7528\u7684\u4f4d\u7f6e\uff0c\u5219 new_entry \u5c06\u5b58\u653e\u5230 weak_entries \u4e2d\u3002\u6700\u540e\uff0c\u5982\u679c\u54c8\u5e0c\u4f4d\u79fb\u6570\u5927\u4e8e weak_table \u4e2d\u5b58\u50a8\u7684\u6700\u5927\u54c8\u5e0c\u4f4d\u79fb\u6570\uff0c\u5219\u66f4\u65b0 weak_table \u4e2d\u7684 max_hash_displacement \u503c\u4e3a hash_displacement\u3002 \u5230\u6b64\u5904\uff0c\u5f31\u5f15\u7528\u7684\u6ce8\u518c\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002</p>\n<h5 id=\"append_referrer\">append_referrer</h5>\n<p>\u5982\u679c newObj \u662f\u4e00\u4e2a\u88ab\u5176\u4ed6\u53d8\u91cf\u5f31\u5f15\u7528\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u80fd\u901a\u8fc7 weak_entry_for_referent \u51fd\u6570\u627e\u5230 newObj \u5bf9\u5e94\u7684\u5f31\u5f15\u7528\u6761\u76ee\u3002\u5c06 __weak \u53d8\u91cf\u7684\u6307\u9488\u4fdd\u5b58\u5230\u5f31\u5f15\u7528\u6761\u76ee\u7684\u5f15\u7528\u6307\u9488\u6570\u7ec4\u4e2d\u5b8c\u6210\u6ce8\u518c\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u600e\u4e48\u6837\u7684</p>\n<pre><code>static void append_referrer(weak_entry_t *entry, objc_object **new_referrer)\n{\nif (! entry-&gt;out_of_line()) {\n// Try to insert inline.\nfor (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {\nif (entry-&gt;inline_referrers[i] == nil) {\nentry-&gt;inline_referrers[i] = new_referrer;\nreturn;\n}\n}\n\n// Couldn't insert inline. Allocate out of line.\nweak_referrer_t *new_referrers = (weak_referrer_t *)\ncalloc(WEAK_INLINE_COUNT, sizeof(weak_referrer_t));\n// This constructed table is invalid, but grow_refs_and_insert\n// will fix it and rehash it.\nfor (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {\nnew_referrers[i] = entry-&gt;inline_referrers[i];\n}\nentry-&gt;referrers = new_referrers;\nentry-&gt;num_refs = WEAK_INLINE_COUNT;\nentry-&gt;out_of_line_ness = REFERRERS_OUT_OF_LINE;\nentry-&gt;mask = WEAK_INLINE_COUNT-1;\nentry-&gt;max_hash_displacement = 0;\n}\n</code></pre>\n<p>\u4e0a\u90e8\u5206\uff0c\u5224\u65ad\u5f31\u5f15\u7528\u6761\u76ee\u4e2d\u5b58\u653e\u7684\u5f15\u7528\u6307\u9488\u6570\u8d85\u8fc7\u4e86 inline_referrers \u6570\u7ec4\u7684\u5bb9\u91cf\u3002\u5982\u679c\u6ca1\u6709\u8d85\u8fc7\u7684\u8bdd\uff08\u6709\u53ef\u80fd\u5bb9\u91cf\u5df2\u6ee1\uff09\uff0c\u5219\u904d\u5386 inline_referrers \u627e\u5230\u7a7a\u4f4d\u7f6e\u5b58\u653e new_referrer\u3002\u5982\u679c inline_referrers \u5bb9\u91cf\u5df2\u6ee1\uff0c\u6539\u7528 entry \u7684 referrers \u5217\u8868\u5b58\u653e\u5f15\u7528\u6307\u9488\u3002\u9996\u5148\uff0c\u5c06 inline_referrers \u4e2d\u5b58\u653e\u7684\u5f15\u7528\u6307\u9488\u52a0\u5230 referrers \u4e2d\uff0c\u66f4\u65b0\u8bbe\u7f6e num_refs\u3001out_of_line_ness\uff08\u662f\u5426\u8d85\u51fa\u4e86inline_referrers\u6570\u7ec4\u7684\u5bb9\u91cf\uff09\u3001mask\u3001max_hash_displacement\u3002\u63a5\u4e0b\u6765\u5c31\u8fdb\u5165\u4e0b\u90e8\u5206</p>\n<pre><code>assert(entry-&gt;out_of_line());\n\nif (entry-&gt;num_refs &gt;= TABLE_SIZE(entry) * 3/4) {\nreturn grow_refs_and_insert(entry, new_referrer);\n}\n</code></pre>\n<p>\u5982\u679c entry \u7684\u5f15\u7528\u6307\u9488\u6570\u8fbe\u5230\u4e86\u5b58\u653e\u5bb9\u91cf\u7684 3/4\uff0c\u90a3\u4e48\u5bf9 new_referrer \u8fdb\u884c\u6269\u5bb9\u5e76\u4e14\u63d2\u5165 new_referrer\u3002</p>\n<h4 id=\"grow_refs_and_insert\">grow_refs_and_insert</h4>\n<pre><code>#define TABLE_SIZE(entry) (entry-&gt;mask ? entry-&gt;mask + 1 : 0)\nstatic void grow_refs_and_insert(weak_entry_t *entry, \nobjc_object **new_referrer)\n{\nassert(entry-&gt;out_of_line());\n\nsize_t old_size = TABLE_SIZE(entry);\nsize_t new_size = old_size ? old_size * 2 : 8;\n\nsize_t num_refs = entry-&gt;num_refs;\nweak_referrer_t *old_refs = entry-&gt;referrers;\nentry-&gt;mask = new_size - 1;\n\nentry-&gt;referrers = (weak_referrer_t *)\ncalloc(TABLE_SIZE(entry), sizeof(weak_referrer_t));\nentry-&gt;num_refs = 0;\nentry-&gt;max_hash_displacement = 0;\n\nfor (size_t i = 0; i &lt; old_size &amp;&amp; num_refs &gt; 0; i++) {\nif (old_refs[i] != nil) {\nappend_referrer(entry, old_refs[i]);\nnum_refs--;\n}\n}\n// Insert\nappend_referrer(entry, new_referrer);\nif (old_refs) free(old_refs);\n}\n</code></pre>\n<p>\u8fd9\u4e2a\u51fd\u6570\u548c weakTable \u7684\u6269\u5bb9\u51fd\u6570 weak_resize \u4e00\u6837\uff0c\u9996\u5148\u901a\u8fc7 old_size \u8ba1\u7b97\u51fa\u6269\u5bb9\u7684\u5927\u5c0f new_size\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a weak_referrer_t \u5b9e\u4f8b old_refs \u5b58\u653e entry \u4e2d referrers \u5217\u8868\u7684\u5f15\u7528\u6307\u9488\uff0c\u7136\u540e\u5bf9 entry \u7684 referrers \u8fdb\u884c\u521d\u59cb\u5316\u6269\u5bb9\u3002\u6700\u540e\uff0c\u5982\u679c old_refs \u6709\u6570\u636e\uff08\u5373\u539f entry \u5b58\u5728\u7684\u5f15\u7528\u6307\u9488\uff09\uff0c\u5c06\u5f15\u7528\u6307\u9488\u901a\u8fc7 append_referrer \u63d2\u5165\u5230\u6269\u5bb9\u540e\u7684 referrers \u4e2d\uff0c\u6b64\u6b65\u9aa4\u4e3a\u9012\u5f52\u8c03\u7528\u3002\u63d2\u5165\u7684\u4e3b\u8981\u4ee3\u7801\u4fbf\u662f append_referrer \u7684\u6700\u540e\u4e00\u90e8\u5206\uff0c\u5982\u4e0b</p>\n<pre><code>size_t begin = w_hash_pointer(new_referrer) &amp; (entry-&gt;mask);\nsize_t index = begin;\nsize_t hash_displacement = 0;\nwhile (entry-&gt;referrers[index] != nil) {\nhash_displacement++;\nindex = (index+1) &amp; entry-&gt;mask;\nif (index == begin) bad_weak_table(entry);\n}\nif (hash_displacement &gt; entry-&gt;max_hash_displacement) {\nentry-&gt;max_hash_displacement = hash_displacement;\n}\nweak_referrer_t &amp;ref = entry-&gt;referrers[index];\nref = new_referrer;\nentry-&gt;num_refs++;\n}\n</code></pre>\n<p>\u4e0a\u65b9\u4ee3\u7801\u548c weakTable \u7684 weak_entry_insert \u51fd\u6570\u5b9e\u73b0\u539f\u7406\u4e00\u6837\uff0c\u4fbf\u4e0d\u518d\u8bb2\u8ff0\u3002\u4ece\u4e0a\u9762\u5206\u6790\u4e0b\u6765\uff0c\u53ef\u89c1 weakTable \u7684weak_entries \u548c entry \u7684referrers \u4e00\u6837\u662f\u4e00\u4e2a\u53ef\u4ee5\u81ea\u52a8\u6269\u5bb9\u7684\u6570\u7ec4\uff0c\u800c entry \u7684inline_referrers \u662f\u4e00\u4e2a\u4e0d\u53ef\u6269\u5bb9\u7684\u6570\u7ec4\u3002</p>\n<h4 id=\"__weak_2\">__weak \u53d8\u91cf\u9500\u6bc1</h4>\n<p>__weak \u53d8\u91cf\u9500\u6bc1\u4f1a\u8c03\u7528 objc_destroyWeak \u8fd9\u4e2a\u51fd\u6570</p>\n<pre><code>void\nobjc_destroyWeak(id *location)\n{\n(void)storeWeak&lt;true/*old*/, false/*new*/, false/*crash*/&gt;\n(location, nil);\n}\n</code></pre>\n<p>\u5176\u4e2d\u5b9e\u73b0\u4e5f\u662f\u901a\u8fc7 storeWeak \u51fd\u6570\u5c06 __weak \u53d8\u91cf\u7f6e\u4e3anil\uff0c\u4e0b\u9762\u53ea\u663e\u793a\u76f8\u5173\u4ee3\u7801</p>\n<pre><code>template &lt;bool HaveOld, bool HaveNew, bool CrashIfDeallocating&gt;\nstatic id \nstoreWeak(id *location, objc_object *newObj)\n{\nassert(HaveOld  ||  HaveNew);\nif (!HaveNew) assert(newObj == nil);\n\nClass previouslyInitializedClass = nil;\nid oldObj;\nSideTable *oldTable;\nSideTable *newTable;\n\nretry:\nif (HaveOld) {\noldObj = *location;\noldTable = &amp;SideTables()[oldObj];\n} else {\noldTable = nil;\n}\nif (HaveNew) {\nnewTable = &amp;SideTables()[newObj];\n} else {\nnewTable = nil;\n}\n\nSideTable::lockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\n\nif (HaveOld  &amp;&amp;  *location != oldObj) {\nSideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\ngoto retry;\n}\n\n// Clean up old value, if any.\nif (HaveOld) {\nweak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);\n}\n\nSideTable::unlockTwo&lt;HaveOld, HaveNew&gt;(oldTable, newTable);\n\nreturn (id)newObj;\n}\n\n</code></pre>\n<p>\u4ece objc_destroyWeak \u51fd\u6570\u4f20\u5165\u7684 HaveOld = true\u3001HaveNew = false\u3001CrashIfDeallocating = false\uff0c\u9996\u5148\u5c06 __weak \u53d8\u91cf\u7684\u5185\u5b58\u6307\u9488\u6307\u5411 oldObj\uff0c\u5c06\u5f53\u524d\u503c\u53d8\u6210\u65e7\u503c\uff0c\u5bf9\u5e94\u7684\u4ece SideTables \u53d6\u51fa\u5bf9\u5e94\u7684 SideTable \u4e3a oldTable\uff0c\u5c06 newTable \u8d4b\u503c\u4e3a nil\u3002\u7136\u540e\uff0c\u5c06 oldTable \u548c newTable \u52a0\u9501\uff0c\u5982\u679c\u65e7\u503c\u5b58\u5728\u5e76\u4e14\u65e7\u503c __weak \u53d8\u91cf\u5185\u5b58\u5730\u5740\u4e2d\u7684\u503c\u548c\u65e7\u503c\u4e0d\u76f8\u7b49\u7684\u8bdd\uff0c\u90a3\u4e48\u9700\u8981\u91cd\u65b0\u6267\u884c\u7b2c\u4e00\u6b65\u9aa4\u4ee5\u4fdd\u8bc1\u9500\u6bc1\u5de5\u4f5c\u8fdb\u884c\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u6ce8\u9500 oldObj \u5bf9\u5e94\u7684 weak_table \u4e2d __weak \u53d8\u91cf\u7684\u5f31\u5f15\u7528\u3002\u6700\u540e\uff0c\u89e3\u5f00 oldTable \u548c newTable \u7684\u9501\uff0c\u8fd4\u56de nil\uff0c\u5c06 __weak \u53d8\u91cf\u7f6e nil\u3002</p>\n<h5 id=\"weak_unregister_no_lock\">weak_unregister_no_lock</h5>\n<pre><code>void\nweak_unregister_no_lock(weak_table_t *weak_table, id referent_id, \nid *referrer_id)\n{\nobjc_object *referent = (objc_object *)referent_id;\nobjc_object **referrer = (objc_object **)referrer_id;\n\nweak_entry_t *entry;\n\nif (!referent) return;\n\nif ((entry = weak_entry_for_referent(weak_table, referent))) {\nremove_referrer(entry, referrer);\nbool empty = true;\nif (entry-&gt;out_of_line()  &amp;&amp;  entry-&gt;num_refs != 0) {\nempty = false;\n}\nelse {\nfor (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {\nif (entry-&gt;inline_referrers[i]) {\nempty = false; \nbreak;\n}\n}\n}\n\nif (empty) {\nweak_entry_remove(weak_table, entry);\n}\n}\n\n// Do not set *referrer = nil. objc_storeWeak() requires that the \n// value not change.\n}\n</code></pre>\n<p>\u9996\u5148\uff0c\u901a\u8fc7 weak_entry_for_referent \u627e\u5230 weak_table \u4e2d\u7684\u5f31\u5f15\u7528\u6761\u76ee entry\uff0c\u7136\u540e\u901a\u8fc7 remove_referrer \u51fd\u6570\u4ece entry \u7684\u5f15\u7528\u6307\u9488\u5217\u8868\u4e2d\u5220\u9664 __weak\u53d8\u91cf\u6307\u9488\u3002\u5982\u679c entry \u4e2d\u6ca1\u6709\u5f15\u7528\u6307\u9488\u4e86\uff0c\u90a3\u4e48\u4fbf\u4f1a\u6267\u884c weak_entry_remove \u4ece\u5f31\u5f15\u7528\u8868 weak_table \u4e2d\u5220\u9664\u8be5\u5f31\u5f15\u7528\u6761\u76ee\u3002</p>\n<h5 id=\"remove_referrer\">remove_referrer</h5>\n<pre><code>static void remove_referrer(weak_entry_t *entry, objc_object **old_referrer)\n{\nif (! entry-&gt;out_of_line()) {\nfor (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) {\nif (entry-&gt;inline_referrers[i] == old_referrer) {\nentry-&gt;inline_referrers[i] = nil;\nreturn;\n}\n}\n_objc_inform(&quot;Attempted to unregister unknown __weak variable &quot;\n&quot;at %p. This is probably incorrect use of &quot;\n&quot;objc_storeWeak() and objc_loadWeak(). &quot;\n&quot;Break on objc_weak_error to debug.\\n&quot;, \nold_referrer);\nobjc_weak_error();\nreturn;\n}\n\nsize_t begin = w_hash_pointer(old_referrer) &amp; (entry-&gt;mask);\nsize_t index = begin;\nsize_t hash_displacement = 0;\nwhile (entry-&gt;referrers[index] != old_referrer) {\nindex = (index+1) &amp; entry-&gt;mask;\nif (index == begin) bad_weak_table(entry);\nhash_displacement++;\nif (hash_displacement &gt; entry-&gt;max_hash_displacement) {\n_objc_inform(&quot;Attempted to unregister unknown __weak variable &quot;\n&quot;at %p. This is probably incorrect use of &quot;\n&quot;objc_storeWeak() and objc_loadWeak(). &quot;\n&quot;Break on objc_weak_error to debug.\\n&quot;, \nold_referrer);\nobjc_weak_error();\nreturn;\n}\n}\nentry-&gt;referrers[index] = nil;\nentry-&gt;num_refs--;\n}\n</code></pre>\n<p>\u5982\u679c\uff0centry \u7684\u5f15\u7528\u6307\u9488\u6570\u4e0d\u8d85\u8fc7 inline_referrers \u7684\u5bb9\u91cf\uff0c\u90a3\u4e48\u904d\u5386 inline_referrers \u627e\u5230\u5f15\u7528\u6307\u9488\u7684\u4f4d\u7f6e\u5e76\u7f6e\u4e3anil\u3002\u5982\u679c\u5f15\u7528\u6307\u9488\u6570\u4e0d\u8d85\u8fc7 inline_referrers \u7684\u5bb9\u91cf\uff0c\u90a3\u4e48\u4fbf\u5f97\u53bb referrers \u4e2d\u627e\u5230\u5f15\u7528\u6307\u9488\u7f6e\u4e3anil\u5e76\u5c06 referrers \u7684\u957f\u5ea6\u51cf\u4e00\u3002\u5982\u679c\u627e\u4e0d\u5230\u4fbf\u4f1a\u8c03\u7528 objc_weak_error()</p>\n<h5 id=\"weak_entry_remove\">weak_entry_remove</h5>\n<pre><code>static void weak_entry_remove(weak_table_t *weak_table, weak_entry_t *entry)\n{\n// remove entry\nif (entry-&gt;out_of_line()) free(entry-&gt;referrers);\nbzero(entry, sizeof(*entry));\n\nweak_table-&gt;num_entries--;\n\nweak_compact_maybe(weak_table);\n}\n\n</code></pre>\n<p>\u6b64\u51fd\u6570\u5c06\u5f31\u5f15\u7528\u6761\u76ee entry \u4ece weak_table \u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u8fc7 weak_compact_maybe \u53bb\u68c0\u67e5\u662f\u5426\u9700\u8981\u7f29\u5c0f weak_table \u7684\u5bb9\u91cf\u3002</p>\n<h4 id=\"weak_compact_maybe\">weak_compact_maybe</h4>\n<pre><code>#define TABLE_SIZE(entry) (entry-&gt;mask ? entry-&gt;mask + 1 : 0)\n\nstatic void weak_compact_maybe(weak_table_t *weak_table)\n{\nsize_t old_size = TABLE_SIZE(weak_table);\n\n// Shrink if larger than 1024 buckets and at most 1/16 full.\nif (old_size &gt;= 1024  &amp;&amp; old_size / 16 &gt;= weak_table-&gt;num_entries) {\nweak_resize(weak_table, old_size / 8);\n// leaves new table no more than 1/2 full\n}\n}\n</code></pre>\n<p>\u5982\u679c\u8fbe\u5230\u7f29\u5c0f\u5bb9\u91cf\u5927\u5c0f\u7684\u8981\u6c42\uff0c\u4fbf\u901a\u8fc7 weak_resize \u51fd\u6570\u8c03\u6574\u5bb9\u91cf\u4e3a\u539f\u6765\u7684 1/8\u3002</p>"}