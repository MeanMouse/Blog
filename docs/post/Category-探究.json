{"title": "Category \u63a2\u7a76", "date": "2018-12-21 14:37:21", "categories": "iOS", "tags": "category", "keywords": "category,\u5206\u7c7b,\u5b9e\u4f8b\u53d8\u91cf,+ load,\u5173\u8054\u5bf9\u8c61,runtime", "description": "", "images": "/postCover/Category-\u63a2\u7a76.png", "file_name": "Category-\u63a2\u7a76", "short": " \u7b80\u4ecb \n \u4eba\u7c7b\u5728\u8fdb\u6b65\uff0c\u793e\u4f1a\u5728\u53d1\u5c55\uff0c\u968f\u7740\u65f6\u95f4\u53d8\u5316\u6211\u4eec\u4f1a\u9047\u5230\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u7531\u6b64\u4e5f\u8bde\u751f\u4e86\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u6211\u4eec\u7f16\u5199\u7684\u7c7b\u4e5f\u662f\u5982\u6b64\uff0c\u5728\u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\uff0c\u539f\u5b9a\u7c7b\u7684\u65b9\u6cd5\u4e5f\u5c31\u4e0d\u8db3\u4ee5\u5904\u7406\u65b0\u7684\u4e1a\u52a1\uff0c\u56e0\u6b64\u6211\u4eec\u5f00\u59cb\u60f3\u65b9\u8bbe\u6cd5\u53bb\u6269\u5c55\u7c7b\u4ee5\u5904\u7406\u65b0\u4e1a\u52a1\u3002\u5728 Objective-C 2.0 \u63d0\u4f9b\u7684 category \u7279\u6027\uff0c\u6b64\u7279\u6027\u53ef\u4e3a\u5df2\u6709\u7c7b\u6dfb\u52a0\u65b0\u7684\u65b9\u6cd5\u3002\u9664\u4e86\u4e3a\u5df2\u6709\u7c7b\u6dfb\u52a0\u65b0\u65b9\u6cd5\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u5206\u7c7b\u7684\u7279\u6027\u53bb\u62bd\u79bb\u51fa\u590d\u6742\u7c7b\u7684\u4e1a\u52a1\uff0c\u964d\u4f4e\u7c7b\u7684\u590d\u6742\u5ea6\u3002 \n ", "content": "<h3 id=\"_1\">\u7b80\u4ecb</h3>\n<p>\u4eba\u7c7b\u5728\u8fdb\u6b65\uff0c\u793e\u4f1a\u5728\u53d1\u5c55\uff0c\u968f\u7740\u65f6\u95f4\u53d8\u5316\u6211\u4eec\u4f1a\u9047\u5230\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u7531\u6b64\u4e5f\u8bde\u751f\u4e86\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u6211\u4eec\u7f16\u5199\u7684\u7c7b\u4e5f\u662f\u5982\u6b64\uff0c\u5728\u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\uff0c\u539f\u5b9a\u7c7b\u7684\u65b9\u6cd5\u4e5f\u5c31\u4e0d\u8db3\u4ee5\u5904\u7406\u65b0\u7684\u4e1a\u52a1\uff0c\u56e0\u6b64\u6211\u4eec\u5f00\u59cb\u60f3\u65b9\u8bbe\u6cd5\u53bb\u6269\u5c55\u7c7b\u4ee5\u5904\u7406\u65b0\u4e1a\u52a1\u3002\u5728 Objective-C 2.0 \u63d0\u4f9b\u7684 category \u7279\u6027\uff0c\u6b64\u7279\u6027\u53ef\u4e3a\u5df2\u6709\u7c7b\u6dfb\u52a0\u65b0\u7684\u65b9\u6cd5\u3002\u9664\u4e86\u4e3a\u5df2\u6709\u7c7b\u6dfb\u52a0\u65b0\u65b9\u6cd5\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u5206\u7c7b\u7684\u7279\u6027\u53bb\u62bd\u79bb\u51fa\u590d\u6742\u7c7b\u7684\u4e1a\u52a1\uff0c\u964d\u4f4e\u7c7b\u7684\u590d\u6742\u5ea6\u3002</p>\n<!-- more -->\n<h3 id=\"category-extension\">\u4e0e category \u76f8\u4f3c\u7684 extension</h3>\n<p>extension(\u7c7b\u6269\u5c55) \u4ece\u4ee3\u7801\u770b\u8d77\u6765\u548c category \u5341\u5206\u76f8\u50cf\uff0c\u4ee3\u7801\u5982\u4e0b:</p>\n<pre><code>// extension\n@interface Father ()\n@property (nonatomic,strong) NSString *name;\n\n- (void)say;\n\n@end\n\n// category\n@interface Father (skill)\n\n- (void)fastTalk;\n\n@end\n</code></pre>\n<p>\u867d\u7136\u4ee3\u7801\u770b\u4e0a\u53bb\u53ea\u6709\u62ec\u53f7\u4e2d\u6709\u540d\u79f0\u7684\u4e0d\u540c\uff0c\u4f46\u5176\u5b9e\u5b83\u4eec\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff0c\u5b83\u4eec\u7684\u4e0d\u540c\u4e4b\u5904\u5982\u4e0b\uff1a</p>\n<ul>\n<li>\u5728\u7f16\u8bd1\u4e0a\uff0cextension \u5728\u7f16\u8bd1\u671f\u65f6\u88ab\u786e\u5b9a\uff0c\u800c category \u662f\u5728\u8fd0\u884c\u671f\u88ab\u786e\u5b9a\u7684\u3002</li>\n<li>extension \u4e00\u822c\u662f\u7528\u6765\u9690\u85cf\u7c7b\u7684\u79c1\u6709\u4fe1\u606f\uff0c\u800c\u4e14\u4f60\u5fc5\u987b\u5728\u7c7b\u7684\u6e90\u7801\u6587\u4ef6\u5904\u624d\u80fd\u6dfb\u52a0\u3002\u800c category \u4e0d\u540c\uff0c\u53ea\u8981\u7c7b\u5b58\u5728\uff0c\u5c31\u80fd\u4e3a\u5176\u6dfb\u52a0 category\u3002</li>\n<li>category \u4e0d\u80fd\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff0c\u8fd9\u662f\u5b83\u4e0e extension \u6700\u5927\u7684\u533a\u522b\u3002\uff08category \u80fd\u901a\u8fc7\u7c7b\u5173\u8054\u6dfb\u52a0\u5c5e\u6027\uff0c\u8fd9\u5728\u540e\u9762\u63d0\u5230\uff09</li>\n</ul>\n<h3 id=\"category\">category \u5b9e\u73b0\u548c\u52a0\u8f7d</h3>\n<p>category \u7684\u6e90\u7801\u5b9a\u4e49\u5982\u4e0b</p>\n<pre><code>typedef struct objc_category *Category;\n\n// objc 2.0\nstruct objc_category {\nchar *category_name                                      OBJC2_UNAVAILABLE;\nchar *class_name                                         OBJC2_UNAVAILABLE;\nstruct objc_method_list *instance_methods                OBJC2_UNAVAILABLE;\nstruct objc_method_list *class_methods                   OBJC2_UNAVAILABLE;\nstruct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n}\n\n// objc_category \u7684\u5b9e\u73b0\nstruct category_t {\nconst char *name;\nclassref_t cls;\nstruct method_list_t *instanceMethods;\nstruct method_list_t *classMethods;\nstruct protocol_list_t *protocols;\nstruct property_list_t *instanceProperties;\n// Fields below this point are not always present on disk.\nstruct property_list_t *_classProperties;\n\nmethod_list_t *methodsForMeta(bool isMeta) {\nif (isMeta) return classMethods;\nelse return instanceMethods;\n}\n\nproperty_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);\n};\n</code></pre>\n<p>\u4ece\u5b9a\u4e49\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a</p>\n<ul>\n<li>name\uff1a\u5206\u7c7b\u540d\u79f0</li>\n<li>cls\uff1a\u5206\u7c7b\u6240\u5c5e\u7c7b</li>\n<li>instance_methods\uff1a\u7528\u4e8e\u5b58\u50a8\u5b9e\u4f8b\u65b9\u6cd5</li>\n<li>class_methods\uff1a\u7528\u4e8e\u5b58\u50a8\u7c7b\u65b9\u6cd5</li>\n<li>protocols\uff1a\u7528\u4e8e\u5b58\u50a8\u534f\u8bae\u65b9\u6cd5</li>\n<li>instanceProperties\uff1a\u7528\u4e8e\u5b58\u50a8\u6dfb\u52a0\u7684\u5c5e\u6027\uff0c\u4e0d\u4f1a\u751f\u6210\u5b9e\u4f8b\u53d8\u91cf\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u751f\u6210 setter \u548c getter \u65b9\u6cd5\u3002</li>\n<li>_classProperties\uff1a\u7528\u4e8e\u5b58\u50a8\u6dfb\u52a0\u7684\u7c7b\u7684\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u4e0d\u4f1a\u751f\u6210 setter \u548c getter \u65b9\u6cd5\u3002</li>\n</ul>\n<h4 id=\"instanceproperties-_classproperties\">\u4e3a\u4ec0\u4e48\u5b58\u5728 instanceProperties \u548c _classProperties</h4>\n<p>_classProperties \u7c7b\u7684\u5c5e\u6027\uff0c\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u53ef\u80fd\u5f88\u964c\u751f\uff0c\u5728\u5f00\u53d1\u4e2d\u5f88\u5c11\u4f7f\u7528\uff0c\u5b83\u7684\u5b9a\u4e49\u548c\u6211\u4eec\u5e38\u5b9a\u4e49\u7684\u5c5e\u6027\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7 setter \u548c getter\u65b9\u6cd5\u4e3a \u201c+ \u65b9\u6cd5\u201d\uff08\u7c7b\u65b9\u6cd5\uff09\u3002</p>\n<pre><code>// instance property\n@property (nonatomic,strong) NSString *name;\n\n- (NSString *)name;\n- (void)setName:(NSString *)name\n\n// class property\n@property (class,nonatomic,strong) NSString *name;\n\n+ (NSString *)name;\n+ (void)setName:(NSString *)name\n</code></pre>\n<p>\u5728\u524d\u9762\u8bf4\u4e86\uff1acategory \u662f\u4e0d\u80fd\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\u7684\uff0c\u6211\u4eec\u53ef\u80fd\u5c31\u4f1a\u7591\u60d1\u4e86\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709 instanceProperties \u548c _classProperties\uff0c\u8fd9\u6211\u4eec\u5c31\u5f97\u660e\u767d\u6210\u5458\u53d8\u91cf\u3001\u5b9e\u4f8b\u53d8\u91cf\u3001\u5c5e\u6027\u7684\u8054\u7cfb\u4e86\u3002</p>\n<pre><code>@interface Father : NSObject {\n\nint age;\nNSData *data;\n}\n\n@property (nonatomic,strong) NSString *name;\n\n@end\n</code></pre>\n<h5 id=\"_2\">\u6210\u5458\u53d8\u91cf</h5>\n<p>\u5728 @interface Father : NSObject {} \u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u90fd\u662f\u6210\u5458\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u81ea\u52a8\u4e3a\u6210\u5458\u53d8\u91cf\u58f0\u660e setter \u548c getter \u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7 .\u8bed\u6cd5\u7cd6\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\uff0c\u53ef\u901a\u8fc7 self -&gt; \u53d8\u91cf\u540d\u6216\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\uff0c\u5982\uff1a</p>\n<pre><code>age = 23;\nself -&gt; age = 24;\n</code></pre>\n<h5 id=\"_3\">\u5b9e\u4f8b\u53d8\u91cf</h5>\n<p>\u5b9e\u4f8b\u53d8\u91cf\u53c8\u662f\u4ec0\u4e48\u5462\uff0c\u4ece\u672c\u8d28\u4e0a\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u6210\u5458\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u4ece\u540d\u5b57\u4e0a\u5c31\u80fd\u4f53\u73b0\u51fa\u5176\u662f\u7c7b\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\u5982 data \u5c31\u662f\u7531 NSData \u7c7b\u5b9a\u4e49\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u800c age \u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b int \u53d8\u91cf\uff0c\u56e0\u6b64 age \u4e0d\u662f\u5b9e\u4f8b\u53d8\u91cf\u3002\u6240\u4ee5\u6211\u4eec\u5927\u6982\u53ef\u4ee5\u603b\u7ed3\u51fa\uff1a\u6210\u5458\u53d8\u91cf = \u5b9e\u4f8b\u53d8\u91cf + \u57fa\u672c\u6570\u636e\u7c7b\u578b\u53d8\u91cf\u3002</p>\n<h5 id=\"_4\">\u5c5e\u6027</h5>\n<p>\u6210\u5458\u53d8\u91cf\u7528\u4e8e\u7c7b\u5185\u90e8\uff0c\u6211\u4eec\u65e0\u6cd5\u4ece\u7c7b\u5916\u90e8\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\uff0c\u56e0\u6b64\u8bde\u751f\u4e86\u201c\u5c5e\u6027\u201d\uff0c\u5c5e\u6027\u53ef\u4ee5\u5141\u8bb8\u5728\u5185\u5916\u90e8\u65b9\u6cd5\uff0c\u5728\u5916\u90e8\u4f7f\u7528 \u7c7b\u5b9e\u4f8b.\u5c5e\u6027 \u8bbf\u95ee\uff0c\u5728\u7c7b\u5185\u90e8\u4f7f\u7528 self.\u5c5e\u6027\u540d\u6216\u8005 _\u53d8\u91cf\u540d\u8bbf\u95ee\uff0c\u4f46\u524d\u63d0\u662f\u4e3a\u5c5e\u6027\u751f\u6210\u4e86\u5b9e\u4f8b\u53d8\u91cf\u4ee5\u53ca\u5b9e\u4f8b\u53d8\u91cf\u7684 setter \u548c getter \u65b9\u6cd5\u3002</p>\n<p>\u5728 iOS 5 \u524d\u4f7f\u7528 @property \u58f0\u660e\u5c5e\u6027\u5e76\u58f0\u660e\u5c5e\u6027\u7684 setter \u548c getter \u65b9\u6cd5\uff0c\u9700\u5728 .m \u5b9e\u73b0\u6587\u4ef6\u4e2d\u4f7f\u7528 \u201c@sythesize \u5c5e\u6027\u540d = _\u5c5e\u6027\u540d\u201d \u751f\u6210\u4e0e\u5c5e\u6027\u5bf9\u5e94\u7684\u5b9e\u4f8b\u53d8\u91cf\u4ee5\u53ca\u5b9e\u73b0 setter \u548c getter \u65b9\u6cd5\uff0c\u5728 iOS 5 \u540e\u4f7f\u7528 @property\u58f0\u660e\u5c5e\u6027\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4e3a\u5c5e\u6027\u751f\u6210\u4e00\u4e2a\u540d\u79f0\u4e3a _\u5c5e\u6027\u540d\u7684\u5b9e\u4f8b\u53d8\u91cf\u5e76\u5b9e\u73b0 setter \u548c getter \u65b9\u6cd5\u3002</p>\n<h5 id=\"sythesize\">@sythesize</h5>\n<p>@sythesize \u9664\u4e86\u4e3a\u5c5e\u6027\u751f\u6210 setter \u548c getter \u65b9\u6cd5\u5916\u8fd8\u80fd\u6307\u5b9a\u5c5e\u6027\u5bf9\u5e94\u7684\u5b9e\u4f8b\u53d8\u91cf\u7684\u540d\u79f0\uff0c\u5982 @sythesize name\uff0c\u90a3\u4e48 name \u5c5e\u6027\u7684\u5b9e\u4f8b\u53d8\u91cf\u540d\u4e0d\u518d\u662f\u9ed8\u8ba4\u751f\u6210\u7684 _name \u800c\u662f name\uff0c\u5982\u679c @sythesize name = _name \u7684\u8bdd\uff0c\u5b9e\u4f8b\u53d8\u91cf\u540d\u4f9d\u7136\u4e3a _name\u3002</p>\n<h5 id=\"category_1\">\u5728 category \u4e2d\u6dfb\u52a0\u5c5e\u6027</h5>\n<p>\u5728 category \u4e2d\u6dfb\u52a0\u5c5e\u6027\u540e\u80fd\u7f16\u8bd1\u6210\u529f\uff0c\u4f46\u4e00\u65e6\u4f7f\u7528\u4e86\u5c5e\u6027\uff0c\u7a0b\u5e8f\u4fbf\u4f1a\u5d29\u6e83\uff0c\u539f\u56e0\u4e3a\uff1a\u672a\u627e\u5230\u5c5e\u6027\u7684 setter \u6216 getter \u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u4e8e\u662f\u6211\u4eec\u5f00\u59cb\u4e3a\u5c5e\u6027\u624b\u52a8\u5b9e\u73b0 setter \u6216 getter \u65b9\u6cd5\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u65e0\u6cd5\u8bbf\u95ee\u5230\u5c5e\u6027\u3002\u901a\u8fc7 runtime \u7684 class_copyPropertyList() \u83b7\u53d6\u7c7b\u7684\u6240\u6709\u5c5e\u6027 \u4ee5\u53ca class_copyIvarList() \u83b7\u53d6\u7c7b\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u5c5e\u6027\u5217\u8868\u4e2d\u5b58\u5728\u8be5\u5c5e\u6027\uff0c\u800c\u5728\u53d8\u91cf\u5217\u8868\u4e2d\u5374\u6ca1\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u77e5\u7f16\u8bd1\u5668\u672a\u7ed9\u5c5e\u6027\u751f\u6210\u5bf9\u5e94\u7684\u5b9e\u4f8b\u53d8\u91cf\uff0c\u56e0\u6b64\u624b\u52a8\u5b9e\u73b0 setter \u548c getter \u65b9\u6cd5\u7684\u60f3\u6cd5\u7834\u706d\u4e86\u3002\u5f53\u6211\u4eec\u8bd5\u56fe\u5728 category \u521b\u5efa\u6210\u5458\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5 Instance variables may not be placed in categories \u9519\u8bef\u3002</p>\n<p>\u6b63\u6240\u8c13\u4e0a\u6709\u653f\u7b56\u4e0b\u6709\u5bf9\u7b56\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6765\u4fdd\u5b58\u5c5e\u6027\u503c\uff0c\u5c31\u5982\u8fd9\u6837:</p>\n<pre><code>@interface NSObject (test)\n@property (nonatomic,strong) NSString *name;\n@end\n\nNSString *_name;\n@implementation NSObject (test)\n\n\n- (NSString *)name {\nreturn _name;\n}\n\n\n- (void)setName:(NSString *)name\n{\n_name = name;\n}\n\n@end\n</code></pre>\n<p>\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 runtime\u7684\u5173\u8054\u5bf9\u8c61 \u6765\u5b9e\u73b0\u5c5e\u6027\u7684 setter \u548c getter \u65b9\u6cd5</p>\n<pre><code>@interface NSObject (test)\n@property (nonatomic,strong) NSString *name;\n\n@end\n\n#import &lt;objc/runtime.h&gt;\n\n@implementation NSObject (test)\n\n\n- (NSString *)name {\nreturn objc_getAssociatedObject(self, @selector(name));\n}\n\n\n- (void)setName:(NSString *)name\n{\nobjc_setAssociatedObject(self, @selector(name), name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n@end\n</code></pre>\n<p>\u6240\u4ee5\u5728 category \u4e2d\u65e0\u6cd5\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff0c\u4f46\u662f\u53ef\u4ee5\u6dfb\u52a0\u5c5e\u6027\uff0c\u4f46\u662f\u4e0d\u80fd\u6dfb\u52a0\u7c7b\u5c5e\u6027\uff08\u540e\u8282\u5206\u7c7b\u7684\u52a0\u8f7d\u6709\u63d0\u5230\uff09\u3002</p>\n<h4 id=\"category_2\">\u7f16\u8bd1\u5668\u5bf9 category \u7684\u5904\u7406</h4>\n<pre><code>@interface NSObject (Category)\n\n\n- (void)printDescription;\n\n@end\n\n@implementation NSObject (Category)\n\n\n- (void)printDescription\n{\nNSLog(@&quot;%@&quot;,self.description);\n}\n\n@end\n</code></pre>\n<p>\u4f7f\u7528 clang -rewrite-objc \u6587\u4ef6\u540d.m \u547d\u4ee4\u5bf9\u4e0a\u9762\u4ee3\u7801\u8f6c\u6362\u6210\u6e90\u7801</p>\n<pre><code>static struct /*_method_list_t*/ {\nunsigned int entsize;  // sizeof(struct _objc_method)\nunsigned int method_count;\nstruct _objc_method method_list[1];\n} _OBJC_$_CATEGORY_INSTANCE_METHODS_NSObject_$_Category __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = {\nsizeof(_objc_method),\n1,\n{{(struct objc_selector *)&quot;printDescription&quot;, &quot;v16@0:8&quot;, (void *)_I_NSObject_Category_printDescription}}\n};\n\nextern &quot;C&quot; __declspec(dllimport) struct _class_t OBJC_CLASS_$_NSObject;\n\nstatic struct _category_t _OBJC_$_CATEGORY_NSObject_$_Category __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = \n{\n&quot;NSObject&quot;,\n0, // &amp;OBJC_CLASS_$_NSObject,\n(const struct _method_list_t *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_NSObject_$_Category,\n0,\n0,\n0,\n};\nstatic void OBJC_CATEGORY_SETUP_$_NSObject_$_Category(void ) {\n_OBJC_$_CATEGORY_NSObject_$_Category.cls = &amp;OBJC_CLASS_$_NSObject;\n}\n#pragma section(&quot;.objc_inithooks$B&quot;, long, read, write)\n__declspec(allocate(&quot;.objc_inithooks$B&quot;)) static void *OBJC_CATEGORY_SETUP[] = {\n(void *)&amp;OBJC_CATEGORY_SETUP_$_NSObject_$_Category,\n};\nstatic struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (&quot;__DATA, __objc_catlist,regular,no_dead_strip&quot;)))= {\n&amp;_OBJC_$_CATEGORY_NSObject_$_Category,\n};\nstatic struct IMAGE_INFO { unsigned version; unsigned flag; } _OBJC_IMAGE_INFO = { 0, 2 };\n\n</code></pre>\n<p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a</p>\n<ul>\n<li>\u9996\u5148\uff0c\u751f\u6210\u4e86\u65b9\u6cd5\u5217\u8868\u5bf9\u8c61 <em>OBJC</em>$<em>CATEGORY_INSTANCE_METHODS_NSObject</em>$_Category</li>\n<li>\u7136\u540e\uff0c\u7528\u65b9\u6cd5\u5217\u8868\u5bf9\u8c61\u521d\u59cb\u5316 <em>OBJC</em>$<em>CATEGORY_NSObject</em>$<em>Category (NSObject+Category)\u5206\u7c7b\u5bf9\u8c61\uff0c\u5728 OBJC_CATEGORY_SETUP</em>$<em>NSObject</em>$<em>Category \u65b9\u6cd5\u4e2d\u5c06 _OBJC</em>$<em>CATEGORY_NSObject</em>$<em>Category \u7684 cls \u6307\u5411 OBJC_CLASS</em>$_NSObject \uff08NSObject \u7c7b\uff09\u3002</li>\n<li>\u6700\u540e\uff0c\u5c06 NSObject+Category \u5206\u7c7b \u4fdd\u5b58\u5230 DATA\u6bb5\u4e0b\u7684objc_catlist section\u91cc\u7684 L_OBJC_LABEL_CATEGORY_$ \u4e2d\uff0c\u5728\u8fd0\u884c\u671f\u65f6\u7528\u4e8e\u5206\u7c7b\u7684\u52a0\u8f7d\u3002</li>\n</ul>\n<h4 id=\"category_3\">category \u52a0\u8f7d</h4>\n<p>Objective-C \u8fd0\u884c\u65f6\u5165\u53e3\u65b9\u6cd5\uff1a</p>\n<pre><code>// objc4-706  objc-os.mm\nvoid _objc_init(void)\n{\nstatic bool initialized = false;\nif (initialized) return;\ninitialized = true;\n\n// fixme defer initialization until an objc-using image is found?\nenviron_init();\ntls_init();\nstatic_init();\nlock_init();\nexception_init();\n\n_dyld_objc_notify_register(&amp;map_2_images, load_images, unmap_image);\n}\n\n// objc4-680  objc-os.mm\nvoid _objc_init(void)\n{\nstatic bool initialized = false;\nif (initialized) return;\ninitialized = true;\n\n// fixme defer initialization until an objc-using image is found?\nenviron_init();\ntls_init();\nstatic_init();\nlock_init();\nexception_init();\n\n// Register for unmap first, in case some +load unmaps something\n_dyld_register_func_for_remove_image(&amp;unmap_image);\ndyld_register_image_state_change_handler(dyld_image_state_bound,\n1/*batch*/, &amp;map_2_images);\ndyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &amp;load_images);\n}\n\n// objc4-437  objc-os.m\nvoid _objc_init(void)\n{\n// fixme defer initialization until an objc-using image is found?\nenviron_init();\ntls_init();\nlock_init();\nexception_init();\n\n// Register for unmap first, in case some +load unmaps something\n_dyld_register_func_for_remove_image(&amp;unmap_image);\ndyld_register_image_state_change_handler(dyld_image_state_bound,\n1/*batch*/, &amp;map_images);\ndyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &amp;load_images);\n}\n</code></pre>\n<p>\u4ee5\u4e0a\u662f\u4e09\u4e2a\u7248\u672c\u7684\u5b9a\u4e49\uff0c\u6700\u65b0\u7248\u672c 706 \u53d8\u5f97\u66f4\u7b80\u6d01\u4e86\u3002category \u9644\u52a0\u5230\u7c7b\u4e0a\u9762\u662f\u5728 map_images/map_2_images\uff08images\u8fd9\u91cc\u8868\u793a\u4e8c\u8fdb\u5236\u6587\u4ef6(\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u52a8\u6001\u94fe\u63a5\u5e93 .iso \u6587\u4ef6)\u7f16\u8bd1\u540e\u7684\u7b26\u53f7\u3001\u4ee3\u7801\uff09 \u7684\u65f6\u5019\u53d1\u751f\u7684\uff0cmap_images/map_2_images \u4e24\u4e2a\u7248\u672c\u4e2d\uff0c\u90fd\u5728\u5728\u65b9\u6cd5\u91cc\u8c03\u7528\u4e86 map_images_nolock \u65b9\u6cd5\uff0c\u5728 map_images_nolock \u51fd\u6570\u4e2d\u52a0\u8f7d images</p>\n<pre><code>// Find all images with Objective-C metadata.\nhCount = 0;\ni = infoCount;\nwhile (i--) {\nconst headerType *mhdr = (headerType *)infoList[i].imageLoadAddress;\n\nhi = _objc_addHeader(mhdr);\nif (!hi) {\n// no objc data in this entry\ncontinue;\n}\n\nhList[hCount++] = hi;\n\n\nif (PrintImages) {\n_objc_inform(&quot;IMAGES: loading image for %s%s%s%s%s\\n&quot;, \n_nameForHeader(mhdr), \nmhdr-&gt;filetype == MH_BUNDLE ? &quot; (bundle)&quot; : &quot;&quot;, \n_objcHeaderIsReplacement(hi) ? &quot; (replacement)&quot; : &quot;&quot;,\n_objcHeaderOptimizedByDyld(hi)?&quot; (preoptimized)&quot; : &quot;&quot;,\n_gcForHInfo2(hi));\n}\n}\n</code></pre>\n<p>\u5728\u52a0\u8f7d\u5b8c images \u540e\uff0c\u4fbf\u5728\u65b9\u6cd5\u672b\u5c3e\u8c03\u7528 _read_images\u51fd\u6570\uff0c\u6211\u4eec\u5728 _read_images\u51fd\u6570 \u627e\u5230\u5904\u7406\u5206\u7c7b\u7684\u76f8\u5173\u4ee3\u7801</p>\n<pre><code>// Discover categories. \nfor (EACH_HEADER) {\ncategory_t **catlist = \n_getObjc2CategoryList(hi, &amp;count);\nfor (i = 0; i &lt; count; i++) {\ncategory_t *cat = catlist[i];\n// Do NOT use cat-&gt;cls! It may have been remapped.\nclass_t *cls = remapClass(cat-&gt;cls);\n\n// Process this category. \n// First, register the category with its target class. \n// Then, rebuild the class's method lists (etc) if \n// the class is realized. \nBOOL classExists = NO;\nif (cat-&gt;instanceMethods ||  cat-&gt;protocols  \n||  cat-&gt;instanceProperties) \n{\naddUnattachedCategoryForClass(cat, cls, hi);\nif (isRealized(cls)) {\nremethodizeClass(cls);\nclassExists = YES;\n}\nif (PrintConnecting) {\n_objc_inform(&quot;CLASS: found category -%s(%s) %s&quot;, \ngetName(cls), cat-&gt;name, \nclassExists ? &quot;on existing class&quot; : &quot;&quot;);\n}\n}\n\nif (cat-&gt;classMethods  ||  cat-&gt;protocols  \n/* ||  cat-&gt;classProperties */) \n{\naddUnattachedCategoryForClass(cat, cls-&gt;isa, hi);\nif (isRealized(cls-&gt;isa)) {\nremethodizeClass(cls-&gt;isa);\n}\nif (PrintConnecting) {\n_objc_inform(&quot;CLASS: found category +%s(%s)&quot;, \ngetName(cls), cat-&gt;name);\n}\n}\n}\n}\n\n</code></pre>\n<p>\u9996\u5148\uff0c\u901a\u8fc7 <em>getObjc2CategoryList(hi, &amp;count) \u83b7\u53d6\u7684 catlist \u5c31\u662f\u5728\u7f16\u8bd1\u5668\u7f16\u8bd1\u65f6\u7684 L_OBJC_LABEL_CATEGORY</em>$\u3002\u83b7\u53d6\u5230 category_t \u5217\u8868\u540e\uff0c\u5f00\u59cb\u904d\u5386 catlist\uff0c\u5c06 instanceMethods\uff08\u5b9e\u4f8b\u65b9\u6cd5\uff09\u3001protocols\uff08\u534f\u8bae\uff09\u3001instanceProperties\uff08\u5c5e\u6027\uff09\u6dfb\u52a0\u5230\u7c7b\u4e0a\uff0c\u5c06 classMethods\uff08\u7c7b\u65b9\u6cd5\uff09\u3001protocols\uff08\u534f\u8bae\uff09\u6dfb\u52a0\u5230\u7c7b\u7684\u5143\u7c7b\uff08meta class\uff09\u4e0a\u3002\u5728\u6dfb\u52a0\u5230\u5143\u7c7b\u65f6\uff0c\u6709\u4e00\u6bb5\u6ce8\u91ca /<em> ||  cat-&gt;classProperties </em>/ \u53ef\u89c1\u5e76\u4e0d\u4f1a\u5c06 classProperties \uff08\u7c7b\u5c5e\u6027\uff09\u6dfb\u52a0\u5230\u5143\u7c7b\u4e0a\uff0c\u4e0d\u652f\u6301\u5728\u5206\u7c7b\u7ed9\u7c7b\u6dfb\u52a0\u7c7b\u5c5e\u6027\u3002</p>\n<h5 id=\"addunattachedcategoryforclass\">addUnattachedCategoryForClass \u51fd\u6570</h5>\n<pre><code>class_t *cls = remapClass(cat-&gt;cls);\naddUnattachedCategoryForClass(cat, cls, hi);\n\nstatic void addUnattachedCategoryForClass(category_t *cat, class_t *cls,\nheader_info *catHeader)\n{\nrwlock_assert_writing(&amp;runtimeLock);\n\nBOOL catFromBundle = (catHeader-&gt;mhdr-&gt;filetype == MH_BUNDLE) ? YES: NO;\n\n// DO NOT use cat-&gt;cls! \n// cls may be cat-&gt;cls-&gt;isa, or cat-&gt;cls may have been remapped.\n// \u83b7\u53d6\u6240\u6709\u672a\u8fdb\u884c\u5904\u7406\u7684\u5206\u7c7b\nNXMapTable *cats = unattachedCategories();\ncategory_list *list;\n\n// \u6839\u636e cls \u83b7\u53d6\u8be5\u7c7b\u672a\u5904\u7406\u7684\u5206\u7c7b\nlist = NXMapGet(cats, cls);\nif (!list) {\nlist = _calloc_internal(sizeof(*list) + sizeof(list-&gt;list[0]), 1);\n} else {\nlist = _realloc_internal(list, sizeof(*list) + sizeof(list-&gt;list[0]) * (list-&gt;count + 1));\n}\nlist-&gt;list[list-&gt;count++] = (category_pair_t){cat, catFromBundle};\nNXMapInsert(cats, cls, list);\n}\n</code></pre>\n<p>\u5b9e\u73b0\u4ee3\u7801\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5927\u81f4\u5185\u5bb9\u662f\uff1a\u83b7\u53d6\u6240\u6709\u672a\u8fdb\u884c\u5904\u7406\u7684\u5206\u7c7b\uff0c\u5982\u679c\u5f53\u524d\u7c7b\u5728 NXMapGet \u4e2d\u672a\u62e5\u6709\u672a\u5904\u7406\u7684\u5206\u7c7b\uff0c\u90a3\u4e48 list \u4e0d\u5b58\u5728\uff0c\u4fbf\u4f1a\u521d\u59cb\u5316 list\u3002\u5982\u679c list \u5b58\u5728\uff0c\u4fbf\u4f1a\u7528 list \u91cd\u65b0\u521d\u59cb\u5316\u5e76\u5c06\u5bb9\u91cf\u52a0 1\uff0c\u7136\u540e\u5c06\u5206\u7c7b\u6dfb\u52a0\u5230 list \u4e2d\uff0c\u6700\u540e\u5c06\u5206\u7c7b\u5217\u8868\u63d2\u5165\u5230 NXMapTable \u4e2d\u3002\u6240\u4ee5\u53ef\u89c1 addUnattachedCategoryForClass \u51fd\u6570\u662f\u5c06\u7c7b\u548c\u5206\u7c7b\u505a\u4e86\u4e00\u4e2a\u5173\u8054\u5b58\u50a8\u3002</p>\n<h5 id=\"remethodizeclass\">remethodizeClass \u51fd\u6570</h5>\n<p>remethodizeClass \u662f\u53bb\u5904\u7406\u5206\u7c7b\u65b9\u6cd5\u6dfb\u52a0\u7684\u5165\u53e3</p>\n<pre><code>// \u5220\u9664\u65e0\u5173\u5206\u7c7b\u7684\u4ee3\u7801\nstatic void remethodizeClass(struct class_t *cls)\n{\ncategory_list *cats;\nBOOL isMeta;\n\nrwlock_assert_writing(&amp;runtimeLock);\n\nisMeta = isMetaClass(cls);\n\n// Re-methodizing: check for more categories\nif ((cats = unattachedCategoriesForClass(cls))) {\n\nBOOL vtableAffected = NO;\n\n// Update methods, properties, protocols\n\nattachCategoryMethods(cls, cats, &amp;vtableAffected);\n\n_free_internal(cats);\n\n// Update method caches and vtables\nflushCaches(cls);\nif (vtableAffected) flushVtables(cls);\n}\n}\n</code></pre>\n<p>\u9996\u5148\u4f1a\u6267\u884c unattachedCategoriesForClass(cls)\uff0c\u4ee5\u4e0b\u662f unattachedCategoriesForClass \u51fd\u6570\u7684\u5b9e\u73b0</p>\n<pre><code>/***********************************************************************\n\n* unattachedCategoriesForClass\n* Returns the list of unattached categories for a class, and \n* deletes them from the list. \n* The result must be freed by the caller. \n* Locking: runtimeLock must be held by the caller.\n**********************************************************************/\nstatic category_list *unattachedCategoriesForClass(class_t *cls)\n{\nrwlock_assert_writing(&amp;runtimeLock);\nreturn NXMapRemove(unattachedCategories(), cls);\n}\n</code></pre>\n<p>\u6839\u636e\u6ce8\u91ca\u548c\u65b9\u6cd5\u540d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u77e5\u9053 unattachedCategoriesForClass \u505a\u4e86\u4ec0\u4e48\uff0c\u8c03\u7528 NXMapRemove \u51fd\u6570\uff0cNXMapRemove \u51fd\u6570\u4ee5 cls \u4e3a key \u4ece NXMapTable \u4e2d\u5220\u9664\u7c7b\u6620\u5c04\u7684\u5206\u7c7b\u5217\u8868\u5e76\u8fd4\u56de\u7c7b\u7684\u5206\u7c7b\u5217\u8868\uff0c\u6700\u7ec8 unattachedCategoriesForClass \u5c06 NXMapRemove \u51fd\u6570\u5f97\u5230\u5206\u7c7b\u5217\u8868\u8fd4\u56de\u3002</p>\n<p>\u5728\u6267\u884c unattachedCategoriesForClass \u51fd\u6570\u83b7\u5f97\u5206\u7c7b\u5217\u8868\u540e\uff0c\u5c06\u5206\u7c7b\u5217\u8868\u4f20\u5165 attachCategoryMethods \u51fd\u6570\u4e2d\uff0cattachCategoryMethods \u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b</p>\n<pre><code>attachCategoryMethods(class_t *cls, category_list *cats, \nBOOL *outVtablesAffected)\n{\nif (!cats) return;\nif (PrintReplacedMethods) printReplacements(cls, cats);\n\nBOOL isMeta = isMetaClass(cls);\nmethod_list_t **mlists = _malloc_internal(cats-&gt;count * sizeof(*mlists));\n\n// Count backwards through cats to get newest categories first\nint mcount = 0;\nint i = cats-&gt;count;\nBOOL fromBundle = NO;\nwhile (i--) {\nmethod_list_t *mlist = cat_method_list(cats-&gt;list[i].cat, isMeta);\nif (mlist) {\nmlists[mcount++] = mlist;\nfromBundle |= cats-&gt;list[i].fromBundle;\n}\n}\n\nattachMethodLists(cls, mlists, mcount, fromBundle, outVtablesAffected);\n\n_free_internal(mlists);\n\n}\n</code></pre>\n<p>\u6b64\u51fd\u6570\u4e2d\uff0c<strong>mlists \u662f\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u904d\u5386 cats \u5206\u7c7b\u5217\u8868\uff0c\u5c06\u5206\u7c7b\u65b9\u6cd5\u6570\u636e\u5b58\u5165 </strong>mlists \u4e2d\uff0c\u5e76\u5c06 mlists \u5b58\u50a8\u5230 class_rw_t \u7684\u65b9\u6cd5\u5217\u8868\u4e2d\u3002\u6700\u540e\u5c06 mlists \u4f20\u5165 attachMethodLists \u51fd\u6570\u4e2d\uff0c\u8be5\u51fd\u6570\u7684\u5b9e\u73b0</p>\n<pre><code>static void \nattachMethodLists(class_t *cls, method_list_t **lists, int count, \nBOOL methodsFromBundle, BOOL *outVtablesAffected)\n{\nrwlock_assert_writing(&amp;runtimeLock);\n\nBOOL vtablesAffected = NO;\nsize_t listsSize = count * sizeof(*lists);\n\n// Create or extend method list array\n// Leave `count` empty slots at the start of the array to be filled below.\n\nif (!cls-&gt;data-&gt;methods) {\n// no bonus method lists yet\ncls-&gt;data-&gt;methods = _calloc_internal(1 + count, sizeof(*lists));\n} else {\nsize_t oldSize = malloc_size(cls-&gt;data-&gt;methods);\ncls-&gt;data-&gt;methods = \n_realloc_internal(cls-&gt;data-&gt;methods, oldSize + listsSize);\nmemmove(cls-&gt;data-&gt;methods + count, cls-&gt;data-&gt;methods, oldSize);\n}\n\n// Add method lists to array.\n// Reallocate un-fixed method lists.\n\nint i;\nfor (i = 0; i &lt; count; i++) {\nmethod_list_t *mlist = lists[i];\nif (!mlist) continue;\n\n// Fixup selectors if necessary\nif (!isMethodListFixedUp(mlist)) {\nmlist = _memdup_internal(mlist, method_list_size(mlist));\nfixupMethodList(mlist, methodsFromBundle);\n}\n\n// Scan for vtable updates\nif (outVtablesAffected  &amp;&amp;  !vtablesAffected) {\nuint32_t m;\nfor (m = 0; m &lt; mlist-&gt;count; m++) {\nSEL sel = method_list_nth(mlist, m)-&gt;name;\nif (vtable_containsSelector(sel)) vtablesAffected = YES;\n}\n}\n\n// Fill method list array\ncls-&gt;data-&gt;methods[i] = mlist;\n}\n\nif (outVtablesAffected) *outVtablesAffected = vtablesAffected;\n}\n\n</code></pre>\n<p>\u9996\u5148\u5224\u65ad\u7c7b\u7684\u65b9\u6cd5\u603b\u5217\u8868 methods \u662f\u5426\u662f\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u4ee5\u5206\u7c7b\u65b9\u6cd5\u5217\u8868 lists \u521d\u59cb\u5316 methods\uff0c\u5982\u679c methods \u4e0d\u4e3a\u7a7a\uff0c\u4fbf\u4ee5\u539f methods \u548c lists \u521d\u59cb\u5316\uff0c\u901a\u8fc7 memmove \u5b8f\u65b9\u6cd5\u5c06 methods \u5bb9\u91cf\u6269\u5bb9\u589e\u52a0 count \uff08\u5373 lists \u4e2d\u7684\u65b9\u6cd5\u5217\u8868\u4e2a\u6570\uff09\u5e76\u5c06\u539f\u6765\u7684 methods \u4e2d\u7684\u65b9\u6cd5\u5217\u8868\u5f80\u540e\u79fb count \u4f4d\uff0c\u8fd9\u6837\u539f\u6765\u7684\u65b9\u6cd5\u5217\u8868\u5c31\u88ab\u79fb\u81f3\u5230 methods \u4e2d\u7684\u540e\u9762\u90e8\u5206\u3002</p>\n<p>\u5bf9\u4e8e methods \u65b9\u6cd5\u603b\u5217\u8868\u7684\u5904\u7406\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u4fbf\u662f\u5f00\u59cb\u6dfb\u52a0\u65b9\u6cd5\u5217\u8868\u81f3 methods \u4e2d\u3002\u904d\u5386 lists\uff0c\u5bf9\u65b9\u6cd5\u5217\u8868 mlist \u4e2d\u7684\u65b9\u6cd5\u8fdb\u884c\u8868\u6ce8\u518c\u7b49\u5904\u7406\uff0c\u6700\u540e\u6dfb\u52a0\u5230 methods \u4e2d\u3002</p>\n<p>\u6700\u540e\u7684\u6dfb\u52a0\u662f\u5c06\u5206\u7c7b\u65b9\u6cd5\u5217\u8868\u6dfb\u52a0\u5230 methods \u7684\u524d\u9762\uff0c\u8fd9\u6837\u7684\u6dfb\u52a0\u987a\u5e8f\uff0c\u4f7f\u5f97\u5373\u4f7f category \u4e2d\u5b58\u5728\u548c\u539f\u6765\u7c7b\u4e00\u6837\u7684\u65b9\u6cd5\u4e5f\u4e0d\u4f1a\u8986\u76d6\u6389\u539f\u6765\u7c7b\u7684\u65b9\u6cd5\u3002\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u4f1a\u4ece methods \u7684\u524d\u9762\u5f00\u59cb\u904d\u5386\uff0c\u5f53\u627e\u5230\u65b9\u6cd5\u540e\u5c31\u5f00\u59cb\u8c03\u7528\u5e76\u7ec8\u6b62\u67e5\u8be2\uff0c\u6240\u4ee5\u5728\u540e\u9762\u5b58\u5728\u4e00\u6837\u7684\u65b9\u6cd5\u4fbf\u4e0d\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u3002</p>\n<h3 id=\"category-load\">category \u4e0e + load \u65b9\u6cd5</h3>\n<p>\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6\uff0c\u5e76\u8c03\u7528 + load \u65b9\u6cd5</p>\n<pre><code>// Father.h\n@interface Father : NSObject\n\n+ (void)load;\n\n@end\n// Father.m\n@implementation Father\n\n+ (void)load {\nNSLog(@&quot;[Father load]&quot;);\n}\n\n// Father+Category.h\n@interface Father (Category)\n\n+ (void)load;\n\n@end\n// Father+Category.m\n@implementation Father (Category)\n\n\n+ (void)load {\nNSLog(@&quot;[Category load]&quot;);\n}\n\n// Father+Category2.h\n@interface Father (Category2)\n\n+ (void)load;\n\n@end\n// Father+Category2.m\n@implementation Father (Category2)\n\n\n+ (void)load {\nNSLog(@&quot;[Category2 load]&quot;);\n}\n</code></pre>\n<p>\u4ee5\u7f16\u8bd1\u6587\u4ef6\u987a\u5e8f\u4e3a\uff1aFather\u3001Father+Category\u3001Father+Category2\uff0c\u6839\u636e\u4e0a\u8282\u8bb2\u8ff0\u7684\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u89c9\u7684\u6253\u5370\u7684\u7ed3\u679c\u5982\u4e0b\uff1a</p>\n<pre><code>[Category2 load]\n</code></pre>\n<p>\u4f46\u5176\u5b9e\u6b63\u786e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a</p>\n<pre><code>[Father load]\n[Category load]\n[Category2 load]\n</code></pre>\n<h4 id=\"objc_init-load\">\u4ece objc_init \u4e2d\u770b + load \u7684\u5904\u7406</h4>\n<p>\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u8bf4\u597d\u7684\u53ea\u4f1a\u6267\u884c\u4e00\u6b21 load\uff1f\u6211\u4eec\u6765\u770b runtime \u5165\u53e3\u65b9\u6cd5 _objc_init</p>\n<pre><code>void _objc_init(void)\n{\n// fixme defer initialization until an objc-using image is found?\nenviron_init();\ntls_init();\nlock_init();\nexception_init();\n\n// Register for unmap first, in case some +load unmaps something\n_dyld_register_func_for_remove_image(&amp;unmap_image);\ndyld_register_image_state_change_handler(dyld_image_state_bound,\n1/*batch*/, &amp;map_images);\ndyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &amp;load_images);\n}\n</code></pre>\n<p>\u5728 map_images \u6267\u884c\u5b8c\u540e\uff0ccategory \u7684\u65b9\u6cd5\u4e5f\u5c31\u6dfb\u52a0\u5230\u7c7b\u4e0a\u4e86\uff0c\u6700\u540e\u6267\u884c</p>\n<pre><code>dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &amp;load_images);\n</code></pre>\n<p>\u521d\u59cb\u5316 dyld \u6240\u9700\u7684\u4f9d\u8d56\u548c\u6ce8\u518c load_images \u56de\u8c03\u901a\u77e5\uff0c\u5f53 iamge \u88ab\u52a0\u8f7d\u5c31\u4f1a\u901a\u77e5 runtime \u5904\u7406\uff0c\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b</p>\n<pre><code>\n/***********************************************************************\n\n* load_images\n* Process +load in the given images which are being mapped in by dyld.\n* Calls ABI-agnostic code after taking ABI-specific locks.\n*\n* Locking: write-locks runtimeLock and loadMethodLock\n**********************************************************************/\n__private_extern__ const char *\nload_images(enum dyld_image_states state, uint32_t infoCount,\nconst struct dyld_image_info infoList[])\n{\nBOOL found;\n\nrecursive_mutex_lock(&amp;loadMethodLock);\n\n// Discover load methods\nrwlock_write(&amp;runtimeLock);\nfound = load_images_nolock(state, infoCount, infoList);\nrwlock_unlock_write(&amp;runtimeLock);\n\n// Call +load methods (without runtimeLock - re-entrant)\nif (found) {\ncall_load_methods();\n}\n\nrecursive_mutex_unlock(&amp;loadMethodLock);\n\nreturn NULL;\n}\n</code></pre>\n<p>\u901a\u8fc7 load_images_nolock \u51fd\u6570\u67e5\u8be2 images\u4e2d\u662f\u5426\u6709 + load \u65b9\u6cd5\u5e76\u6536\u96c6 + load\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9e\u73b0\u5982\u4e0b</p>\n<pre><code>load_images_nolock(enum dyld_image_states state,uint32_t infoCount,\nconst struct dyld_image_info infoList[])\n{\nBOOL found = NO;\nuint32_t i;\n\ni = infoCount;\nwhile (i--) {\nheader_info *hi;\nfor (hi = FirstHeader; hi != NULL; hi = hi-&gt;next) {\nconst headerType *mhdr = (headerType*)infoList[i].imageLoadAddress;\nif (hi-&gt;mhdr == mhdr) {\nprepare_load_methods(hi);\nfound = YES;\n}\n}\n}\n\nreturn found;\n}\n</code></pre>\n<p>\u4f7f\u7528 while \u5faa\u73af\u904d\u5386\u52a0\u8f7d iamges \u4e2d\u7684 + load\uff0c\u5176\u4e2d\u5904\u7406\u4fbf\u662f prepare_load_methods \u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0</p>\n<pre><code>void prepare_load_methods(header_info *hi)\n{\nsize_t count, i;\n\nrwlock_assert_writing(&amp;runtimeLock);\n\nclass_t **classlist = \n_getObjc2NonlazyClassList(hi, &amp;count);\nfor (i = 0; i &lt; count; i++) {\nclass_t *cls = remapClass(classlist[i]);\nschedule_class_load(cls);\n}\n\ncategory_t **categorylist = _getObjc2NonlazyCategoryList(hi, &amp;count);\nfor (i = 0; i &lt; count; i++) {\ncategory_t *cat = categorylist[i];\n// Do NOT use cat-&gt;cls! It may have been remapped.\nclass_t *cls = remapClass(cat-&gt;cls);\nrealizeClass(cls);\nassert(isRealized(cls-&gt;isa));\nadd_category_to_loadable_list((Category)cat);\n}\n}\n</code></pre>\n<p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u9996\u5148\u88ab\u5904\u7406\u7684\u662f\u7c7b\u7684 + load \u65b9\u6cd5\uff0c\u5c06\u7c7b\u548c\u7c7b\u7684 + load  \u901a\u8fc7 schedule_class_load \u51fd\u6570\u4e2d\u7684 add_class_to_loadable_list \u51fd\u6570\u6536\u96c6\u5728 loadable_classes \u4e2d\uff0c\u7136\u540e\u624d\u662f\u5904\u7406\u5206\u7c7b\u4e2d\u7684 + load \u65b9\u6cd5\uff0c\u5c06\u5206\u7c7b\u548c\u5206\u7c7b\u4e2d\u7684 + load\u65b9\u6cd5\u6536\u96c6\u5728 loadable_categories \u4e2d\u3002\u81f3\u6b64\uff0c+ load \u6536\u96c6\u51c6\u5907\u5de5\u4f5c\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002</p>\n<p>\u56de\u5230 load_images \u51fd\u6570\uff0c \u5982\u679c\u6709 + load \u65b9\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48 load_images_nolock \u5219\u4f1a\u8fd4\u56de YES\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4fbf\u4f1a\u6267\u884c call_load_methods \u51fd\u6570\uff0c\u8c03\u7528\u6240\u6709\u6536\u96c6\u7684 + load \u65b9\u6cd5\uff0c\u6211\u4eec\u6765\u770b\u770b\u5b83\u7684\u5b9e\u73b0</p>\n<pre><code>void call_load_methods(void)\n{\nstatic BOOL loading = NO;\nBOOL more_categories;\n\nrecursive_mutex_assert_locked(&amp;loadMethodLock);\n\n// Re-entrant calls do nothing; the outermost call will finish the job.\nif (loading) return;\nloading = YES;\n\ndo {\n// 1. Repeatedly call class +loads until there aren't any more\nwhile (loadable_classes_used &gt; 0) {\ncall_class_loads();\n}\n\n// 2. Call category +loads ONCE\nmore_categories = call_category_loads();\n\n// 3. Run more +loads if there are classes OR more untried categories\n} while (loadable_classes_used &gt; 0  ||  more_categories);\n\nloading = NO;\n}\n</code></pre>\n<p>\u5728 do-while \u5faa\u73af\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u9996\u5148\u6267\u884c\u7684\u662f\u7c7b\u7684+ load \u65b9\u6cd5\uff0c\u7136\u540e\u662f\u5206\u7c7b\u7684 + load \u65b9\u6cd5 \u3002</p>\n<h4 id=\"_5\">\u603b\u7ed3</h4>\n<p>runtime \u4f1a\u6536\u96c6\u6240\u6709\u7684 + load \u65b9\u6cd5\u5e76\u8c03\u7528\u6240\u6709\u7684 + load \u65b9\u6cd5\uff0c\u6240\u4ee5\u5373\u4f7f\u5728\u5206\u7c7b\u4e2d\u5b9e\u73b0 + load \u65b9\u6cd5\u4e5f\u4e0d\u4f1a\u8986\u76d6\u7c7b\u7684+ load \u65b9\u6cd5\u3002+ load \u7684\u8c03\u7528\u987a\u5e8f\uff0c\u7c7b\u603b\u662f\u5728\u5206\u7c7b\u4e4b\u524d\u8c03\u7528\uff0c\u800c\u5206\u7c7b\u91cc\u7684 + load \u65b9\u6cd5\u8c03\u7528\u987a\u5e8f\u81ea\u7136\u662f\u4ee5\u6700\u540e\u7f16\u8bd1\u7684\u5206\u7c7b\u7684 + load \u65b9\u6cd5\u4e3a\u5148\u3002</p>\n<h3 id=\"_6\">\u540e\u8a00</h3>\n<p>\u672c\u6b21\u6e90\u7801\u7248\u672c\u662f objc4-437\uff0c\u9644\u4e0a\u4e0b\u8f7d\u5165\u53e3 <a href=\"https://opensource.apple.com/tarballs/objc4/\">\u6e90\u7801\u4e0b\u8f7d</a>\u3002\u4f5c\u4e3a\u4e00\u53ea\u83dc\u9e1f\uff0c\u4e5f\u6709\u5411\u5f80\u6210\u4e3a\u5927\u795e\u7684\u68a6\u60f3\u3002\u9605\u8bfb\u6e90\u7801\uff0c\u6709\u7684\u65f6\u5019\u8ba9\u81ea\u5df1\u5f88\u662f\u5934\u75bc\uff0c\u5f53\u6162\u6162\u53cd\u590d\u9605\u8bfb\u540e\uff0c\u611f\u89c9\u8c41\u7136\u5f00\u6717\u3002\u672c\u6587\u82e5\u6709\u9519\u8bef\u4e4b\u5904\u8fd8\u671b\u6307\u51fa\uff0c\u8c22\u8c22\uff01</p>"}