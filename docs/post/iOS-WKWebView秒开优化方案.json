{"title": "iOS-WKWebView\u79d2\u5f00\u4f18\u5316\u65b9\u6848", "date": "2022-02-10 16:50:46", "categories": "iOS", "tags": "WKWebView\u79d2\u5f00\u4f18\u5316\u65b9\u6848", "keywords": "WKWebView\u79d2\u5f00\u4f18\u5316\u65b9\u6848", "description": "", "images": "", "file_name": "iOS-WKWebView\u79d2\u5f00\u4f18\u5316\u65b9\u6848", "short": " \u7b80\u8981 \n \u89e3\u51b3\u573a\u666f \n \u540e\u53f0\u652f\u6301\u4f7f\u7528 HTML \u6587\u672c\u7f16\u8f91\u5668\u53d1\u8868 HTML \u683c\u5f0f\u7684\u5e16\u5b50\uff0c\u79fb\u52a8\u7aef\u8981\u517c\u5bb9 HTML \u683c\u5f0f\u5e16\u5b50\u5c55\u793a\uff0c\u5fc5\u7136\u8981\u91c7\u7528 WebView \u52a0\u8f7d HTML \u683c\u5f0f\u5e16\u5b50\uff0c\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u5448\u73b0\u6548\u679c\u3002 \n ", "content": "<h3 id=\"_1\">\u7b80\u8981</h3>\n<h4 id=\"_2\">\u89e3\u51b3\u573a\u666f</h4>\n<p>\u540e\u53f0\u652f\u6301\u4f7f\u7528 HTML \u6587\u672c\u7f16\u8f91\u5668\u53d1\u8868 HTML \u683c\u5f0f\u7684\u5e16\u5b50\uff0c\u79fb\u52a8\u7aef\u8981\u517c\u5bb9 HTML \u683c\u5f0f\u5e16\u5b50\u5c55\u793a\uff0c\u5fc5\u7136\u8981\u91c7\u7528 WebView \u52a0\u8f7d HTML \u683c\u5f0f\u5e16\u5b50\uff0c\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u5448\u73b0\u6548\u679c\u3002</p>\n<!-- more -->\n<h4 id=\"_3\">\u5b58\u5728\u7684\u95ee\u9898</h4>\n<p>WebView \u5185\u5bb9\u52a0\u8f7d\u901f\u5ea6\u8f83\u539f\u751f\u6709\u8089\u773c\u53ef\u89c1\u7684\u5ef6\u8fdf\uff0c\u5728\u8fdb\u5165\u5e16\u5b50\u8be6\u60c5\u9875\u65f6\uff0cWebView \u5185\u5bb9\u8fd8\u672a\u52a0\u8f7d\u5b8c\u6210\uff0c\u9875\u9762\u663e\u793a\u7a7a\u767d\u3002WebView \u5185\u5bb9\u9ad8\u5ea6\u65e0\u6cd5\u5feb\u901f\u83b7\u5f97\uff0c\u5bfc\u81f4\u539f\u751f\u5217\u8868\u5d4c\u5165 WebView \u7684\u5e03\u5c40\u4e2d\u4f1a\u51fa\u73b0\u5185\u5bb9\u7a81\u7136\u6491\u5f00\u7684\u6548\u679c\uff0c\u5bf9\u4e8e\u7528\u6237\u6d4f\u89c8\u6765\u8bf4\uff0c\u611f\u89c2\u4e0d\u592a\u597d\u3002</p>\n<h4 id=\"_4\">\u89e3\u51b3\u601d\u8def</h4>\n<ul>\n<li>\u4f18\u5316 WebView \u7684\u52a0\u8f7d\u6548\u7387\uff0c\u5173\u4e8e HTML \u7c7b\u578b\u5e16\u5b50\u5185\u5bb9\uff0c\u540e\u7aef\u63a5\u53e3\u8fd4\u56de\u7684\u662f HTML \u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u6bd4\u8f83\u5f71\u54cd\u52a0\u8f7d\u901f\u5ea6\u662f\u5bf9\u4e8e\u56fe\u7247\u7684\u52a0\u8f7d\uff0c\u6240\u4ee5\u9700\u8003\u8651\u5bf9\u56fe\u7247\u8fdb\u884c\u7f13\u5b58\uff0c\u5f53\u518d\u6b21\u52a0\u8f7d\u65f6\u53ef\u4ee5\u76f4\u63a5\u53d6\u7f13\u5b58\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u7f51\u7edc\u8bf7\u6c42\u83b7\u53d6\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u8fd9\u6837\u4f18\u5316\u540e\uff0c\u52a0\u8f7d\u901f\u5ea6\u8fd8\u662f\u65e0\u6cd5\u8fbe\u5230\u539f\u751f\u9875\u9762\u52a0\u8f7d\u7684\u6548\u679c\u3002</li>\n<li>\u5efa\u7acb WebView \u7f13\u5b58\u6c60\uff0c\u628a\u52a0\u8f7d\u5b8c\u6210\u7684 WebView \u653e\u5165\u7f13\u5b58\u6c60\u4e2d\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6620\u5c04\u6807\u8bc6\uff0c\u4e0b\u6b21\u52a0\u8f7d\u540c\u4e00\u5e16\u5b50\u65f6\uff0c\u6839\u636e\u6807\u8bc6\u76f4\u63a5\u53d6\u51fa WebView \u5c55\u793a\u3002\u4e3a\u8003\u8651\u5185\u5b58\u5360\u7528\u91cf\u95ee\u9898\uff0c\u4e0d\u80fd\u65e0\u9650\u5236\u6570\u91cf\u7684\u7f13\u5b58 WebView \u5bf9\u8c61\uff0c\u5f97\u9650\u5236\u6700\u5927\u7f13\u5b58\u6570\u91cf\u3002</li>\n<li>WebView \u7f13\u5b58\u6c60\u4e5f\u4ec5\u4ec5\u53ea\u662f\u5bf9\u4e8e\u9996\u6b21\u52a0\u8f7d\u540e\u7684\u60c5\u51b5\u505a\u5904\u7406\uff0c\u5e76\u4e14\u7f13\u5b58\u6c60\u7684\u6570\u91cf\u8fd8\u505a\u4e86\u9650\u5236\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u65e0\u6cd5\u547d\u4e2d\u7f13\u5b58\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u9996\u6b21\u52a0\u8f7d\u524d\u5f97\u8fdb\u884c\u9884\u52a0\u8f7d\u5904\u7406\uff0c\u5728\u5e16\u5b50\u5217\u8868\u9875\u65f6\uff0c\u5bf9\u4e8e\u5f53\u524d\u5c4f\u5e55\u5c55\u793a\u7684\u5e16\u5b50\u5185\u5bb9\u8fdb\u884c\u9884\u52a0\u8f7d\u5904\u7406\u5e76\u653e\u5165\u7f13\u5b58\u6c60\uff0c\u5728\u8fdb\u5165\u5e16\u5b50\u8be6\u60c5\u9875\u65f6\uff0c\u4ece\u7f13\u5b58\u6c60\u4e2d\u53d6\u51fa\u5c55\u793a\uff0c\u8fd9\u6837\u53ef\u4ee5\u8fbe\u5230\u539f\u751f\u9875\u9762\u52a0\u8f7d\u7684\u6548\u679c\u3002</li>\n</ul>\n<h3 id=\"_5\">\u5b9e\u73b0\u65b9\u6848</h3>\n<h4 id=\"webview\">WebView \u8d44\u6e90\u7f13\u5b58</h4>\n<h5 id=\"urlscheme\">URLScheme \u8bbe\u7f6e</h5>\n<p>WKWebView \u63d0\u4f9b WKURLSchemeHandler \u673a\u5236\u62e6\u622a\u8d44\u6e90\u8bf7\u6c42\uff0c\u9700\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u8d44\u6e90\u94fe\u63a5 URLScheme\uff0c\u4e0d\u80fd\u662f http\u3001https\uff0c\u5fc5\u987b\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u3002</p>\n<pre><code>// WebURLSchemeHandler\nstatic let urlScheme = &quot;hooimageprex&quot;\n\nlet config = WKWebViewConfiguration()\nconfig.setURLSchemeHandler(WebURLSchemeHandler(), forURLScheme: WebURLSchemeHandler.urlScheme)\nlet webView = WKWebView.init(frame: CGRect(x: 0, y: 0, width: kScreenWidth - 16, height: 200), configuration: config)\n</code></pre>\n<p>\u540e\u7aef\u8fd4\u56de\u7684 HTML \u5b57\u7b26\u4e32\u4e2d\uff0c\u56fe\u7247\u5730\u5740\u7684 URLScheme \u662f https\uff0c\u56e0\u6b64\uff0c\u53ea\u80fd\u901a\u8fc7\u6b63\u5219\u5339\u914d\u65b9\u5f0f\u83b7\u53d6 \u56fe\u7247\u5730\u5740\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u9010\u4e00\u4fee\u6539\u6210 hooimageprex:// \u3002</p>\n<h5 id=\"wkurlschemehandler\">WKURLSchemeHandler \u8d44\u6e90\u8bf7\u6c42\u62e6\u622a\u5904\u7406</h5>\n<p>\u4f7f\u7528 WKURLSchemeHandler\uff0c\u9700\u5b9e\u73b0\u4e24\u4e2a\u534f\u8bae\u65b9\u6cd5</p>\n<pre><code>/// \u8d44\u6e90\u8bf7\u6c42\u5f00\u59cb\nfunc webView(_ webView: WKWebView, start urlSchemeTask: WKURLSchemeTask)\n\n/// \u8d44\u6e90\u8bf7\u6c42\u7ed3\u675f\nfunc webView(_ webView: WKWebView, stop urlSchemeTask: WKURLSchemeTask) \n</code></pre>\n<p>WebView \u8fdb\u884c\u8d44\u6e90\u8bf7\u6c42\u65f6\uff0c\u4fbf\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u5c06\u8d44\u6e90\u5730\u5740\u6062\u590d\u6210\u6b63\u5e38\u7684 http \u5730\u5740\uff0c\u4ee5\u8d44\u6e90\u5730\u5740\u4e3a key \u53bb\u83b7\u53d6\u8d44\u6e90\u7f13\u5b58\uff0c\u82e5\u83b7\u5f97\u7f13\u5b58\uff0c\u5219\u5c06\u8d44\u6e90\u6570\u636e\u586b\u5145\u7ed9 urlSchemeTask\u3002\u82e5\u672a\u83b7\u5f97\u7f13\u5b58\uff0c\u5219\u901a\u8fc7\u8d44\u6e90\u5730\u5740\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u6210\u529f\u540e\uff0c\u5c06\u8d44\u6e90\u6570\u636e\u586b\u5145\u7ed9 urlSchemeTask \u5e76\u7f13\u5b58\u3002\u5982\u4e0b\u8f7d\u5931\u8d25\uff0c\u8c03\u7528 didFailWithError \u65b9\u6cd5\u7ed3\u675f\u8d44\u6e90\u8bf7\u6c42\u3002</p>\n<pre><code>/// \u8d44\u6e90\u8bf7\u6c42\u5f00\u59cb\nfunc webView(_ webView: WKWebView, start urlSchemeTask: WKURLSchemeTask) {\n    urlSchemeTaskList[urlSchemeTask.description] = false\n\n    let urlSchemeUrlString = urlSchemeTask.request.url?.absoluteString ?? &quot;&quot;\n    guard urlSchemeUrlString.starts(with: HooWebURLSchemeHandler.urlScheme) else { return }\n    let resourceUrlString = urlSchemeUrlString.replacingOccurrences(of: HooWebURLSchemeHandler.urlScheme, with: &quot;https&quot;)\n    /// \u9996\u5148\u8bfb\u53d6\u7f13\u5b58\n    ImageCache.default.retrieveImage(forKey: resourceUrlString) { [weak self] result in\n        switch result {\n            case let .success(cacheResult):\n                logDebug(&quot;HooWebURLSchemeHandler: \u547d\u4e2d\u7f13\u5b58&quot;)\n                if let requestUrl = urlSchemeTask.request.url, let cacheImage = cacheResult.image, let imageData = cacheImage.compressedData() {\n                    self?.urlTaskCompletionStatusList[resourceUrlString] = true\n                    logDebug(&quot;HooWebURLSchemeHandler: \u547d\u4e2d\u7f13\u5b58\uff0c\u586b\u5145&quot;)\n                    if self?.urlSchemeTaskIsStop(urlSchemeTask: urlSchemeTask) ?? false == false {\n                        let mimeType = self?.mimeType(forPathExtension: requestUrl.pathExtension)\n                        let response:URLResponse = URLResponse.init(url: requestUrl, mimeType: mimeType, expectedContentLength: imageData.count, textEncodingName: nil)\n                        urlSchemeTask.didReceive(response)\n                        urlSchemeTask.didReceive(imageData)\n                        urlSchemeTask.didFinish()\n                    }\n                } else {\n                    logDebug(&quot;HooWebURLSchemeHandler: \u672a\u547d\u4e2d\u7f13\u5b58\uff0c\u8bf7\u6c42&quot;)\n                    self?.needNetWorkRequestImageSource(urlSchemeTask: urlSchemeTask, urlString: resourceUrlString)\n                }\n                break\n            case .failure(_):\n                logDebug(&quot;HooWebURLSchemeHandler: \u672a\u547d\u4e2d\u7f13\u5b58\u9519\u8bef\uff0c\u8bf7\u6c42&quot;)\n                self?.needNetWorkRequestImageSource(urlSchemeTask: urlSchemeTask, urlString: resourceUrlString)\n                break\n        }\n    }\n}\n</code></pre>\n<p>\u7f13\u5b58\u672a\u547d\u4e2d\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u8d44\u6e90\u5730\u5740\u4e0b\u8f7d\u8d44\u6e90\u586b\u5145\u5230 urlSchemeTask \u5e76\u7f13\u5b58</p>\n<pre><code>/// \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u9700\u81ea\u884c\u4e0b\u8f7d\u5e76\u7f6e\u5165\u7f13\u5b58\nprivate func needNetWorkRequestImageSource(urlSchemeTask: WKURLSchemeTask, urlString: String) {\n    if let downURL = URL.safe(urlString: urlString) {\n        logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42&quot;)\n        ImageDownloader.default.downloadImage(with: downURL, options: [.processor(WebPProcessor.default), .cacheSerializer(WebPSerializer.default)]) { [weak self] result in\n            switch result {\n                case let .success(imageLoadingResult):\n                    logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42\u6210\u529f&quot;)\n                    if let requestUrl = urlSchemeTask.request.url {\n                        self?.urlTaskCompletionStatusList[urlString] = true\n                        logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42\u6210\u529f\uff0c\u586b\u5145&quot;)\n                        ImageCache.default.store(imageLoadingResult.image, forKey: urlString)\n                        if self?.urlSchemeTaskIsStop(urlSchemeTask: urlSchemeTask) ?? false == false {\n                            let mimeType = self?.mimeType(forPathExtension: requestUrl.pathExtension)\n                            let imageData = imageLoadingResult.originalData\n                            let response:URLResponse = URLResponse.init(url: requestUrl, mimeType: mimeType, expectedContentLength: imageData.count, textEncodingName: nil)\n                            urlSchemeTask.didReceive(response)\n                            urlSchemeTask.didReceive(imageData)\n                            urlSchemeTask.didFinish()\n                        }\n                    } else {\n                        self?.urlTaskCompletionStatusList[urlString] = false\n                        logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42\u5f02\u5e38&quot;)\n                        if self?.urlSchemeTaskIsStop(urlSchemeTask: urlSchemeTask) ?? false == false {\n                            urlSchemeTask.didFailWithError(HooWebURLSchemeHandlerDownError.downFail)\n                        }\n                    }\n                    break\n                default:\n                    self?.urlTaskCompletionStatusList[urlString] = false\n                    logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42\u5931\u8d25&quot;)\n                    if self?.urlSchemeTaskIsStop(urlSchemeTask: urlSchemeTask) ?? false == false {\n                        urlSchemeTask.didFailWithError(HooWebURLSchemeHandlerDownError.downFail)\n                    }\n                    break\n            }\n        }\n    } else {\n        urlTaskCompletionStatusList[urlString] = false\n        logDebug(&quot;HooWebURLSchemeHandler: \u8d44\u6e90\u8bf7\u6c42\u94fe\u63a5\u9519\u8bef&quot;)\n        if urlSchemeTaskIsStop(urlSchemeTask: urlSchemeTask) == false {\n            urlSchemeTask.didFailWithError(HooWebURLSchemeHandlerDownError.downFail)\n        }\n    }\n}\n</code></pre>\n<p>\u5f53 WebView \u91ca\u653e\u65f6\uff0curlSchemeTask \u4f1a\u505c\u6b62\u4efb\u52a1\u5e76\u8c03\u7528 \"func webView(_ webView: WKWebView, stop urlSchemeTask: WKURLSchemeTask)\" \uff0c\u5982\u679c\u8fd9\u65f6\u6211\u4eec\u8fd8\u5f80 urlSchemeTask \u4e2d\u586b\u5145\u8d44\u6e90\u6570\u636e\uff0c\u4f1a\u5f15\u53d1\u7a0b\u5e8f\u5d29\u6e83\u3002</p>\n<pre><code>/// \u8d44\u6e90\u8bf7\u6c42\u7ed3\u675f\nfunc webView(_ webView: WKWebView, stop urlSchemeTask: WKURLSchemeTask) {\n    urlSchemeTaskList[urlSchemeTask.description] = true\n}\n</code></pre>\n<p>urlSchemeTaskList \u7528\u4e8e\u8bb0\u5f55 urlSchemeTask \u662f\u5426\u505c\u6b62\u4efb\u52a1\uff0c\u5728\u4e0a\u8ff0\u5173\u4e8e urlSchemeTask \u586b\u5145\u8d44\u6e90\u6570\u636e\u4e4b\u524d\uff0c\u90fd\u4f1a\u5bf9 urlSchemeTask \u7684\u72b6\u6001\u8fdb\u884c\u5224\u65ad\u3002</p>\n<pre><code>/// \u5224\u65ad\u8d44\u6e90\u8bf7\u6c42\u662f\u5426\u5df2\u505c\u6b62\nprivate func urlSchemeTaskIsStop(urlSchemeTask: WKURLSchemeTask) -&gt; Bool {\n    return urlSchemeTaskList[urlSchemeTask.description] ?? false\n}\n</code></pre>\n<h4 id=\"hoowkwebviewpool\">HooWKWebViewPool \u7f13\u5b58\u6c60</h4>\n<p>\u521b\u5efa\u7f13\u5b58\u6c60\u5355\u4f8b</p>\n<pre><code>/// webView \u7f13\u5b58\u6c60\nclass HooWKWebViewPool {\n    static let share = HooWKWebViewPool()\n    /// identifiler \u548c webView \u7684\u6620\u5c04\n    private var poolDict: [String: HooWKPrepareWebView] = [:]\n    /// identifiler \u6570\u7ec4\n    private var identifilerList: [String] = []\n    /// \u6700\u5927\u7f13\u5b58\u6570\u91cf\n    private let initialViewsMaxCount = 20\n    /// \u961f\u5217\n    private let lockQueue = DispatchQueue(label: &quot;WKWebViewPool_lock_queue&quot;, qos: .userInitiated)\n    ......\n</code></pre>\n<p>\u6839\u636e HTML \u5b57\u7b26\u4e32\u548c\u5bf9\u5e94\u7684\u7f13\u5b58\u6807\u8bc6\u8fdb\u884c\u9884\u52a0\u8f7d\u5904\u7406\uff0c\u9996\u5148\uff0c\u901a\u8fc7\u7f13\u5b58\u6807\u8bc6\u5224\u65ad\uff0c\u8be5\u5185\u5bb9\u662f\u5426\u5df2\u7ecf\u8fdb\u884c\u4e86\u9884\u52a0\u8f7d\u5904\u7406\uff0c\u82e5\u672a\u8fdb\u884c\u8fc7\u9884\u52a0\u8f7d\u5904\u7406\uff0c\u5219\u521b\u5efa\u65b0\u7684 WebView \u53bb\u52a0\u8f7d HTML \u5b57\u7b26\u4e32\uff0c\u5e76\u5b58\u5165\u7f13\u5b58\u6c60\u4e2d\u3002</p>\n<pre><code>/// \u9884\u52a0\u8f7dweb\n/// - Parameter infoList: \u9884\u52a0\u8f7d\u4fe1\u606f\u5217\u8868\nfunc prepare(infoList: [HooWKWebViewPrepareInfo]) {\n    for info in infoList {\n        logDebug(&quot;\u9884\u52a0\u8f7dweb \\(info.identifiler ?? &quot;&quot;)&quot;)\n        guard let identifiler = info.identifiler, identifiler.count &gt; 0 else { continue }\n        if let cacheWebView = getWebView(identifiler: identifiler) {\n            if cacheWebView.isNeedReload {\n                cacheWebView.reloadContent()\n            }\n            continue\n        }\n        let webView = createWebView()\n        webView.loadContent(content: info.content ?? &quot;&quot;)\n        cachePrepareWebView(webView: webView, prepareInfo: info)\n    }\n}\n\n/// \u5c06 webView \u5b58\u5165\u7f13\u5b58\u6c60\n/// - Parameters:\n/// - prepareInfo: \u9884\u52a0\u8f7d\u4fe1\u606f\nfunc cachePrepareWebView(webView: HooWKPrepareWebView, prepareInfo: HooWKWebViewPrepareInfo) {\n    lockQueue.async(flags: .barrier) { [weak self] in\n        let identifiler = prepareInfo.identifiler ?? &quot;&quot;\n        if identifiler.count == 0 || self?.identifilerList.contains(identifiler) ?? false {\n            return\n        }\n        if self?.identifilerList.count ?? 0 &gt;= self?.initialViewsMaxCount ?? 0 {\n            let removeIdentifiler = self?.identifilerList.removeFirst()\n            self?.poolDict.removeValue(forKey: removeIdentifiler ?? &quot;&quot;)\n        }\n        logDebug(&quot;\u5b58\u5165\u9884\u52a0\u8f7dweb \\(identifiler)&quot;)\n        self?.identifilerList.append(identifiler)\n        self?.poolDict[identifiler] = webView\n    }\n}\n\n/// \u6839\u636e identifiler \u83b7\u53d6 webView\n/// - Parameter identifiler: \u6807\u8bc6\n/// - Returns: webView\nfunc getWebView(identifiler: String) -&gt; HooWKPrepareWebView? {\n    lockQueue.sync {\n        return self.poolDict[identifiler]\n    }\n}\n\n/// \u521b\u5efa\u9884\u52a0\u8f7d webView\n/// - Returns: webView\nprivate func createWebView() -&gt; HooWKPrepareWebView {\n    return HooWKPrepareWebView()\n}\n</code></pre>\n<h3 id=\"_6\">\u603b\u7ed3</h3>\n<p>\u4e0a\u8ff0\u53ea\u662f\u5bf9\u4e8e\u7b80\u5355 HTML \u5b57\u7b26\u4e32\u52a0\u8f7d\u7684\u4f18\u5316\u5904\u7406\uff0c\u5bf9\u4e8e\u8d44\u6e90\u7684\u7f13\u5b58\u4e5f\u53ea\u5904\u7406\u4e86\u56fe\u7247\u8d44\u6e90\uff0c\u5bf9\u4e8e\u901a\u8fc7 url \u52a0\u8f7d\u7f51\u9875\u7684\u79d2\u5f00\u4f18\u5316\uff0c\u8fd8\u9700\u524d\u540e\u7aef\u5171\u540c\u914d\u5408\u4f18\u5316\u3002</p>"}